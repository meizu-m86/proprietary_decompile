LOAD:00000000                               ;
LOAD:00000000                               ; +-------------------------------------------------------------------------+
LOAD:00000000                               ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:00000000                               ; |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
LOAD:00000000                               ; +-------------------------------------------------------------------------+
LOAD:00000000                               ;
LOAD:00000000                               ; Input SHA256 : C79B56A2DBB3ED72180424EF4005E5DEE1C87F6C4B215205C701674ED21F0927
LOAD:00000000                               ; Input MD5    : 864CFB27D3B32F0A98C1BE65B0821556
LOAD:00000000                               ; Input CRC32  : 21C61ED7
LOAD:00000000
LOAD:00000000                               ; File Name   : Z:\work\LineageOS\vendor\meizu\m86\proprietary\lib\hw\memtrack.exynos5.so
LOAD:00000000                               ; Format      : ELF for ARM (Shared object)
LOAD:00000000                               ; Interpreter '/system/bin/linker'
LOAD:00000000                               ; Needed Library 'liblog.so'
LOAD:00000000                               ; Needed Library 'libc++.so'
LOAD:00000000                               ; Needed Library 'libdl.so'
LOAD:00000000                               ; Needed Library 'libc.so'
LOAD:00000000                               ; Needed Library 'libm.so'
LOAD:00000000                               ; Shared Name 'memtrack.exynos5.so'
LOAD:00000000                               ;
LOAD:00000000                               ; Options     : EF_ARM_SOFT_FLOAT
LOAD:00000000                               ; EABI version: 5
LOAD:00000000                               ;
LOAD:00000000
LOAD:00000000                               ; Processor       : ARM
LOAD:00000000                               ; ARM architecture: ARMv7
LOAD:00000000                               ; Target assembler: Generic assembler for ARM
LOAD:00000000                               ; Byte sex        : Little endian
LOAD:00000000
LOAD:00000000                               ; ===========================================================================
LOAD:00000000
LOAD:00000000                               ; Segment type: Pure code
LOAD:00000000                               AREA LOAD, CODE, ALIGN=12
LOAD:00000000                               CODE32
LOAD:00000000 7F 45 4C 46                   dword_0 DCD 0x464C457F        ; CODE XREF: sub_920+C↓j
LOAD:00000000                                                             ; DATA XREF: LOAD:000001B0↓o
LOAD:00000000                                                             ; LOAD:000001C0↓o
LOAD:00000000                                                             ; LOAD:000001D0↓o
LOAD:00000000                                                             ; LOAD:000001E0↓o
LOAD:00000000                                                             ; LOAD:000001F0↓o
LOAD:00000000                                                             ; LOAD:00000200↓o
LOAD:00000000                                                             ; LOAD:00000210↓o
LOAD:00000000                                                             ; LOAD:00000220↓o
LOAD:00000000                                                             ; LOAD:00000230↓o
LOAD:00000000                                                             ; LOAD:00000240↓o
LOAD:00000000                                                             ; LOAD:00000250↓o
LOAD:00000000                                                             ; LOAD:00000260↓o
LOAD:00000000                                                             ; LOAD:00000270↓o
LOAD:00000000                                                             ; LOAD:00000280↓o ...
LOAD:00000000                                                             ; File format: \x7FELF
LOAD:00000004 01                            byte_4 DCB 1                  ; File class: 32-bit
LOAD:00000005 01                            DCB 1                         ; Data encoding: little-endian
LOAD:00000006 01                            DCB 1                         ; File version
LOAD:00000007 00                            DCB 0                         ; OS/ABI: UNIX System V ABI
LOAD:00000008 00                            DCB 0                         ; ABI Version
LOAD:00000009 00 00 00 00 00 00 00          DCB 0, 0, 0, 0, 0, 0, 0       ; Padding
LOAD:00000010 03 00                         DCW 3                         ; File type: Shared object
LOAD:00000012 28 00                         DCW 0x28                      ; Machine: ARM
LOAD:00000014 01 00 00 00                   DCD 1                         ; File version
LOAD:00000018 00 00 00 00                   DCD 0                         ; Entry point
LOAD:0000001C 34 00 00 00                   DCD 0x34                      ; PHT file offset
LOAD:00000020 78 42 00 00                   DCD 0x4278                    ; SHT file offset
LOAD:00000024 00 02 00 05                   DCD 0x5000200                 ; Processor-specific flags
LOAD:00000028 34 00                         DCW 0x34                      ; ELF header size
LOAD:0000002A 20 00                         DCW 0x20                      ; PHT entry size
LOAD:0000002C 09 00                         DCW 9                         ; Number of entries in PHT
LOAD:0000002E 28 00                         DCW 0x28                      ; SHT entry size
LOAD:00000030 1B 00                         DCW 0x1B                      ; Number of entries in SHT
LOAD:00000032 1A 00                         DCW 0x1A                      ; SHT entry index for string table
LOAD:00000034                               ; ELF32 Program Header
LOAD:00000034                               ; PHT Entry 0
LOAD:00000034 06 00 00 00                   dword_34 DCD 6                ; DATA XREF: LOAD:0000003C↓o
LOAD:00000034                                                             ; Type: PHDR
LOAD:00000038 34 00 00 00                   DCD 0x34                      ; File offset
LOAD:0000003C 34 00 00 00                   DCD dword_34                  ; Virtual address
LOAD:00000040 34 00 00 00                   DCD 0x34                      ; Physical address
LOAD:00000044 20 01 00 00                   DCD 0x120                     ; Size in file image
LOAD:00000048 20 01 00 00                   DCD 0x120                     ; Size in memory image
LOAD:0000004C 04 00 00 00                   DCD 4                         ; Flags
LOAD:00000050 04 00 00 00                   DCD 4                         ; Alignment
LOAD:00000054                               ; PHT Entry 1
LOAD:00000054 03 00 00 00                   DCD 3                         ; Type: INTERP
LOAD:00000058 54 01 00 00                   DCD 0x154                     ; File offset
LOAD:0000005C 54 01 00 00                   DCD aSystemBinLinke           ; Virtual address
LOAD:00000060 54 01 00 00                   DCD 0x154                     ; Physical address
LOAD:00000064 13 00 00 00                   DCD 0x13                      ; Size in file image
LOAD:00000068 13 00 00 00                   DCD 0x13                      ; Size in memory image
LOAD:0000006C 04 00 00 00                   DCD 4                         ; Flags
LOAD:00000070 01 00 00 00                   DCD 1                         ; Alignment
LOAD:00000074                               ; PHT Entry 2
LOAD:00000074 01 00 00 00                   DCD 1                         ; Type: LOAD
LOAD:00000078 00 00 00 00                   DCD 0                         ; File offset
LOAD:0000007C 00 00 00 00                   DCD 0                         ; Virtual address
LOAD:00000080 00 00 00 00                   DCD 0                         ; Physical address
LOAD:00000084 C0 2F 00 00                   DCD 0x2FC0                    ; Size in file image
LOAD:00000088 C0 2F 00 00                   DCD 0x2FC0                    ; Size in memory image
LOAD:0000008C 05 00 00 00                   DCD 5                         ; Flags
LOAD:00000090 00 10 00 00                   DCD 0x1000                    ; Alignment
LOAD:00000094                               ; PHT Entry 3
LOAD:00000094 01 00 00 00                   DCD 1                         ; Type: LOAD
LOAD:00000098 04 3E 00 00                   DCD 0x3E04                    ; File offset
LOAD:0000009C 04 4E 00 00                   DCD off_4E04                  ; Virtual address
LOAD:000000A0 04 4E 00 00                   DCD 0x4E04                    ; Physical address
LOAD:000000A4 9C 02 00 00                   DCD 0x29C                     ; Size in file image
LOAD:000000A8 A5 03 00 00                   DCD 0x3A5                     ; Size in memory image
LOAD:000000AC 06 00 00 00                   DCD 6                         ; Flags
LOAD:000000B0 00 10 00 00                   DCD 0x1000                    ; Alignment
LOAD:000000B4                               ; PHT Entry 4
LOAD:000000B4 02 00 00 00                   DCD 2                         ; Type: DYNAMIC
LOAD:000000B8 50 3E 00 00                   DCD 0x3E50                    ; File offset
LOAD:000000BC 50 4E 00 00                   DCD stru_4E50                 ; Virtual address
LOAD:000000C0 50 4E 00 00                   DCD 0x4E50                    ; Physical address
LOAD:000000C4 10 01 00 00                   DCD 0x110                     ; Size in file image
LOAD:000000C8 10 01 00 00                   DCD 0x110                     ; Size in memory image
LOAD:000000CC 06 00 00 00                   DCD 6                         ; Flags
LOAD:000000D0 04 00 00 00                   DCD 4                         ; Alignment
LOAD:000000D4                               ; PHT Entry 5
LOAD:000000D4 04 00 00 00                   DCD 4                         ; Type: NOTE
LOAD:000000D8 68 01 00 00                   DCD 0x168                     ; File offset
LOAD:000000DC 68 01 00 00                   DCD dword_168                 ; Virtual address
LOAD:000000E0 68 01 00 00                   DCD 0x168                     ; Physical address
LOAD:000000E4 38 00 00 00                   DCD 0x38                      ; Size in file image
LOAD:000000E8 38 00 00 00                   DCD 0x38                      ; Size in memory image
LOAD:000000EC 04 00 00 00                   DCD 4                         ; Flags
LOAD:000000F0 04 00 00 00                   DCD 4                         ; Alignment
LOAD:000000F4                               ; PHT Entry 6
LOAD:000000F4 51 E5 74 64                   DCD 0x6474E551                ; Type: STACK
LOAD:000000F8 00 00 00 00                   DCD 0                         ; File offset
LOAD:000000FC 00 00 00 00                   DCD 0                         ; Virtual address
LOAD:00000100 00 00 00 00                   DCD 0                         ; Physical address
LOAD:00000104 00 00 00 00                   DCD 0                         ; Size in file image
LOAD:00000108 00 00 00 00                   DCD 0                         ; Size in memory image
LOAD:0000010C 06 00 00 00                   DCD 6                         ; Flags
LOAD:00000110 00 00 00 00                   DCD 0                         ; Alignment
LOAD:00000114                               ; PHT Entry 7
LOAD:00000114 01 00 00 70                   DCD 0x70000001                ; Type: EXIDX
LOAD:00000118 1C 26 00 00                   DCD 0x261C                    ; File offset
LOAD:0000011C 1C 26 00 00                   DCD unk_261C                  ; Virtual address
LOAD:00000120 1C 26 00 00                   DCD 0x261C                    ; Physical address
LOAD:00000124 60 01 00 00                   DCD 0x160                     ; Size in file image
LOAD:00000128 60 01 00 00                   DCD 0x160                     ; Size in memory image
LOAD:0000012C 04 00 00 00                   DCD 4                         ; Flags
LOAD:00000130 04 00 00 00                   DCD 4                         ; Alignment
LOAD:00000134                               ; PHT Entry 8
LOAD:00000134 52 E5 74 64                   DCD 0x6474E552                ; Type: RO-AFTER
LOAD:00000138 04 3E 00 00                   DCD 0x3E04                    ; File offset
LOAD:0000013C 04 4E 00 00                   DCD off_4E04                  ; Virtual address
LOAD:00000140 04 4E 00 00                   DCD 0x4E04                    ; Physical address
LOAD:00000144 FC 01 00 00                   DCD 0x1FC                     ; Size in file image
LOAD:00000148 FC 01 00 00                   DCD 0x1FC                     ; Size in memory image
LOAD:0000014C 06 00 00 00                   DCD 6                         ; Flags
LOAD:00000150 04 00 00 00                   DCD 4                         ; Alignment
LOAD:00000154 2F 73 79 73 74 65 6D 2F 62 69+aSystemBinLinke DCB "/system/bin/linker",0
LOAD:00000154 6E 2F 6C 69 6E 6B 65 72 00                                  ; DATA XREF: LOAD:0000005C↑o
LOAD:00000167 00                            DCB 0
LOAD:00000168                               ; ELF Note Entry
LOAD:00000168 08 00 00 00                   dword_168 DCD 8               ; DATA XREF: LOAD:000000DC↑o
LOAD:00000168                                                             ; Name Size
LOAD:0000016C 04 00 00 00                   DCD 4                         ; Desc Size
LOAD:00000170 01 00 00 00                   DCD 1                         ; Type
LOAD:00000174 41 6E 64 72 6F 69 64 00       aAndroid DCB "Android",0      ; Name
LOAD:0000017C 18 00 00 00                   DCB 0x18, 0, 0, 0             ; Desc
LOAD:00000180                               ; ELF Note Entry
LOAD:00000180 04 00 00 00                   DCD 4                         ; Name Size
LOAD:00000184 10 00 00 00                   DCD 0x10                      ; Desc Size
LOAD:00000188 03 00 00 00                   DCD 3                         ; Type: NT_GNU_BUILD_ID
LOAD:0000018C 47 4E 55 00                   aGnu DCB "GNU",0              ; Name
LOAD:00000190 6F DD FF 48 FF B3 81 FA 30 2F+DCB 0x6F, 0xDD, 0xFF, 0x48, 0xFF, 0xB3, 0x81, 0xFA, 0x30, 0x2F, 2, 0x61, 0xFA, 0xA8, 0xD2, 0x5F ; Desc
LOAD:000001A0                               ; ELF Symbol Table
LOAD:000001A0 00 00 00 00 00 00 00 00 00 00+Elf32_Sym <0>
LOAD:000001B0 01 00 00 00 00 00 00 00 00 00+Elf32_Sym <aCxaFinalize - byte_410, dword_0, 0, 0x12, 0, 0> ; "__cxa_finalize"
LOAD:000001C0 31 00 00 00 00 00 00 00 00 00+Elf32_Sym <aCxaAtexit - byte_410, dword_0, 0, 0x12, 0, 0> ; "__cxa_atexit"
LOAD:000001D0 3E 00 00 00 00 00 00 00 00 00+Elf32_Sym <aRegisterAtfork - byte_410, dword_0, 0, 0x12, 0, 0> ; "__register_atfork"
LOAD:000001E0 54 00 00 00 00 00 00 00 00 00+Elf32_Sym <aDladdr - byte_410, dword_0, 0, 0x12, 0, 0> ; "dladdr"
LOAD:000001F0 94 00 00 00 00 00 00 00 00 00+Elf32_Sym <aGnuUnwindFindE - byte_410, dword_0, 0, 0x12, 0, 0> ; "__gnu_Unwind_Find_exidx"
LOAD:00000200 CB 00 00 00 00 00 00 00 00 00+Elf32_Sym <aAeabiMemcpy - byte_410, dword_0, 0, 0x12, 0, 0> ; "__aeabi_memcpy"
LOAD:00000210 F3 00 00 00 00 00 00 00 00 00+Elf32_Sym <aAeabiMemclr8 - byte_410, dword_0, 0, 0x12, 0, 0> ; "__aeabi_memclr8"
LOAD:00000220 03 01 00 00 00 00 00 00 00 00+Elf32_Sym <aAeabiMemcpy4 - byte_410, dword_0, 0, 0x12, 0, 0> ; "__aeabi_memcpy4"
LOAD:00000230 13 01 00 00 00 00 00 00 00 00+Elf32_Sym <aAndroidLogPrin - byte_410, dword_0, 0, 0x12, 0, 0> ; "__android_log_print"
LOAD:00000240 27 01 00 00 00 00 00 00 00 00+Elf32_Sym <aSnprintfChk - byte_410, dword_0, 0, 0x12, 0, 0> ; "__snprintf_chk"
LOAD:00000250 36 01 00 00 00 00 00 00 00 00+Elf32_Sym <aSprintfChk - byte_410, dword_0, 0, 0x12, 0, 0> ; "__sprintf_chk"
LOAD:00000260 44 01 00 00 00 00 00 00 00 00+Elf32_Sym <aStackChkFail - byte_410, dword_0, 0, 0x12, 0, 0> ; "__stack_chk_fail"
LOAD:00000270 55 01 00 00 00 00 00 00 00 00+Elf32_Sym <aStackChkGuard - byte_410, dword_0, 0, 0x11, 0, 0> ; "__stack_chk_guard"
LOAD:00000280 67 01 00 00 00 00 00 00 00 00+Elf32_Sym <aStrlenChk - byte_410, dword_0, 0, 0x12, 0, 0> ; "__strlen_chk"
LOAD:00000290 74 01 00 00 00 00 00 00 00 00+Elf32_Sym <aClosedir - byte_410, dword_0, 0, 0x12, 0, 0> ; "closedir"
LOAD:000002A0 7D 01 00 00 00 00 00 00 00 00+Elf32_Sym <aFclose - byte_410, dword_0, 0, 0x12, 0, 0> ; "fclose"
LOAD:000002B0 84 01 00 00 00 00 00 00 00 00+Elf32_Sym <aFgets - byte_410, dword_0, 0, 0x12, 0, 0> ; "fgets"
LOAD:000002C0 8A 01 00 00 00 00 00 00 00 00+Elf32_Sym <aFopen - byte_410, dword_0, 0, 0x12, 0, 0> ; "fopen"
LOAD:000002D0 90 01 00 00 00 00 00 00 00 00+Elf32_Sym <aFseek - byte_410, dword_0, 0, 0x12, 0, 0> ; "fseek"
LOAD:000002E0 96 01 00 00 00 00 00 00 00 00+Elf32_Sym <aOpendir - byte_410, dword_0, 0, 0x12, 0, 0> ; "opendir"
LOAD:000002F0 9E 01 00 00 00 00 00 00 00 00+Elf32_Sym <aReaddir - byte_410, dword_0, 0, 0x12, 0, 0> ; "readdir"
LOAD:00000300 B7 01 00 00 00 00 00 00 00 00+Elf32_Sym <aSscanf - byte_410, dword_0, 0, 0x12, 0, 0> ; "sscanf"
LOAD:00000310 BE 01 00 00 00 00 00 00 00 00+Elf32_Sym <aStrcmp - byte_410, dword_0, 0, 0x12, 0, 0> ; "strcmp"
LOAD:00000320 C5 01 00 00 00 00 00 00 00 00+Elf32_Sym <aStrncmp - byte_410, dword_0, 0, 0x12, 0, 0> ; "strncmp"
LOAD:00000330 CD 01 00 00 00 00 00 00 00 00+Elf32_Sym <aErrno - byte_410, dword_0, 0, 0x12, 0, 0> ; "__errno"
LOAD:00000340 D5 01 00 00 00 00 00 00 00 00+Elf32_Sym <aLstat - byte_410, dword_0, 0, 0x12, 0, 0> ; "lstat"
LOAD:00000350 DB 01 00 00 00 00 00 00 00 00+Elf32_Sym <aAbort - byte_410, dword_0, 0, 0x12, 0, 0> ; "abort"
LOAD:00000360 E1 01 00 00 00 00 00 00 00 00+Elf32_Sym <aFprintf - byte_410, dword_0, 0, 0x12, 0, 0> ; "fprintf"
LOAD:00000370 E9 01 00 00 00 00 00 00 00 00+Elf32_Sym <aStderr - byte_410, dword_0, 0, 0x11, 0, 0> ; "stderr"
LOAD:00000380 FC 01 00 00 A9 51 00 00 00 00+Elf32_Sym <aEnd - byte_410, 0x51A9, 0, 0x10, 0, 0xFFF1> ; "_end"
LOAD:00000390 01 02 00 00 A0 50 00 00 00 00+Elf32_Sym <aEdata - byte_410, unk_50A0, 0, 0x10, 0, 0xFFF1> ; "_edata"
LOAD:000003A0 50 00 00 00 04 50 00 00 88 00+Elf32_Sym <aHmi - byte_410, HMI, 0x88, 0x11, 0, 0x15> ; "HMI"
LOAD:000003B0 64 00 00 00 8D 0B 00 00 2A 00+Elf32_Sym <aExynosMemtrack - byte_410, exynos_memtrack_get_memory+1, 0x2A, 0x12, 0, 0xD> ; "exynos_memtrack_get_memory"
LOAD:000003C0 F0 01 00 00 A0 50 00 00 00 00+Elf32_Sym <aBssStart - byte_410, unk_50A0, 0, 0x10, 0, 0xFFF1> ; "__bss_start"
LOAD:000003D0 7F 00 00 00 89 0B 00 00 04 00+Elf32_Sym <aExynosMemtrack_0 - byte_410, exynos_memtrack_init+1, 4, 0x12, 0, 0xD> ; "exynos_memtrack_init"
LOAD:000003E0 B3 00 00 00 85 0E 00 00 28 01+Elf32_Sym <aIonMemtrackGet - byte_410, ion_memtrack_get_memory+1, 0x128, 0x12, 0, 0xD> ; "ion_memtrack_get_memory"
LOAD:000003F0 DA 00 00 00 B9 0B 00 00 CC 02+Elf32_Sym <aMaliMemtrackGe - byte_410, mali_memtrack_get_memory+1, 0x2CC, 0x12, 0, 0xD> ; "mali_memtrack_get_memory"
LOAD:00000400 A6 01 00 00 90 50 00 00 10 00+Elf32_Sym <aRecordTemplate - byte_410, record_templates, 0x10, 0x11, 0, 0x15> ; "record_templates"
LOAD:00000410                               ; ELF String Table
LOAD:00000410 00                            byte_410 DCB 0                ; DATA XREF: LOAD:000001B0↑o
LOAD:00000410                                                             ; LOAD:000001C0↑o
LOAD:00000410                                                             ; LOAD:000001D0↑o
LOAD:00000410                                                             ; LOAD:000001E0↑o
LOAD:00000410                                                             ; LOAD:000001F0↑o
LOAD:00000410                                                             ; LOAD:00000200↑o
LOAD:00000410                                                             ; LOAD:00000210↑o
LOAD:00000410                                                             ; LOAD:00000220↑o
LOAD:00000410                                                             ; LOAD:00000230↑o
LOAD:00000410                                                             ; LOAD:00000240↑o
LOAD:00000410                                                             ; LOAD:00000250↑o
LOAD:00000410                                                             ; LOAD:00000260↑o
LOAD:00000410                                                             ; LOAD:00000270↑o
LOAD:00000410                                                             ; LOAD:00000280↑o
LOAD:00000410                                                             ; LOAD:00000290↑o ...
LOAD:00000411 5F 5F 63 78 61 5F 66 69 6E 61+aCxaFinalize DCB "__cxa_finalize",0
LOAD:00000411 6C 69 7A 65 00                                              ; DATA XREF: LOAD:000001B0↑o
LOAD:00000420 4C 49 42 43 00                aLibc DCB "LIBC",0            ; DATA XREF: LOAD:000006F8↓o
LOAD:00000420                                                             ; LOAD:00000728↓o
LOAD:00000425 6C 69 62 63 2E 73 6F 00       aLibcSo DCB "libc.so",0       ; DATA XREF: LOAD:000006E8↓o
LOAD:0000042D 6D 65 6D 74 72 61 63 6B 2E 65+aMemtrackExynos DCB "memtrack.exynos5.so",0
LOAD:0000042D 78 79 6E 6F 73 35 2E 73 6F 00                               ; DATA XREF: LOAD:000006E0↓o
LOAD:00000441 5F 5F 63 78 61 5F 61 74 65 78+aCxaAtexit DCB "__cxa_atexit",0
LOAD:00000441 69 74 00                                                    ; DATA XREF: LOAD:000001C0↑o
LOAD:0000044E 5F 5F 72 65 67 69 73 74 65 72+aRegisterAtfork DCB "__register_atfork",0
LOAD:0000044E 5F 61 74 66 6F 72 6B 00                                     ; DATA XREF: LOAD:000001D0↑o
LOAD:00000460 48 4D 49 00                   aHmi DCB "HMI",0              ; DATA XREF: LOAD:000003A0↑o
LOAD:00000464 64 6C 61 64 64 72 00          aDladdr DCB "dladdr",0        ; DATA XREF: LOAD:000001E0↑o
LOAD:0000046B 6C 69 62 64 6C 2E 73 6F 00    aLibdlSo DCB "libdl.so",0     ; DATA XREF: LOAD:00000718↓o
LOAD:00000474 65 78 79 6E 6F 73 5F 6D 65 6D+aExynosMemtrack DCB "exynos_memtrack_get_memory",0
LOAD:00000474 74 72 61 63 6B 5F 67 65 74 5F+                              ; DATA XREF: LOAD:000003B0↑o
LOAD:0000048F 65 78 79 6E 6F 73 5F 6D 65 6D+aExynosMemtrack_0 DCB "exynos_memtrack_init",0
LOAD:0000048F 74 72 61 63 6B 5F 69 6E 69 74+                              ; DATA XREF: LOAD:000003D0↑o
LOAD:000004A4 5F 5F 67 6E 75 5F 55 6E 77 69+aGnuUnwindFindE DCB "__gnu_Unwind_Find_exidx",0
LOAD:000004A4 6E 64 5F 46 69 6E 64 5F 65 78+                              ; DATA XREF: LOAD:000001F0↑o
LOAD:000004BC 4C 49 42 43 5F 4E 00          aLibcN DCB "LIBC_N",0         ; DATA XREF: LOAD:00000708↓o
LOAD:000004C3 69 6F 6E 5F 6D 65 6D 74 72 61+aIonMemtrackGet DCB "ion_memtrack_get_memory",0
LOAD:000004C3 63 6B 5F 67 65 74 5F 6D 65 6D+                              ; DATA XREF: LOAD:000003E0↑o
LOAD:000004DB 5F 5F 61 65 61 62 69 5F 6D 65+aAeabiMemcpy DCB "__aeabi_memcpy",0
LOAD:000004DB 6D 63 70 79 00                                              ; DATA XREF: LOAD:00000200↑o
LOAD:000004EA 6D 61 6C 69 5F 6D 65 6D 74 72+aMaliMemtrackGe DCB "mali_memtrack_get_memory",0
LOAD:000004EA 61 63 6B 5F 67 65 74 5F 6D 65+                              ; DATA XREF: LOAD:000003F0↑o
LOAD:00000503 5F 5F 61 65 61 62 69 5F 6D 65+aAeabiMemclr8 DCB "__aeabi_memclr8",0
LOAD:00000503 6D 63 6C 72 38 00                                           ; DATA XREF: LOAD:00000210↑o
LOAD:00000513 5F 5F 61 65 61 62 69 5F 6D 65+aAeabiMemcpy4 DCB "__aeabi_memcpy4",0
LOAD:00000513 6D 63 70 79 34 00                                           ; DATA XREF: LOAD:00000220↑o
LOAD:00000523 5F 5F 61 6E 64 72 6F 69 64 5F+aAndroidLogPrin DCB "__android_log_print",0
LOAD:00000523 6C 6F 67 5F 70 72 69 6E 74 00                               ; DATA XREF: LOAD:00000230↑o
LOAD:00000537 5F 5F 73 6E 70 72 69 6E 74 66+aSnprintfChk DCB "__snprintf_chk",0
LOAD:00000537 5F 63 68 6B 00                                              ; DATA XREF: LOAD:00000240↑o
LOAD:00000546 5F 5F 73 70 72 69 6E 74 66 5F+aSprintfChk DCB "__sprintf_chk",0
LOAD:00000546 63 68 6B 00                                                 ; DATA XREF: LOAD:00000250↑o
LOAD:00000554 5F 5F 73 74 61 63 6B 5F 63 68+aStackChkFail DCB "__stack_chk_fail",0
LOAD:00000554 6B 5F 66 61 69 6C 00                                        ; DATA XREF: LOAD:00000260↑o
LOAD:00000565 5F 5F 73 74 61 63 6B 5F 63 68+aStackChkGuard DCB "__stack_chk_guard",0
LOAD:00000565 6B 5F 67 75 61 72 64 00                                     ; DATA XREF: LOAD:00000270↑o
LOAD:00000577 5F 5F 73 74 72 6C 65 6E 5F 63+aStrlenChk DCB "__strlen_chk",0
LOAD:00000577 68 6B 00                                                    ; DATA XREF: LOAD:00000280↑o
LOAD:00000584 63 6C 6F 73 65 64 69 72 00    aClosedir DCB "closedir",0    ; DATA XREF: LOAD:00000290↑o
LOAD:0000058D 66 63 6C 6F 73 65 00          aFclose DCB "fclose",0        ; DATA XREF: LOAD:000002A0↑o
LOAD:00000594 66 67 65 74 73 00             aFgets DCB "fgets",0          ; DATA XREF: LOAD:000002B0↑o
LOAD:0000059A 66 6F 70 65 6E 00             aFopen DCB "fopen",0          ; DATA XREF: LOAD:000002C0↑o
LOAD:000005A0 66 73 65 65 6B 00             aFseek DCB "fseek",0          ; DATA XREF: LOAD:000002D0↑o
LOAD:000005A6 6F 70 65 6E 64 69 72 00       aOpendir DCB "opendir",0      ; DATA XREF: LOAD:000002E0↑o
LOAD:000005AE 72 65 61 64 64 69 72 00       aReaddir DCB "readdir",0      ; DATA XREF: LOAD:000002F0↑o
LOAD:000005B6 72 65 63 6F 72 64 5F 74 65 6D+aRecordTemplate DCB "record_templates",0
LOAD:000005B6 70 6C 61 74 65 73 00                                        ; DATA XREF: LOAD:00000400↑o
LOAD:000005C7 73 73 63 61 6E 66 00          aSscanf DCB "sscanf",0        ; DATA XREF: LOAD:00000300↑o
LOAD:000005CE 73 74 72 63 6D 70 00          aStrcmp DCB "strcmp",0        ; DATA XREF: LOAD:00000310↑o
LOAD:000005D5 73 74 72 6E 63 6D 70 00       aStrncmp DCB "strncmp",0      ; DATA XREF: LOAD:00000320↑o
LOAD:000005DD 5F 5F 65 72 72 6E 6F 00       aErrno DCB "__errno",0        ; DATA XREF: LOAD:00000330↑o
LOAD:000005E5 6C 73 74 61 74 00             aLstat DCB "lstat",0          ; DATA XREF: LOAD:00000340↑o
LOAD:000005EB 61 62 6F 72 74 00             aAbort DCB "abort",0          ; DATA XREF: LOAD:00000350↑o
LOAD:000005F1 66 70 72 69 6E 74 66 00       aFprintf DCB "fprintf",0      ; DATA XREF: LOAD:00000360↑o
LOAD:000005F9 73 74 64 65 72 72 00          aStderr DCB "stderr",0        ; DATA XREF: LOAD:00000370↑o
LOAD:00000600 5F 5F 62 73 73 5F 73 74 61 72+aBssStart DCB "__bss_start",0 ; DATA XREF: LOAD:000003C0↑o
LOAD:0000060C 5F 65 6E 64 00                aEnd DCB "_end",0             ; DATA XREF: LOAD:00000380↑o
LOAD:00000611 5F 65 64 61 74 61 00          aEdata DCB "_edata",0         ; DATA XREF: LOAD:00000390↑o
LOAD:00000618 6C 69 62 6C 6F 67 2E 73 6F 00 aLiblogSo DCB "liblog.so",0
LOAD:00000622 6C 69 62 63 2B 2B 2E 73 6F 00 aLibcSo_0 DCB "libc++.so",0
LOAD:0000062C 6C 69 62 6D 2E 73 6F 00       aLibmSo DCB "libm.so",0
LOAD:00000634                               ; ELF GNU Hash Table
LOAD:00000634 03 00 00 00                   elf_gnu_hash_nbuckets DCD 3
LOAD:00000638 1E 00 00 00                   elf_gnu_hash_symbias DCD 0x1E
LOAD:0000063C 02 00 00 00                   elf_gnu_hash_bitmask_nwords DCD 2
LOAD:00000640 06 00 00 00                   elf_gnu_hash_shift DCD 6
LOAD:00000644 8A 00 26 01 0C 40 24 28       elf_gnu_hash_indexes DCD 0x126008A, 0x2824400C
LOAD:0000064C 1E 00 00 00 20 00 00 00 23 00+elf_gnu_hash_bucket DCD 0x1E, 0x20, 0x23
LOAD:00000658 BA E3 92 7C 43 45 D5 EC 62 EF+elf_gnu_hash_chain DCD 0x7C92E3BA, 0xECD54543, 0xB87EF62, 0x9E1990B4, 0x1C5871D9, 0x3D18E550, 0xF065CBB4, 0x4D39BB2, 0x2335A853
LOAD:0000067C                               ; ELF GNU Symbol Version Table
LOAD:0000067C 00 00                         DCW 0
LOAD:0000067E 02 00                         DCW 2                         ; __cxa_finalize@@LIBC
LOAD:00000680 02 00                         DCW 2                         ; __cxa_atexit@@LIBC
LOAD:00000682 02 00                         DCW 2                         ; __register_atfork@@LIBC
LOAD:00000684 04 00                         DCW 4                         ; dladdr@@LIBC
LOAD:00000686 03 00                         DCW 3                         ; __gnu_Unwind_Find_exidx@@LIBC_N
LOAD:00000688 03 00                         DCW 3                         ; __aeabi_memcpy@@LIBC_N
LOAD:0000068A 03 00                         DCW 3                         ; __aeabi_memclr8@@LIBC_N
LOAD:0000068C 03 00                         DCW 3                         ; __aeabi_memcpy4@@LIBC_N
LOAD:0000068E 00 00                         DCW 0                         ; local  symbol: __android_log_print
LOAD:00000690 02 00                         DCW 2                         ; __snprintf_chk@@LIBC
LOAD:00000692 02 00                         DCW 2                         ; __sprintf_chk@@LIBC
LOAD:00000694 02 00                         DCW 2                         ; __stack_chk_fail@@LIBC
LOAD:00000696 02 00                         DCW 2                         ; __stack_chk_guard@@LIBC
LOAD:00000698 02 00                         DCW 2                         ; __strlen_chk@@LIBC
LOAD:0000069A 02 00                         DCW 2                         ; closedir@@LIBC
LOAD:0000069C 02 00                         DCW 2                         ; fclose@@LIBC
LOAD:0000069E 02 00                         DCW 2                         ; fgets@@LIBC
LOAD:000006A0 02 00                         DCW 2                         ; fopen@@LIBC
LOAD:000006A2 02 00                         DCW 2                         ; fseek@@LIBC
LOAD:000006A4 02 00                         DCW 2                         ; opendir@@LIBC
LOAD:000006A6 02 00                         DCW 2                         ; readdir@@LIBC
LOAD:000006A8 02 00                         DCW 2                         ; sscanf@@LIBC
LOAD:000006AA 02 00                         DCW 2                         ; strcmp@@LIBC
LOAD:000006AC 02 00                         DCW 2                         ; strncmp@@LIBC
LOAD:000006AE 02 00                         DCW 2                         ; __errno@@LIBC
LOAD:000006B0 02 00                         DCW 2                         ; lstat@@LIBC
LOAD:000006B2 02 00                         DCW 2                         ; abort@@LIBC
LOAD:000006B4 02 00                         DCW 2                         ; fprintf@@LIBC
LOAD:000006B6 02 00                         DCW 2                         ; stderr@@LIBC
LOAD:000006B8 01 00                         DCW 1                         ; global symbol: _end
LOAD:000006BA 01 00                         DCW 1                         ; global symbol: _edata
LOAD:000006BC 01 00                         DCW 1                         ; global symbol: HMI
LOAD:000006BE 01 00                         DCW 1                         ; global symbol: exynos_memtrack_get_memory
LOAD:000006C0 01 00                         DCW 1                         ; global symbol: __bss_start
LOAD:000006C2 01 00                         DCW 1                         ; global symbol: exynos_memtrack_init
LOAD:000006C4 01 00                         DCW 1                         ; global symbol: ion_memtrack_get_memory
LOAD:000006C6 01 00                         DCW 1                         ; global symbol: mali_memtrack_get_memory
LOAD:000006C8 01 00                         DCW 1                         ; global symbol: record_templates
LOAD:000006CA 00 00                         DCW 0
LOAD:000006CC                               ; ELF GNU Symbol Version Definitions
LOAD:000006CC 01 00 01 00 01 00 01 00 9F 1D+Elf32_Verdef <1, 1, 1, 1, 0xF461D9F, 0x14, 0>
LOAD:000006E0 1D 00 00 00 00 00 00 00       Elf32_Verdaux <aMemtrackExynos - byte_410, 0> ; "memtrack.exynos5.so"
LOAD:000006E8                               ; ELF GNU Symbol Version Requirements
LOAD:000006E8 01 00 02 00 15 00 00 00 10 00+Elf32_Verneed <1, 2, aLibcSo - byte_410, 0x10, 0x30> ; "libc.so"
LOAD:000006F8 63 0D 05 00 00 00 02 00 10 00+Elf32_Vernaux <0x50D63, 0, 2, aLibc - byte_410, 0x10> ; "LIBC"
LOAD:00000708 3E 69 0D 05 00 00 03 00 AC 00+Elf32_Vernaux <0x50D693E, 0, 3, aLibcN - byte_410, 0> ; "LIBC_N"
LOAD:00000718 01 00 01 00 5B 00 00 00 10 00+Elf32_Verneed <1, 1, aLibdlSo - byte_410, 0x10, 0> ; "libdl.so"
LOAD:00000728 63 0D 05 00 00 00 04 00 10 00+Elf32_Vernaux <0x50D63, 0, 4, aLibc - byte_410, 0> ; "LIBC"
LOAD:00000738                               ; ELF REL Relocation Table
LOAD:00000738 04 4E 00 00 17 00 00 00       Elf32_Rel <0x4E04, 0x17>      ; R_ARM_RELATIVE
LOAD:00000740 10 4E 00 00 17 00 00 00       Elf32_Rel <0x4E10, 0x17>      ; R_ARM_RELATIVE
LOAD:00000748 14 4E 00 00 17 00 00 00       Elf32_Rel <0x4E14, 0x17>      ; R_ARM_RELATIVE
LOAD:00000750 18 4E 00 00 17 00 00 00       Elf32_Rel <0x4E18, 0x17>      ; R_ARM_RELATIVE
LOAD:00000758 1C 4E 00 00 17 00 00 00       Elf32_Rel <0x4E1C, 0x17>      ; R_ARM_RELATIVE
LOAD:00000760 20 4E 00 00 17 00 00 00       Elf32_Rel <0x4E20, 0x17>      ; R_ARM_RELATIVE
LOAD:00000768 24 4E 00 00 17 00 00 00       Elf32_Rel <0x4E24, 0x17>      ; R_ARM_RELATIVE
LOAD:00000770 28 4E 00 00 17 00 00 00       Elf32_Rel <0x4E28, 0x17>      ; R_ARM_RELATIVE
LOAD:00000778 2C 4E 00 00 17 00 00 00       Elf32_Rel <0x4E2C, 0x17>      ; R_ARM_RELATIVE
LOAD:00000780 30 4E 00 00 17 00 00 00       Elf32_Rel <0x4E30, 0x17>      ; R_ARM_RELATIVE
LOAD:00000788 34 4E 00 00 17 00 00 00       Elf32_Rel <0x4E34, 0x17>      ; R_ARM_RELATIVE
LOAD:00000790 38 4E 00 00 17 00 00 00       Elf32_Rel <0x4E38, 0x17>      ; R_ARM_RELATIVE
LOAD:00000798 3C 4E 00 00 17 00 00 00       Elf32_Rel <0x4E3C, 0x17>      ; R_ARM_RELATIVE
LOAD:000007A0 40 4E 00 00 17 00 00 00       Elf32_Rel <0x4E40, 0x17>      ; R_ARM_RELATIVE
LOAD:000007A8 44 4E 00 00 17 00 00 00       Elf32_Rel <0x4E44, 0x17>      ; R_ARM_RELATIVE
LOAD:000007B0 48 4E 00 00 17 00 00 00       Elf32_Rel <0x4E48, 0x17>      ; R_ARM_RELATIVE
LOAD:000007B8 4C 4E 00 00 17 00 00 00       Elf32_Rel <0x4E4C, 0x17>      ; R_ARM_RELATIVE
LOAD:000007C0 6C 4F 00 00 17 00 00 00       Elf32_Rel <0x4F6C, 0x17>      ; R_ARM_RELATIVE
LOAD:000007C8 70 4F 00 00 17 00 00 00       Elf32_Rel <0x4F70, 0x17>      ; R_ARM_RELATIVE
LOAD:000007D0 74 4F 00 00 17 00 00 00       Elf32_Rel <0x4F74, 0x17>      ; R_ARM_RELATIVE
LOAD:000007D8 00 50 00 00 17 00 00 00       Elf32_Rel <0x5000, 0x17>      ; R_ARM_RELATIVE
LOAD:000007E0 0C 50 00 00 17 00 00 00       Elf32_Rel <0x500C, 0x17>      ; R_ARM_RELATIVE
LOAD:000007E8 10 50 00 00 17 00 00 00       Elf32_Rel <0x5010, 0x17>      ; R_ARM_RELATIVE
LOAD:000007F0 14 50 00 00 17 00 00 00       Elf32_Rel <0x5014, 0x17>      ; R_ARM_RELATIVE
LOAD:000007F8 18 50 00 00 17 00 00 00       Elf32_Rel <0x5018, 0x17>      ; R_ARM_RELATIVE
LOAD:00000800 60 4F 00 00 15 0D 00 00       Elf32_Rel <0x4F60, 0xD15>     ; R_ARM_GLOB_DAT __stack_chk_guard
LOAD:00000808 68 4F 00 00 15 1D 00 00       Elf32_Rel <0x4F68, 0x1D15>    ; R_ARM_GLOB_DAT stderr
LOAD:00000810 88 50 00 00 02 21 00 00       Elf32_Rel <0x5088, 0x2102>    ; R_ARM_ABS32 exynos_memtrack_get_memory
LOAD:00000818 84 50 00 00 02 23 00 00       Elf32_Rel <0x5084, 0x2302>    ; R_ARM_ABS32 exynos_memtrack_init
LOAD:00000820 64 4F 00 00 15 26 00 00       Elf32_Rel <0x4F64, 0x2615>    ; R_ARM_GLOB_DAT record_templates
LOAD:00000828                               ; ELF JMPREL Relocation Table
LOAD:00000828 84 4F 00 00 16 01 00 00       Elf32_Rel <0x4F84, 0x116>     ; R_ARM_JUMP_SLOT __cxa_finalize
LOAD:00000830 88 4F 00 00 16 02 00 00       Elf32_Rel <0x4F88, 0x216>     ; R_ARM_JUMP_SLOT __cxa_atexit
LOAD:00000838 8C 4F 00 00 16 03 00 00       Elf32_Rel <0x4F8C, 0x316>     ; R_ARM_JUMP_SLOT __register_atfork
LOAD:00000840 90 4F 00 00 16 25 00 00       Elf32_Rel <0x4F90, 0x2516>    ; R_ARM_JUMP_SLOT mali_memtrack_get_memory
LOAD:00000848 94 4F 00 00 16 24 00 00       Elf32_Rel <0x4F94, 0x2416>    ; R_ARM_JUMP_SLOT ion_memtrack_get_memory
LOAD:00000850 98 4F 00 00 16 23 00 00       Elf32_Rel <0x4F98, 0x2316>    ; R_ARM_JUMP_SLOT exynos_memtrack_init
LOAD:00000858 9C 4F 00 00 16 21 00 00       Elf32_Rel <0x4F9C, 0x2116>    ; R_ARM_JUMP_SLOT exynos_memtrack_get_memory
LOAD:00000860 A0 4F 00 00 16 07 00 00       Elf32_Rel <0x4FA0, 0x716>     ; R_ARM_JUMP_SLOT __aeabi_memclr8
LOAD:00000868 A4 4F 00 00 16 08 00 00       Elf32_Rel <0x4FA4, 0x816>     ; R_ARM_JUMP_SLOT __aeabi_memcpy4
LOAD:00000870 A8 4F 00 00 16 14 00 00       Elf32_Rel <0x4FA8, 0x1416>    ; R_ARM_JUMP_SLOT opendir
LOAD:00000878 AC 4F 00 00 16 0B 00 00       Elf32_Rel <0x4FAC, 0xB16>     ; R_ARM_JUMP_SLOT __sprintf_chk
LOAD:00000880 B0 4F 00 00 16 15 00 00       Elf32_Rel <0x4FB0, 0x1516>    ; R_ARM_JUMP_SLOT readdir
LOAD:00000888 B4 4F 00 00 16 0E 00 00       Elf32_Rel <0x4FB4, 0xE16>     ; R_ARM_JUMP_SLOT __strlen_chk
LOAD:00000890 B8 4F 00 00 16 18 00 00       Elf32_Rel <0x4FB8, 0x1816>    ; R_ARM_JUMP_SLOT strncmp
LOAD:00000898 BC 4F 00 00 16 0A 00 00       Elf32_Rel <0x4FBC, 0xA16>     ; R_ARM_JUMP_SLOT __snprintf_chk
LOAD:000008A0 C0 4F 00 00 16 0F 00 00       Elf32_Rel <0x4FC0, 0xF16>     ; R_ARM_JUMP_SLOT closedir
LOAD:000008A8 C4 4F 00 00 16 09 00 00       Elf32_Rel <0x4FC4, 0x916>     ; R_ARM_JUMP_SLOT __android_log_print
LOAD:000008B0 C8 4F 00 00 16 12 00 00       Elf32_Rel <0x4FC8, 0x1216>    ; R_ARM_JUMP_SLOT fopen
LOAD:000008B8 CC 4F 00 00 16 11 00 00       Elf32_Rel <0x4FCC, 0x1116>    ; R_ARM_JUMP_SLOT fgets
LOAD:000008C0 D0 4F 00 00 16 16 00 00       Elf32_Rel <0x4FD0, 0x1616>    ; R_ARM_JUMP_SLOT sscanf
LOAD:000008C8 D4 4F 00 00 16 17 00 00       Elf32_Rel <0x4FD4, 0x1716>    ; R_ARM_JUMP_SLOT strcmp
LOAD:000008D0 D8 4F 00 00 16 13 00 00       Elf32_Rel <0x4FD8, 0x1316>    ; R_ARM_JUMP_SLOT fseek
LOAD:000008D8 DC 4F 00 00 16 10 00 00       Elf32_Rel <0x4FDC, 0x1016>    ; R_ARM_JUMP_SLOT fclose
LOAD:000008E0 E0 4F 00 00 16 0C 00 00       Elf32_Rel <0x4FE0, 0xC16>     ; R_ARM_JUMP_SLOT __stack_chk_fail
LOAD:000008E8 E4 4F 00 00 16 1A 00 00       Elf32_Rel <0x4FE4, 0x1A16>    ; R_ARM_JUMP_SLOT lstat
LOAD:000008F0 E8 4F 00 00 16 19 00 00       Elf32_Rel <0x4FE8, 0x1916>    ; R_ARM_JUMP_SLOT __errno
LOAD:000008F8 EC 4F 00 00 16 1B 00 00       Elf32_Rel <0x4FEC, 0x1B16>    ; R_ARM_JUMP_SLOT abort
LOAD:00000900 F0 4F 00 00 16 1C 00 00       Elf32_Rel <0x4FF0, 0x1C16>    ; R_ARM_JUMP_SLOT fprintf
LOAD:00000908 F4 4F 00 00 16 06 00 00       Elf32_Rel <0x4FF4, 0x616>     ; R_ARM_JUMP_SLOT __aeabi_memcpy
LOAD:00000910 F8 4F 00 00 16 04 00 00       Elf32_Rel <0x4FF8, 0x416>     ; R_ARM_JUMP_SLOT dladdr
LOAD:00000918 FC 4F 00 00 16 05 00 00       Elf32_Rel <0x4FFC, 0x516>     ; R_ARM_JUMP_SLOT __gnu_Unwind_Find_exidx
LOAD:00000918                               ; LOAD ends
LOAD:00000918
.plt:00000920                               ; ===========================================================================
.plt:00000920
.plt:00000920                               ; Segment type: Pure code
.plt:00000920                               AREA .plt, CODE
.plt:00000920                               CODE32
.plt:00000920
.plt:00000920                               ; =============== S U B R O U T I N E =======================================
.plt:00000920
.plt:00000920
.plt:00000920                               ; void sub_920()
.plt:00000920                               sub_920
.plt:00000920 04 E0 2D E5                   PUSH            {LR}
.plt:00000924 04 E0 9F E5                   LDR             LR, =(_GLOBAL_OFFSET_TABLE_ - 0x930)
.plt:00000928 0E E0 8F E0                   ADD             LR, PC, LR    ; _GLOBAL_OFFSET_TABLE_
.plt:0000092C 08 F0 BE E5                   LDR             PC, [LR,#(off_4F80 - 0x4F78)]! ; dword_0
.plt:0000092C
.plt:0000092C                               ; End of function sub_920
.plt:0000092C
.plt:0000092C                               ; ---------------------------------------------------------------------------
.plt:00000930 48 46 00 00                   off_930 DCD _GLOBAL_OFFSET_TABLE_ - 0x930
.plt:00000930                                                             ; DATA XREF: sub_920+4↑r
.plt:00000934                               ; [0000000C BYTES: COLLAPSED FUNCTION __cxa_finalize. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000940                               ; [0000000C BYTES: COLLAPSED FUNCTION __cxa_atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:0000094C                               ; [0000000C BYTES: COLLAPSED FUNCTION __register_atfork. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000958                               ; [0000000C BYTES: COLLAPSED FUNCTION j_mali_memtrack_get_memory. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000964                               ; [0000000C BYTES: COLLAPSED FUNCTION j_ion_memtrack_get_memory. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000970                               ; [0000000C BYTES: COLLAPSED FUNCTION j_exynos_memtrack_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:0000097C                               ; [0000000C BYTES: COLLAPSED FUNCTION j_exynos_memtrack_get_memory. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000988                               ; [0000000C BYTES: COLLAPSED FUNCTION __aeabi_memclr8. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000994                               ; [0000000C BYTES: COLLAPSED FUNCTION __aeabi_memcpy4. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:000009A0                               ; [0000000C BYTES: COLLAPSED FUNCTION opendir. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:000009AC                               ; [0000000C BYTES: COLLAPSED FUNCTION __sprintf_chk. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:000009B8                               ; [0000000C BYTES: COLLAPSED FUNCTION readdir. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:000009C4                               ; [0000000C BYTES: COLLAPSED FUNCTION __strlen_chk. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:000009D0                               ; [0000000C BYTES: COLLAPSED FUNCTION strncmp. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:000009DC                               ; [0000000C BYTES: COLLAPSED FUNCTION __snprintf_chk. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:000009E8                               ; [0000000C BYTES: COLLAPSED FUNCTION closedir. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:000009F4                               ; [0000000C BYTES: COLLAPSED FUNCTION __android_log_print. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A00                               ; [0000000C BYTES: COLLAPSED FUNCTION fopen. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A0C                               ; [0000000C BYTES: COLLAPSED FUNCTION fgets. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A18                               ; [0000000C BYTES: COLLAPSED FUNCTION sscanf. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A24                               ; [0000000C BYTES: COLLAPSED FUNCTION strcmp. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A30                               ; [0000000C BYTES: COLLAPSED FUNCTION fseek. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A3C                               ; [0000000C BYTES: COLLAPSED FUNCTION fclose. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A48                               ; [0000000C BYTES: COLLAPSED FUNCTION __stack_chk_fail. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A54                               ; [0000000C BYTES: COLLAPSED FUNCTION lstat. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A60                               ; [0000000C BYTES: COLLAPSED FUNCTION __errno. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A6C                               ; [0000000C BYTES: COLLAPSED FUNCTION abort. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A78                               ; [0000000C BYTES: COLLAPSED FUNCTION fprintf. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A84                               ; [0000000C BYTES: COLLAPSED FUNCTION __aeabi_memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A90                               ; [0000000C BYTES: COLLAPSED FUNCTION dladdr. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000A9C                               ; [0000000C BYTES: COLLAPSED FUNCTION __gnu_Unwind_Find_exidx. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00000AA8                               ; ===========================================================================
.text:00000AA8
.text:00000AA8                               ; Segment type: Pure code
.text:00000AA8                               AREA .text, CODE
.text:00000AA8                               CODE32
.text:00000AA8
.text:00000AA8                               ; =============== S U B R O U T I N E =======================================
.text:00000AA8
.text:00000AA8                               ; Attributes: bp-based frame
.text:00000AA8
.text:00000AA8                               ; int sub_AA8()
.text:00000AA8                               sub_AA8                       ; DATA XREF: .fini_array:off_4E04↓o
.text:00000AA8 00 48 2D E9                   PUSH            {R11,LR}
.text:00000AAC 04 B0 8D E2                   ADD             R11, SP, #4
.text:00000AB0 0C 30 9F E5                   LDR             R3, =(off_5000 - 0xABC)
.text:00000AB4 03 30 8F E0                   ADD             R3, PC, R3    ; off_5000
.text:00000AB8 03 00 A0 E1                   MOV             R0, R3        ; void *
.text:00000ABC 9C FF FF EB                   BL              __cxa_finalize
.text:00000ABC
.text:00000AC0 00 88 BD E8                   POP             {R11,PC}
.text:00000AC0
.text:00000AC0                               ; End of function sub_AA8
.text:00000AC0
.text:00000AC0                               ; ---------------------------------------------------------------------------
.text:00000AC4 44 45 00 00                   off_AC4 DCD off_5000 - 0xABC  ; DATA XREF: sub_AA8+8↑r
.text:00000AC8
.text:00000AC8                               ; =============== S U B R O U T I N E =======================================
.text:00000AC8
.text:00000AC8                               ; Attributes: bp-based frame
.text:00000AC8
.text:00000AC8                               ; int (*__fastcall sub_AC8(int (*result)(void)))(void)
.text:00000AC8                               sub_AC8                       ; DATA XREF: sub_AF4+10↓o
.text:00000AC8                                                             ; sub_AF4+14↓o
.text:00000AC8                                                             ; .text:off_B38↓o
.text:00000AC8
.text:00000AC8                               var_8= -8
.text:00000AC8
.text:00000AC8 00 48 2D E9                   PUSH            {R11,LR}
.text:00000ACC 04 B0 8D E2                   ADD             R11, SP, #4
.text:00000AD0 08 D0 4D E2                   SUB             SP, SP, #8
.text:00000AD4 08 00 0B E5                   STR             R0, [R11,#var_8]
.text:00000AD8 08 30 1B E5                   LDR             R3, [R11,#var_8]
.text:00000ADC 00 00 53 E3                   CMP             R3, #0
.text:00000AE0 01 00 00 0A                   BEQ             loc_AEC
.text:00000AE0
.text:00000AE4 08 30 1B E5                   LDR             R3, [R11,#var_8]
.text:00000AE8 33 FF 2F E1                   BLX             R3
.text:00000AE8
.text:00000AEC
.text:00000AEC                               loc_AEC                       ; CODE XREF: sub_AC8+18↑j
.text:00000AEC 04 D0 4B E2                   SUB             SP, R11, #4
.text:00000AF0 00 88 BD E8                   POP             {R11,PC}
.text:00000AF0
.text:00000AF0                               ; End of function sub_AC8
.text:00000AF0
.text:00000AF4
.text:00000AF4                               ; =============== S U B R O U T I N E =======================================
.text:00000AF4
.text:00000AF4                               ; Attributes: bp-based frame
.text:00000AF4
.text:00000AF4                               ; int __fastcall sub_AF4(void *)
.text:00000AF4                               sub_AF4
.text:00000AF4
.text:00000AF4                               obj= -8
.text:00000AF4
.text:00000AF4 00 48 2D E9                   PUSH            {R11,LR}
.text:00000AF8 04 B0 8D E2                   ADD             R11, SP, #4
.text:00000AFC 08 D0 4D E2                   SUB             SP, SP, #8
.text:00000B00 08 00 0B E5                   STR             R0, [R11,#obj]
.text:00000B04 2C 30 9F E5                   LDR             R3, =(sub_AC8 - 0xB10)
.text:00000B08 03 30 8F E0                   ADD             R3, PC, R3    ; sub_AC8
.text:00000B0C 03 00 A0 E1                   MOV             R0, R3        ; lpfunc
.text:00000B10 08 10 1B E5                   LDR             R1, [R11,#obj] ; obj
.text:00000B14 20 30 9F E5                   LDR             R3, =(off_5000 - 0xB20)
.text:00000B18 03 30 8F E0                   ADD             R3, PC, R3    ; off_5000
.text:00000B1C 03 20 A0 E1                   MOV             R2, R3        ; lpdso_handle
.text:00000B20 86 FF FF EB                   BL              __cxa_atexit
.text:00000B20
.text:00000B24 00 30 A0 E1                   MOV             R3, R0
.text:00000B28 00 00 A0 E1                   NOP
.text:00000B2C 03 00 A0 E1                   MOV             R0, R3
.text:00000B30 04 D0 4B E2                   SUB             SP, R11, #4
.text:00000B34 00 88 BD E8                   POP             {R11,PC}
.text:00000B34
.text:00000B34                               ; End of function sub_AF4
.text:00000B34
.text:00000B34                               ; ---------------------------------------------------------------------------
.text:00000B38 B8 FF FF FF                   off_B38 DCD sub_AC8 - 0xB10   ; DATA XREF: sub_AF4+10↑r
.text:00000B3C E0 44 00 00                   off_B3C DCD off_5000 - 0xB20  ; DATA XREF: sub_AF4+20↑r
.text:00000B40
.text:00000B40                               ; =============== S U B R O U T I N E =======================================
.text:00000B40
.text:00000B40                               ; Attributes: bp-based frame
.text:00000B40
.text:00000B40                               ; int __fastcall sub_B40(int, int, int)
.text:00000B40                               sub_B40
.text:00000B40
.text:00000B40                               var_10= -0x10
.text:00000B40                               var_C= -0xC
.text:00000B40                               var_8= -8
.text:00000B40
.text:00000B40 00 48 2D E9                   PUSH            {R11,LR}
.text:00000B44 04 B0 8D E2                   ADD             R11, SP, #4
.text:00000B48 10 D0 4D E2                   SUB             SP, SP, #0x10
.text:00000B4C 08 00 0B E5                   STR             R0, [R11,#var_8]
.text:00000B50 0C 10 0B E5                   STR             R1, [R11,#var_C]
.text:00000B54 10 20 0B E5                   STR             R2, [R11,#var_10]
.text:00000B58 08 00 1B E5                   LDR             R0, [R11,#var_8]
.text:00000B5C 0C 10 1B E5                   LDR             R1, [R11,#var_C]
.text:00000B60 10 20 1B E5                   LDR             R2, [R11,#var_10]
.text:00000B64 18 30 9F E5                   LDR             R3, =(off_5000 - 0xB70)
.text:00000B68 03 30 8F E0                   ADD             R3, PC, R3    ; off_5000
.text:00000B6C 76 FF FF EB                   BL              __register_atfork
.text:00000B6C
.text:00000B70 00 30 A0 E1                   MOV             R3, R0
.text:00000B74 00 00 A0 E1                   NOP
.text:00000B78 03 00 A0 E1                   MOV             R0, R3
.text:00000B7C 04 D0 4B E2                   SUB             SP, R11, #4
.text:00000B80 00 88 BD E8                   POP             {R11,PC}
.text:00000B80
.text:00000B80                               ; End of function sub_B40
.text:00000B80
.text:00000B80                               ; ---------------------------------------------------------------------------
.text:00000B84 90 44 00 00                   off_B84 DCD off_5000 - 0xB70  ; DATA XREF: sub_B40+24↑r
.text:00000B88                               CODE16
.text:00000B88
.text:00000B88                               ; =============== S U B R O U T I N E =======================================
.text:00000B88
.text:00000B88
.text:00000B88                               ; int exynos_memtrack_init()
.text:00000B88                               EXPORT exynos_memtrack_init
.text:00000B88                               exynos_memtrack_init          ; CODE XREF: j_exynos_memtrack_init+8↑j
.text:00000B88                                                             ; DATA XREF: LOAD:000003D0↑o
.text:00000B88                                                             ; .got:exynos_memtrack_init_ptr↓o
.text:00000B88                                                             ; .data:00005084↓o
.text:00000B88                               ; __unwind {
.text:00000B88 00 20                         MOVS            R0, #0
.text:00000B8A 70 47                         BX              LR
.text:00000B8A
.text:00000B8A                               ; End of function exynos_memtrack_init
.text:00000B8A
.text:00000B8C
.text:00000B8C                               ; =============== S U B R O U T I N E =======================================
.text:00000B8C
.text:00000B8C
.text:00000B8C                               ; int __fastcall exynos_memtrack_get_memory(int, int, int, _DWORD *, int *)
.text:00000B8C                               EXPORT exynos_memtrack_get_memory
.text:00000B8C                               exynos_memtrack_get_memory    ; CODE XREF: j_exynos_memtrack_get_memory+8↑j
.text:00000B8C                                                             ; DATA XREF: LOAD:000003B0↑o
.text:00000B8C                                                             ; .got:exynos_memtrack_get_memory_ptr↓o
.text:00000B8C                                                             ; .data:00005088↓o
.text:00000B8C
.text:00000B8C                               arg_0=  0
.text:00000B8C
.text:00000B8C DD F8 00 C0                   LDR.W           R12, [SP,#arg_0]
.text:00000B90 02 2A                         CMP             R2, #2
.text:00000B92 0A D0                         BEQ             loc_BAA
.text:00000B92
.text:00000B94 01 2A                         CMP             R2, #1
.text:00000B96 1C BF                         ITT NE
.text:00000B98 6F F0 15 00                   MOVNE           R0, #0xFFFFFFEA
.text:00000B9C 70 47                         BXNE            LR
.text:00000B9C
.text:00000B9E 08 46                         MOV             R0, R1
.text:00000BA0 1A 46                         MOV             R2, R3
.text:00000BA2 01 21                         MOVS            R1, #1
.text:00000BA4 63 46                         MOV             R3, R12
.text:00000BA6 01 F0 19 BD                   B.W             j_j_mali_memtrack_get_memory
.text:00000BA6
.text:00000BAA                               ; ---------------------------------------------------------------------------
.text:00000BAA
.text:00000BAA                               loc_BAA                       ; CODE XREF: exynos_memtrack_get_memory+6↑j
.text:00000BAA 08 46                         MOV             R0, R1
.text:00000BAC 1A 46                         MOV             R2, R3
.text:00000BAE 02 21                         MOVS            R1, #2
.text:00000BB0 63 46                         MOV             R3, R12
.text:00000BB2 01 F0 1B BD                   B.W             j_j_ion_memtrack_get_memory
.text:00000BB2
.text:00000BB2                               ; End of function exynos_memtrack_get_memory
.text:00000BB2
.text:00000BB2                               ; ---------------------------------------------------------------------------
.text:00000BB6 00 00                         ALIGN 4
.text:00000BB6                               ; } // starts at B88
.text:00000BB8
.text:00000BB8                               ; =============== S U B R O U T I N E =======================================
.text:00000BB8
.text:00000BB8
.text:00000BB8                               ; int __fastcall mali_memtrack_get_memory(int, int, void *, unsigned int *)
.text:00000BB8                               EXPORT mali_memtrack_get_memory
.text:00000BB8                               mali_memtrack_get_memory      ; CODE XREF: j_mali_memtrack_get_memory+8↑j
.text:00000BB8                                                             ; DATA XREF: LOAD:000003F0↑o
.text:00000BB8                                                             ; .got:mali_memtrack_get_memory_ptr↓o
.text:00000BB8
.text:00000BB8                               var_488= -0x488
.text:00000BB8                               var_480= -0x480
.text:00000BB8                               var_47C= -0x47C
.text:00000BB8                               var_474= -0x474
.text:00000BB8                               var_470= -0x470
.text:00000BB8                               var_46C= -0x46C
.text:00000BB8                               var_468= -0x468
.text:00000BB8                               var_464= -0x464
.text:00000BB8                               var_460= -0x460
.text:00000BB8                               var_450= -0x450
.text:00000BB8                               var_440= -0x440
.text:00000BB8                               var_3C= -0x3C
.text:00000BB8
.text:00000BB8                               ; __unwind {
.text:00000BB8 2D E9 F0 4F                   PUSH.W          {R4-R11,LR}
.text:00000BBC 81 B0                         SUB             SP, SP, #4
.text:00000BBE 2D ED 04 8B                   VPUSH           {D8-D9}
.text:00000BC2 AD F5 8A 6D                   SUB.W           SP, SP, #0x450
.text:00000BC6 05 46                         MOV             R5, R0
.text:00000BC8 96 48                         LDR             R0, =(__stack_chk_guard_ptr - 0xBD2)
.text:00000BCA 1C 46                         MOV             R4, R3
.text:00000BCC 00 26                         MOVS            R6, #0
.text:00000BCE 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00000BD0 4F F4 80 61                   MOV.W           R1, #0x400
.text:00000BD4 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00000BD6 90 46                         MOV             R8, R2
.text:00000BD8 00 68                         LDR             R0, [R0]
.text:00000BDA CD F8 4C 04                   STR.W           R0, [SP,#0x488+var_3C]
.text:00000BDE 12 A8                         ADD             R0, SP, #0x488+var_440
.text:00000BE0 27 68                         LDR             R7, [R4]
.text:00000BE2 09 96                         STR             R6, [SP,#0x488+var_464]
.text:00000BE4 FF F7 D0 EE                   BLX             __aeabi_memclr8
.text:00000BE4
.text:00000BE8 02 22                         MOVS            R2, #2
.text:00000BEA 02 2F                         CMP             R7, #2
.text:00000BEC 22 60                         STR             R2, [R4]
.text:00000BEE 38 BF                         IT CC
.text:00000BF0 3A 46                         MOVCC           R2, R7
.text:00000BF2 00 2A                         CMP             R2, #0
.text:00000BF4 00 F0 02 81                   BEQ.W           loc_DFC
.text:00000BF4
.text:00000BF8 8B 48                         LDR             R0, =(record_templates_ptr - 0xC02)
.text:00000BFA 05 92                         STR             R2, [SP,#0x488+var_474]
.text:00000BFC D2 00                         LSLS            R2, R2, #3
.text:00000BFE 78 44                         ADD             R0, PC        ; record_templates_ptr
.text:00000C00 01 68                         LDR             R1, [R0]      ; record_templates
.text:00000C02 40 46                         MOV             R0, R8
.text:00000C04 FF F7 C6 EE                   BLX             __aeabi_memcpy4
.text:00000C04
.text:00000C08 88 48                         LDR             R0, =(aDMaliMem - 0xC12) ; "/d/mali/mem/"
.text:00000C0A CD E9 0E 66                   STRD.W          R6, R6, [SP,#0x488+var_450]
.text:00000C0E 78 44                         ADD             R0, PC        ; "/d/mali/mem/"
.text:00000C10 FF F7 C6 EE                   BLX             opendir
.text:00000C10
.text:00000C14 86 4B                         LDR             R3, =(aD - 0xC20) ; "%d"
.text:00000C16 04 46                         MOV             R4, R0
.text:00000C18 00 95                         STR             R5, [SP,#0x488+var_488]
.text:00000C1A 0E AD                         ADD             R5, SP, #0x488+var_450
.text:00000C1C 7B 44                         ADD             R3, PC        ; "%d"
.text:00000C1E 28 46                         MOV             R0, R5
.text:00000C20 00 21                         MOVS            R1, #0
.text:00000C22 08 22                         MOVS            R2, #8
.text:00000C24 FF F7 C2 EE                   BLX             __sprintf_chk
.text:00000C24
.text:00000C28
.text:00000C28                               loc_C28                       ; CODE XREF: mali_memtrack_get_memory+78↓j
.text:00000C28 A8 5D                         LDRB            R0, [R5,R6]
.text:00000C2A 18 B1                         CBZ             R0, loc_C34
.text:00000C2A
.text:00000C2C 01 36                         ADDS            R6, #1
.text:00000C2E 07 2E                         CMP             R6, #7
.text:00000C30 FA DD                         BLE             loc_C28
.text:00000C30
.text:00000C32 01 E0                         B               loc_C38
.text:00000C32
.text:00000C34                               ; ---------------------------------------------------------------------------
.text:00000C34
.text:00000C34                               loc_C34                       ; CODE XREF: mali_memtrack_get_memory+72↑j
.text:00000C34 5F 20                         MOVS            R0, #0x5F ; '_'
.text:00000C36 A8 55                         STRB            R0, [R5,R6]
.text:00000C36
.text:00000C38
.text:00000C38                               loc_C38                       ; CODE XREF: mali_memtrack_get_memory+7A↑j
.text:00000C38 7E 48                         LDR             R0, =(dword_50A4 - 0xC46)
.text:00000C3A 00 21                         MOVS            R1, #0
.text:00000C3C CD F8 18 80                   STR.W           R8, [SP,#0x488+var_470]
.text:00000C40 00 2C                         CMP             R4, #0
.text:00000C42 78 44                         ADD             R0, PC        ; dword_50A4
.text:00000C44 01 60                         STR             R1, [R0]
.text:00000C46 3B D0                         BEQ             loc_CC0
.text:00000C46
.text:00000C48 20 46                         MOV             R0, R4        ; dirp
.text:00000C4A FF F7 B6 EE                   BLX             readdir
.text:00000C4A
.text:00000C4E 07 46                         MOV             R7, R0
.text:00000C50 97 B3                         CBZ             R7, loc_CB8
.text:00000C50
.text:00000C52 DF F8 E4 81                   LDR.W           R8, =(dword_50A4 - 0xC64)
.text:00000C56 0E AE                         ADD             R6, SP, #0x488+var_450
.text:00000C58 DF F8 E0 A1                   LDR.W           R10, =(aDMaliMem - 0xC6A) ; "/d/mali/mem/"
.text:00000C5C DF F8 E0 B1                   LDR.W           R11, =(aSSS - 0xC6C) ; "%s%s%s"
.text:00000C60 F8 44                         ADD             R8, PC        ; dword_50A4
.text:00000C62 DF F8 E0 91                   LDR.W           R9, =(unk_50A8 - 0xC6E)
.text:00000C66 FA 44                         ADD             R10, PC       ; "/d/mali/mem/"
.text:00000C68 FB 44                         ADD             R11, PC       ; "%s%s%s"
.text:00000C6A F9 44                         ADD             R9, PC        ; unk_50A8
.text:00000C6A
.text:00000C6C
.text:00000C6C                               loc_C6C                       ; CODE XREF: mali_memtrack_get_memory+FE↓j
.text:00000C6C 30 46                         MOV             R0, R6
.text:00000C6E 08 21                         MOVS            R1, #8
.text:00000C70 FF F7 A8 EE                   BLX             __strlen_chk
.text:00000C70
.text:00000C74 13 37                         ADDS            R7, #0x13
.text:00000C76 02 46                         MOV             R2, R0        ; n
.text:00000C78 38 46                         MOV             R0, R7        ; s1
.text:00000C7A 31 46                         MOV             R1, R6        ; s2
.text:00000C7C FF F7 A8 EE                   BLX             strncmp
.text:00000C7C
.text:00000C80 A0 B9                         CBNZ            R0, loc_CAC
.text:00000C80
.text:00000C82 D8 F8 00 00                   LDR.W           R0, [R8]
.text:00000C86 00 22                         MOVS            R2, #0
.text:00000C88 7D 49                         LDR             R1, =(aMemProfile - 0xC96) ; "/mem_profile"
.text:00000C8A 4F F0 FF 33                   MOV.W           R3, #0xFFFFFFFF
.text:00000C8E CD E9 00 BA                   STRD.W          R11, R10, [SP,#0x488+var_488]
.text:00000C92 79 44                         ADD             R1, PC        ; "/mem_profile"
.text:00000C94 09 EB 40 10                   ADD.W           R0, R9, R0,LSL#5
.text:00000C98 02 97                         STR             R7, [SP,#0x488+var_480]
.text:00000C9A 03 91                         STR             R1, [SP,#0x488+var_47C]
.text:00000C9C 20 21                         MOVS            R1, #0x20 ; ' '
.text:00000C9E FF F7 9E EE                   BLX             __snprintf_chk
.text:00000C9E
.text:00000CA2 D8 F8 00 00                   LDR.W           R0, [R8]
.text:00000CA6 01 30                         ADDS            R0, #1
.text:00000CA8 C8 F8 00 00                   STR.W           R0, [R8]
.text:00000CA8
.text:00000CAC
.text:00000CAC                               loc_CAC                       ; CODE XREF: mali_memtrack_get_memory+C8↑j
.text:00000CAC 20 46                         MOV             R0, R4        ; dirp
.text:00000CAE FF F7 84 EE                   BLX             readdir
.text:00000CAE
.text:00000CB2 07 46                         MOV             R7, R0
.text:00000CB4 00 2F                         CMP             R7, #0
.text:00000CB6 D9 D1                         BNE             loc_C6C
.text:00000CB6
.text:00000CB8
.text:00000CB8                               loc_CB8                       ; CODE XREF: mali_memtrack_get_memory+98↑j
.text:00000CB8 20 46                         MOV             R0, R4        ; dirp
.text:00000CBA FF F7 96 EE                   BLX             closedir
.text:00000CBA
.text:00000CBE 07 E0                         B               loc_CD0
.text:00000CBE
.text:00000CC0                               ; ---------------------------------------------------------------------------
.text:00000CC0
.text:00000CC0                               loc_CC0                       ; CODE XREF: mali_memtrack_get_memory+8E↑j
.text:00000CC0 61 4A                         LDR             R2, =(aLibmemtrackHwC - 0xCCC) ; "libmemtrack-hw -- Couldn't open the dir"...
.text:00000CC2 06 20                         MOVS            R0, #6
.text:00000CC4 61 4B                         LDR             R3, =(aDMaliMem - 0xCCE) ; "/d/mali/mem/"
.text:00000CC6 00 21                         MOVS            R1, #0
.text:00000CC8 7A 44                         ADD             R2, PC        ; "libmemtrack-hw -- Couldn't open the dir"...
.text:00000CCA 7B 44                         ADD             R3, PC        ; "/d/mali/mem/"
.text:00000CCC FF F7 92 EE                   BLX             __android_log_print
.text:00000CCC
.text:00000CD0
.text:00000CD0                               loc_CD0                       ; CODE XREF: mali_memtrack_get_memory+106↑j
.text:00000CD0 5F 48                         LDR             R0, =(dword_50A4 - 0xCDC)
.text:00000CD2 00 26                         MOVS            R6, #0
.text:00000CD4 4F F0 00 08                   MOV.W           R8, #0
.text:00000CD8 78 44                         ADD             R0, PC        ; dword_50A4
.text:00000CDA 00 68                         LDR             R0, [R0]
.text:00000CDC 01 28                         CMP             R0, #1
.text:00000CDE 4F F0 00 00                   MOV.W           R0, #0
.text:00000CE2 08 90                         STR             R0, [SP,#0x488+var_468]
.text:00000CE4 C0 F2 81 80                   BLT.W           loc_DEA
.text:00000CE4
.text:00000CE8 5A 49                         LDR             R1, =(unk_50A8 - 0xCF8)
.text:00000CEA 00 20                         MOVS            R0, #0
.text:00000CEC 80 EF 50 80                   VMOV.I32        Q4, #0
.text:00000CF0 4F F0 00 08                   MOV.W           R8, #0
.text:00000CF4 79 44                         ADD             R1, PC        ; unk_50A8
.text:00000CF6 0A AF                         ADD             R7, SP, #0x488+var_460
.text:00000CF8 12 AC                         ADD             R4, SP, #0x488+var_440
.text:00000CFA 0D F1 24 0A                   ADD.W           R10, SP, #0x488+var_464
.text:00000CFE 4F F0 00 09                   MOV.W           R9, #0
.text:00000D02 08 90                         STR             R0, [SP,#0x488+var_468]
.text:00000D02
.text:00000D04
.text:00000D04                               loc_D04                       ; CODE XREF: mali_memtrack_get_memory+228↓j
.text:00000D04 CD F8 1C 80                   STR.W           R8, [SP,#0x488+var_46C]
.text:00000D08 01 EB 49 18                   ADD.W           R8, R1, R9,LSL#5
.text:00000D08
.text:00000D0C
.text:00000D0C                               loc_D0C                       ; CODE XREF: mali_memtrack_get_memory+176↓j
.text:00000D0C 54 49                         LDR             R1, =(aR - 0xD14) ; "r"
.text:00000D0E 40 46                         MOV             R0, R8        ; filename
.text:00000D10 79 44                         ADD             R1, PC        ; "r" ; modes
.text:00000D12 FF F7 76 EE                   BLX             fopen
.text:00000D12
.text:00000D16 83 46                         MOV             R11, R0
.text:00000D18 BB F1 00 0F                   CMP.W           R11, #0
.text:00000D1C 09 D1                         BNE             loc_D32
.text:00000D1C
.text:00000D1E 51 48                         LDR             R0, =(dword_50A4 - 0xD2C)
.text:00000D20 08 F1 20 08                   ADD.W           R8, R8, #0x20 ; ' '
.text:00000D24 09 F1 01 09                   ADD.W           R9, R9, #1
.text:00000D28 78 44                         ADD             R0, PC        ; dword_50A4
.text:00000D2A 00 68                         LDR             R0, [R0]
.text:00000D2C 81 45                         CMP             R9, R0
.text:00000D2E ED DB                         BLT             loc_D0C
.text:00000D2E
.text:00000D30 59 E0                         B               loc_DE6
.text:00000D30
.text:00000D32                               ; ---------------------------------------------------------------------------
.text:00000D32
.text:00000D32                               loc_D32                       ; CODE XREF: mali_memtrack_get_memory+164↑j
.text:00000D32 DD F8 1C 80                   LDR.W           R8, [SP,#0x488+var_46C]
.text:00000D36 00 26                         MOVS            R6, #0
.text:00000D38 00 E0                         B               loc_D3C
.text:00000D38
.text:00000D3A                               ; ---------------------------------------------------------------------------
.text:00000D3A
.text:00000D3A                               loc_D3A                       ; CODE XREF: mali_memtrack_get_memory+1B0↓j
.text:00000D3A                                                             ; mali_memtrack_get_memory+1BE↓j
.text:00000D3A                                                             ; mali_memtrack_get_memory+1C8↓j
.text:00000D3A                                                             ; mali_memtrack_get_memory+208↓j
.text:00000D3A                                                             ; mali_memtrack_get_memory+20E↓j
.text:00000D3A 01 26                         MOVS            R6, #1
.text:00000D3A
.text:00000D3C
.text:00000D3C                               loc_D3C                       ; CODE XREF: mali_memtrack_get_memory+180↑j
.text:00000D3C                                                             ; mali_memtrack_get_memory+1FC↓j
.text:00000D3C 20 46                         MOV             R0, R4        ; s
.text:00000D3E 4F F4 80 61                   MOV.W           R1, #0x400    ; n
.text:00000D42 5A 46                         MOV             R2, R11       ; stream
.text:00000D44 05 F9 CF 8A                   VST1.64         {D8-D9}, [R5]
.text:00000D48 07 F9 CF 8A                   VST1.64         {D8-D9}, [R7]
.text:00000D4C FF F7 5E EE                   BLX             fgets
.text:00000D4C
.text:00000D50 16 F0 01 0F                   TST.W           R6, #1
.text:00000D54 15 D0                         BEQ             loc_D82
.text:00000D54
.text:00000D56 B8 B3                         CBZ             R0, loc_DC8
.text:00000D56
.text:00000D58 44 49                         LDR             R1, =(a15sSSD - 0xD64) ; "%15s %*s %*s %d \n"
.text:00000D5A 20 46                         MOV             R0, R4        ; s
.text:00000D5C 2A 46                         MOV             R2, R5
.text:00000D5E 53 46                         MOV             R3, R10
.text:00000D60 79 44                         ADD             R1, PC        ; "%15s %*s %*s %d \n"
.text:00000D62 FF F7 5A EE                   BLX             sscanf
.text:00000D62
.text:00000D66 02 28                         CMP             R0, #2
.text:00000D68 E7 D1                         BNE             loc_D3A
.text:00000D68
.text:00000D6A 41 49                         LDR             R1, =(aTotal - 0xD72) ; "Total"
.text:00000D6C 28 46                         MOV             R0, R5        ; s1
.text:00000D6E 79 44                         ADD             R1, PC        ; "Total"
.text:00000D70 FF F7 58 EE                   BLX             strcmp
.text:00000D70
.text:00000D74 00 28                         CMP             R0, #0
.text:00000D76 E0 D1                         BNE             loc_D3A
.text:00000D76
.text:00000D78 DD E9 08 10                   LDRD.W          R1, R0, [SP,#0x488+var_468]
.text:00000D7C 01 44                         ADD             R1, R0
.text:00000D7E 08 91                         STR             R1, [SP,#0x488+var_468]
.text:00000D80 DB E7                         B               loc_D3A
.text:00000D80
.text:00000D82                               ; ---------------------------------------------------------------------------
.text:00000D82
.text:00000D82                               loc_D82                       ; CODE XREF: mali_memtrack_get_memory+19C↑j
.text:00000D82 C0 B1                         CBZ             R0, loc_DB6
.text:00000D82
.text:00000D84 3B 49                         LDR             R1, =(aS15s15sSSD - 0xD90) ; "%*s %15s %15s %*s %*s %d \n"
.text:00000D86 20 46                         MOV             R0, R4        ; s
.text:00000D88 2A 46                         MOV             R2, R5
.text:00000D8A 3B 46                         MOV             R3, R7
.text:00000D8C 79 44                         ADD             R1, PC        ; "%*s %15s %15s %*s %*s %d \n"
.text:00000D8E CD F8 00 A0                   STR.W           R10, [SP,#0x488+var_488]
.text:00000D92 FF F7 42 EE                   BLX             sscanf
.text:00000D92
.text:00000D96 03 28                         CMP             R0, #3
.text:00000D98 0B D1                         BNE             loc_DB2
.text:00000D98
.text:00000D9A 37 49                         LDR             R1, =(aNative - 0xDA2) ; "Native"
.text:00000D9C 28 46                         MOV             R0, R5        ; s1
.text:00000D9E 79 44                         ADD             R1, PC        ; "Native"
.text:00000DA0 FF F7 40 EE                   BLX             strcmp
.text:00000DA0
.text:00000DA4 28 B9                         CBNZ            R0, loc_DB2
.text:00000DA4
.text:00000DA6 35 49                         LDR             R1, =(aBuffer - 0xDAE) ; "Buffer"
.text:00000DA8 38 46                         MOV             R0, R7        ; s1
.text:00000DAA 79 44                         ADD             R1, PC        ; "Buffer"
.text:00000DAC FF F7 3A EE                   BLX             strcmp
.text:00000DAC
.text:00000DB0 38 B1                         CBZ             R0, loc_DC2
.text:00000DB0
.text:00000DB2
.text:00000DB2                               loc_DB2                       ; CODE XREF: mali_memtrack_get_memory+1E0↑j
.text:00000DB2                                                             ; mali_memtrack_get_memory+1EC↑j
.text:00000DB2 00 26                         MOVS            R6, #0
.text:00000DB4 C2 E7                         B               loc_D3C
.text:00000DB4
.text:00000DB6                               ; ---------------------------------------------------------------------------
.text:00000DB6
.text:00000DB6                               loc_DB6                       ; CODE XREF: mali_memtrack_get_memory:loc_D82↑j
.text:00000DB6 58 46                         MOV             R0, R11       ; stream
.text:00000DB8 00 21                         MOVS            R1, #0        ; off
.text:00000DBA 00 22                         MOVS            R2, #0        ; whence
.text:00000DBC FF F7 38 EE                   BLX             fseek
.text:00000DBC
.text:00000DC0 BB E7                         B               loc_D3A
.text:00000DC0
.text:00000DC2                               ; ---------------------------------------------------------------------------
.text:00000DC2
.text:00000DC2                               loc_DC2                       ; CODE XREF: mali_memtrack_get_memory+1F8↑j
.text:00000DC2 09 98                         LDR             R0, [SP,#0x488+var_464]
.text:00000DC4 80 44                         ADD             R8, R0
.text:00000DC6 B8 E7                         B               loc_D3A
.text:00000DC6
.text:00000DC8                               ; ---------------------------------------------------------------------------
.text:00000DC8
.text:00000DC8                               loc_DC8                       ; CODE XREF: mali_memtrack_get_memory+19E↑j
.text:00000DC8 58 46                         MOV             R0, R11       ; stream
.text:00000DCA FF F7 38 EE                   BLX             fclose
.text:00000DCA
.text:00000DCE 26 48                         LDR             R0, =(dword_50A4 - 0xDDC)
.text:00000DD0 09 F1 01 09                   ADD.W           R9, R9, #1
.text:00000DD4 21 49                         LDR             R1, =(unk_50A8 - 0xDE0)
.text:00000DD6 00 26                         MOVS            R6, #0
.text:00000DD8 78 44                         ADD             R0, PC        ; dword_50A4
.text:00000DDA 00 68                         LDR             R0, [R0]
.text:00000DDC 79 44                         ADD             R1, PC        ; unk_50A8
.text:00000DDE 81 45                         CMP             R9, R0
.text:00000DE0 FF F6 90 AF                   BLT.W           loc_D04
.text:00000DE0
.text:00000DE4 01 E0                         B               loc_DEA
.text:00000DE4
.text:00000DE6                               ; ---------------------------------------------------------------------------
.text:00000DE6
.text:00000DE6                               loc_DE6                       ; CODE XREF: mali_memtrack_get_memory+178↑j
.text:00000DE6 DD F8 1C 80                   LDR.W           R8, [SP,#0x488+var_46C]
.text:00000DE6
.text:00000DEA
.text:00000DEA                               loc_DEA                       ; CODE XREF: mali_memtrack_get_memory+12C↑j
.text:00000DEA                                                             ; mali_memtrack_get_memory+22C↑j
.text:00000DEA 06 99                         LDR             R1, [SP,#0x488+var_470]
.text:00000DEC 05 98                         LDR             R0, [SP,#0x488+var_474]
.text:00000DEE 0E 60                         STR             R6, [R1]
.text:00000DF0 02 28                         CMP             R0, #2
.text:00000DF2 22 BF                         ITTT CS
.text:00000DF4 08 98                         LDRCS           R0, [SP,#0x488+var_468]
.text:00000DF6 A0 EB 08 00                   SUBCS.W         R0, R0, R8
.text:00000DFA 88 60                         STRCS           R0, [R1,#8]
.text:00000DFA
.text:00000DFC
.text:00000DFC                               loc_DFC                       ; CODE XREF: mali_memtrack_get_memory+3C↑j
.text:00000DFC 16 48                         LDR             R0, =(__stack_chk_guard_ptr - 0xE06)
.text:00000DFE DD F8 4C 14                   LDR.W           R1, [SP,#0x488+var_3C]
.text:00000E02 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00000E04 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00000E06 00 68                         LDR             R0, [R0]
.text:00000E08 40 1A                         SUBS            R0, R0, R1
.text:00000E0A 01 BF                         ITTTT EQ
.text:00000E0C 00 20                         MOVEQ           R0, #0
.text:00000E0E 0D F5 8A 6D                   ADDEQ.W         SP, SP, #0x450
.text:00000E12 BD EC 04 8B                   VPOPEQ          {D8-D9}
.text:00000E16 01 B0                         ADDEQ           SP, SP, #4
.text:00000E18 08 BF                         IT EQ
.text:00000E1A BD E8 F0 8F                   POPEQ.W         {R4-R11,PC}
.text:00000E1A
.text:00000E1E FF F7 14 EE                   BLX             __stack_chk_fail
.text:00000E1E
.text:00000E1E                               ; End of function mali_memtrack_get_memory
.text:00000E1E
.text:00000E1E                               ; ---------------------------------------------------------------------------
.text:00000E22 00 BF                         ALIGN 4
.text:00000E24 8E 43 00 00                   off_E24 DCD __stack_chk_guard_ptr - 0xBD2
.text:00000E24                                                             ; DATA XREF: mali_memtrack_get_memory+10↑r
.text:00000E28 62 43 00 00                   off_E28 DCD record_templates_ptr - 0xC02
.text:00000E28                                                             ; DATA XREF: mali_memtrack_get_memory+40↑r
.text:00000E2C F4 1B 00 00                   off_E2C DCD aDMaliMem - 0xC12 ; DATA XREF: mali_memtrack_get_memory+50↑r
.text:00000E2C                                                             ; "/d/mali/mem/"
.text:00000E30 F3 1B 00 00                   off_E30 DCD aD - 0xC20        ; DATA XREF: mali_memtrack_get_memory+5C↑r
.text:00000E30                                                             ; "%d"
.text:00000E34 5E 44 00 00                   off_E34 DCD dword_50A4 - 0xC46
.text:00000E34                                                             ; DATA XREF: mali_memtrack_get_memory:loc_C38↑r
.text:00000E38 40 44 00 00                   off_E38 DCD dword_50A4 - 0xC64
.text:00000E38                                                             ; DATA XREF: mali_memtrack_get_memory+9A↑r
.text:00000E3C 9C 1B 00 00                   off_E3C DCD aDMaliMem - 0xC6A ; DATA XREF: mali_memtrack_get_memory+A0↑r
.text:00000E3C                                                             ; "/d/mali/mem/"
.text:00000E40 AA 1B 00 00                   off_E40 DCD aSSS - 0xC6C      ; DATA XREF: mali_memtrack_get_memory+A4↑r
.text:00000E40                                                             ; "%s%s%s"
.text:00000E44 3A 44 00 00                   off_E44 DCD unk_50A8 - 0xC6E  ; DATA XREF: mali_memtrack_get_memory+AA↑r
.text:00000E48 5E 1B 00 00                   off_E48 DCD aLibmemtrackHwC - 0xCCC
.text:00000E48                                                             ; DATA XREF: mali_memtrack_get_memory:loc_CC0↑r
.text:00000E48                                                             ; "libmemtrack-hw -- Couldn't open the dir"...
.text:00000E4C 38 1B 00 00                   off_E4C DCD aDMaliMem - 0xCCE ; DATA XREF: mali_memtrack_get_memory+10C↑r
.text:00000E4C                                                             ; "/d/mali/mem/"
.text:00000E50 C8 43 00 00                   off_E50 DCD dword_50A4 - 0xCDC
.text:00000E50                                                             ; DATA XREF: mali_memtrack_get_memory:loc_CD0↑r
.text:00000E54 B0 43 00 00                   off_E54 DCD unk_50A8 - 0xCF8  ; DATA XREF: mali_memtrack_get_memory+130↑r
.text:00000E58 5A 41 00 00                   off_E58 DCD __stack_chk_guard_ptr - 0xE06
.text:00000E58                                                             ; DATA XREF: mali_memtrack_get_memory:loc_DFC↑r
.text:00000E5C C8 42 00 00                   off_E5C DCD unk_50A8 - 0xDE0  ; DATA XREF: mali_memtrack_get_memory+21C↑r
.text:00000E60 AF 1A 00 00                   off_E60 DCD aR - 0xD14        ; DATA XREF: mali_memtrack_get_memory:loc_D0C↑r
.text:00000E60                                                             ; "r"
.text:00000E64 78 43 00 00                   off_E64 DCD dword_50A4 - 0xD2C
.text:00000E64                                                             ; DATA XREF: mali_memtrack_get_memory+166↑r
.text:00000E68 C8 42 00 00                   off_E68 DCD dword_50A4 - 0xDDC
.text:00000E68                                                             ; DATA XREF: mali_memtrack_get_memory+216↑r
.text:00000E6C 8A 1A 00 00                   off_E6C DCD a15sSSD - 0xD64   ; DATA XREF: mali_memtrack_get_memory+1A0↑r
.text:00000E6C                                                             ; "%15s %*s %*s %d \n"
.text:00000E70 8E 1A 00 00                   off_E70 DCD aTotal - 0xD72    ; DATA XREF: mali_memtrack_get_memory+1B2↑r
.text:00000E70                                                             ; "Total"
.text:00000E74 35 1A 00 00                   off_E74 DCD aS15s15sSSD - 0xD90
.text:00000E74                                                             ; DATA XREF: mali_memtrack_get_memory+1CC↑r
.text:00000E74                                                             ; "%*s %15s %15s %*s %*s %d \n"
.text:00000E78 3E 1A 00 00                   off_E78 DCD aNative - 0xDA2   ; DATA XREF: mali_memtrack_get_memory+1E2↑r
.text:00000E78                                                             ; "Native"
.text:00000E7C 39 1A 00 00                   off_E7C DCD aBuffer - 0xDAE   ; DATA XREF: mali_memtrack_get_memory+1EE↑r
.text:00000E7C                                                             ; "Buffer"
.text:00000E80 87 1B 00 00                   off_E80 DCD aMemProfile - 0xC96
.text:00000E80                                                             ; DATA XREF: mali_memtrack_get_memory+D0↑r
.text:00000E80                               ; } // starts at BB8          ; "/mem_profile"
.text:00000E84
.text:00000E84                               ; =============== S U B R O U T I N E =======================================
.text:00000E84
.text:00000E84
.text:00000E84                               ; int __fastcall ion_memtrack_get_memory(int, int, _DWORD *, int *)
.text:00000E84                               EXPORT ion_memtrack_get_memory
.text:00000E84                               ion_memtrack_get_memory       ; CODE XREF: j_ion_memtrack_get_memory+8↑j
.text:00000E84                                                             ; DATA XREF: LOAD:000003E0↑o
.text:00000E84                                                             ; .got:ion_memtrack_get_memory_ptr↓o
.text:00000E84
.text:00000E84                               var_4D8= -0x4D8
.text:00000E84                               var_4D4= -0x4D4
.text:00000E84                               var_4D0= -0x4D0
.text:00000E84                               var_4CC= -0x4CC
.text:00000E84                               buf= -0x4C8
.text:00000E84                               filename= -0x460
.text:00000E84                               s= -0x420
.text:00000E84                               var_20= -0x20
.text:00000E84
.text:00000E84                               ; __unwind {
.text:00000E84 2D E9 F0 43                   PUSH.W          {R4-R9,LR}
.text:00000E88 AD F5 97 6D                   SUB.W           SP, SP, #0x4B8
.text:00000E8C 81 B0                         SUB             SP, SP, #4
.text:00000E8E 04 46                         MOV             R4, R0
.text:00000E90 3B 48                         LDR             R0, =(__stack_chk_guard_ptr - 0xE9A)
.text:00000E92 00 26                         MOVS            R6, #0
.text:00000E94 90 46                         MOV             R8, R2
.text:00000E96 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00000E98 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00000E9A 00 68                         LDR             R0, [R0]
.text:00000E9C CD F8 B8 04                   STR.W           R0, [SP,#0x4D8+var_20]
.text:00000EA0 01 20                         MOVS            R0, #1
.text:00000EA2 19 68                         LDR             R1, [R3]
.text:00000EA4 18 60                         STR             R0, [R3]
.text:00000EA6 00 20                         MOVS            R0, #0
.text:00000EA8 00 29                         CMP             R1, #0
.text:00000EAA 08 BF                         IT EQ
.text:00000EAC 01 26                         MOVEQ           R6, #1
.text:00000EAE 58 D0                         BEQ             loc_F62
.text:00000EAE
.text:00000EB0 34 48                         LDR             R0, =(aSysKernelDebug - 0xEB8) ; "/sys/kernel/debug/ion/clients"
.text:00000EB2 04 A9                         ADD             R1, SP, #0x4D8+buf ; buf
.text:00000EB4 78 44                         ADD             R0, PC        ; "/sys/kernel/debug/ion/clients"
.text:00000EB6 FF F7 CE ED                   BLX             lstat
.text:00000EB6
.text:00000EBA 30 B1                         CBZ             R0, loc_ECA
.text:00000EBA
.text:00000EBC 32 48                         LDR             R0, =(aSysKernelDebug_0 - 0xEC4) ; "/sys/kernel/debug/ion/"
.text:00000EBE 02 94                         STR             R4, [SP,#0x4D8+var_4D0]
.text:00000EC0 78 44                         ADD             R0, PC        ; "/sys/kernel/debug/ion/"
.text:00000EC2 01 90                         STR             R0, [SP,#0x4D8+var_4D4]
.text:00000EC4 31 48                         LDR             R0, =(aSD - 0xECA) ; "%s/%d"
.text:00000EC6 78 44                         ADD             R0, PC        ; "%s/%d"
.text:00000EC8 05 E0                         B               loc_ED6
.text:00000EC8
.text:00000ECA                               ; ---------------------------------------------------------------------------
.text:00000ECA
.text:00000ECA                               loc_ECA                       ; CODE XREF: ion_memtrack_get_memory+36↑j
.text:00000ECA 31 48                         LDR             R0, =(aSysKernelDebug - 0xED2) ; "/sys/kernel/debug/ion/clients"
.text:00000ECC 02 94                         STR             R4, [SP,#0x4D8+var_4D0]
.text:00000ECE 78 44                         ADD             R0, PC        ; "/sys/kernel/debug/ion/clients"
.text:00000ED0 01 90                         STR             R0, [SP,#0x4D8+var_4D4]
.text:00000ED2 30 48                         LDR             R0, =(aSD0 - 0xED8) ; "%s/%d-0"
.text:00000ED4 78 44                         ADD             R0, PC        ; "%s/%d-0"
.text:00000ED4
.text:00000ED6
.text:00000ED6                               loc_ED6                       ; CODE XREF: ion_memtrack_get_memory+44↑j
.text:00000ED6 00 90                         STR             R0, [SP,#0x4D8+var_4D8]
.text:00000ED8 1E A8                         ADD             R0, SP, #0x4D8+filename
.text:00000EDA 40 21                         MOVS            R1, #0x40 ; '@'
.text:00000EDC 00 22                         MOVS            R2, #0
.text:00000EDE 40 23                         MOVS            R3, #0x40 ; '@'
.text:00000EE0 FF F7 7C ED                   BLX             __snprintf_chk
.text:00000EE0
.text:00000EE4 2C 49                         LDR             R1, =(aR - 0xEEC) ; "r"
.text:00000EE6 1E A8                         ADD             R0, SP, #0x4D8+filename ; filename
.text:00000EE8 79 44                         ADD             R1, PC        ; "r" ; modes
.text:00000EEA FF F7 8A ED                   BLX             fopen
.text:00000EEA
.text:00000EEE 05 46                         MOV             R5, R0
.text:00000EF0 5D B3                         CBZ             R5, loc_F4A
.text:00000EF0
.text:00000EF2 2A 49                         LDR             R1, =(unk_2F78 - 0xF00)
.text:00000EF4 08 20                         MOVS            R0, #8
.text:00000EF6 80 EA C6 02                   EOR.W           R2, R0, R6,LSL#3
.text:00000EFA 40 46                         MOV             R0, R8
.text:00000EFC 79 44                         ADD             R1, PC        ; unk_2F78
.text:00000EFE FF F7 4A ED                   BLX             __aeabi_memcpy4
.text:00000EFE
.text:00000F02 2E A8                         ADD             R0, SP, #0x4D8+s ; s
.text:00000F04 4F F4 80 61                   MOV.W           R1, #0x400    ; n
.text:00000F08 2A 46                         MOV             R2, R5        ; stream
.text:00000F0A FF F7 80 ED                   BLX             fgets
.text:00000F0A
.text:00000F0E 20 B3                         CBZ             R0, loc_F5A
.text:00000F0E
.text:00000F10 23 4E                         LDR             R6, =(aIonNoncontigHe - 0xF1E) ; "ion_noncontig_he"
.text:00000F12 2E AF                         ADD             R7, SP, #0x4D8+s
.text:00000F14 DF F8 8C 90                   LDR.W           R9, =(aSU - 0xF20) ; "%*s %u\n"
.text:00000F18 03 AC                         ADD             R4, SP, #0x4D8+var_4CC
.text:00000F1A 7E 44                         ADD             R6, PC        ; "ion_noncontig_he"
.text:00000F1C F9 44                         ADD             R9, PC        ; "%*s %u\n"
.text:00000F1C
.text:00000F1E
.text:00000F1E                               loc_F1E                       ; CODE XREF: ion_memtrack_get_memory+C2↓j
.text:00000F1E 38 46                         MOV             R0, R7        ; s1
.text:00000F20 31 46                         MOV             R1, R6        ; s2
.text:00000F22 10 22                         MOVS            R2, #0x10     ; n
.text:00000F24 FF F7 54 ED                   BLX             strncmp
.text:00000F24
.text:00000F28 30 B9                         CBNZ            R0, loc_F38
.text:00000F28
.text:00000F2A 38 46                         MOV             R0, R7        ; s
.text:00000F2C 49 46                         MOV             R1, R9        ; format
.text:00000F2E 22 46                         MOV             R2, R4
.text:00000F30 FF F7 72 ED                   BLX             sscanf
.text:00000F30
.text:00000F34 01 28                         CMP             R0, #1
.text:00000F36 0D D0                         BEQ             loc_F54
.text:00000F36
.text:00000F38
.text:00000F38                               loc_F38                       ; CODE XREF: ion_memtrack_get_memory+A4↑j
.text:00000F38 38 46                         MOV             R0, R7        ; s
.text:00000F3A 4F F4 80 61                   MOV.W           R1, #0x400    ; n
.text:00000F3E 2A 46                         MOV             R2, R5        ; stream
.text:00000F40 FF F7 64 ED                   BLX             fgets
.text:00000F40
.text:00000F44 00 28                         CMP             R0, #0
.text:00000F46 EA D1                         BNE             loc_F1E
.text:00000F46
.text:00000F48 07 E0                         B               loc_F5A
.text:00000F48
.text:00000F4A                               ; ---------------------------------------------------------------------------
.text:00000F4A
.text:00000F4A                               loc_F4A                       ; CODE XREF: ion_memtrack_get_memory+6C↑j
.text:00000F4A FF F7 8A ED                   BLX             __errno
.text:00000F4A
.text:00000F4E 00 68                         LDR             R0, [R0]
.text:00000F50 40 42                         NEGS            R0, R0
.text:00000F52 06 E0                         B               loc_F62
.text:00000F52
.text:00000F54                               ; ---------------------------------------------------------------------------
.text:00000F54
.text:00000F54                               loc_F54                       ; CODE XREF: ion_memtrack_get_memory+B2↑j
.text:00000F54 03 98                         LDR             R0, [SP,#0x4D8+var_4CC]
.text:00000F56 C8 F8 00 00                   STR.W           R0, [R8]
.text:00000F56
.text:00000F5A
.text:00000F5A                               loc_F5A                       ; CODE XREF: ion_memtrack_get_memory+8A↑j
.text:00000F5A                                                             ; ion_memtrack_get_memory+C4↑j
.text:00000F5A 28 46                         MOV             R0, R5        ; stream
.text:00000F5C FF F7 6E ED                   BLX             fclose
.text:00000F5C
.text:00000F60 00 20                         MOVS            R0, #0
.text:00000F60
.text:00000F62
.text:00000F62                               loc_F62                       ; CODE XREF: ion_memtrack_get_memory+2A↑j
.text:00000F62                                                             ; ion_memtrack_get_memory+CE↑j
.text:00000F62 11 49                         LDR             R1, =(__stack_chk_guard_ptr - 0xF6C)
.text:00000F64 DD F8 B8 24                   LDR.W           R2, [SP,#0x4D8+var_20]
.text:00000F68 79 44                         ADD             R1, PC        ; __stack_chk_guard_ptr
.text:00000F6A 09 68                         LDR             R1, [R1]      ; __stack_chk_guard
.text:00000F6C 09 68                         LDR             R1, [R1]
.text:00000F6E 89 1A                         SUBS            R1, R1, R2
.text:00000F70 02 BF                         ITTT EQ
.text:00000F72 0D F5 97 6D                   ADDEQ.W         SP, SP, #0x4B8
.text:00000F76 01 B0                         ADDEQ           SP, SP, #4
.text:00000F78 BD E8 F0 83                   POPEQ.W         {R4-R9,PC}
.text:00000F78
.text:00000F7C FF F7 64 ED                   BLX             __stack_chk_fail
.text:00000F7C
.text:00000F7C                               ; End of function ion_memtrack_get_memory
.text:00000F7C
.text:00000F7C                               ; ---------------------------------------------------------------------------
.text:00000F80 C6 40 00 00                   off_F80 DCD __stack_chk_guard_ptr - 0xE9A
.text:00000F80                                                             ; DATA XREF: ion_memtrack_get_memory+C↑r
.text:00000F84 A8 19 00 00                   off_F84 DCD aSysKernelDebug - 0xEB8
.text:00000F84                                                             ; DATA XREF: ion_memtrack_get_memory+2C↑r
.text:00000F84                                                             ; "/sys/kernel/debug/ion/clients"
.text:00000F88 C8 19 00 00                   off_F88 DCD aSysKernelDebug_0 - 0xEC4
.text:00000F88                                                             ; DATA XREF: ion_memtrack_get_memory+38↑r
.text:00000F88                                                             ; "/sys/kernel/debug/ion/"
.text:00000F8C BC 19 00 00                   off_F8C DCD aSD - 0xECA       ; DATA XREF: ion_memtrack_get_memory+40↑r
.text:00000F8C                                                             ; "%s/%d"
.text:00000F90 8E 19 00 00                   off_F90 DCD aSysKernelDebug - 0xED2
.text:00000F90                                                             ; DATA XREF: ion_memtrack_get_memory:loc_ECA↑r
.text:00000F90                                                             ; "/sys/kernel/debug/ion/clients"
.text:00000F94 A6 19 00 00                   off_F94 DCD aSD0 - 0xED8      ; DATA XREF: ion_memtrack_get_memory+4E↑r
.text:00000F94                                                             ; "%s/%d-0"
.text:00000F98 D7 18 00 00                   off_F98 DCD aR - 0xEEC        ; DATA XREF: ion_memtrack_get_memory+60↑r
.text:00000F98                                                             ; "r"
.text:00000F9C 78 20 00 00                   off_F9C DCD unk_2F78 - 0xF00  ; DATA XREF: ion_memtrack_get_memory+6E↑r
.text:00000FA0 85 19 00 00                   off_FA0 DCD aIonNoncontigHe - 0xF1E
.text:00000FA0                                                             ; DATA XREF: ion_memtrack_get_memory+8C↑r
.text:00000FA0                                                             ; "ion_noncontig_he"
.text:00000FA4 94 19 00 00                   off_FA4 DCD aSU - 0xF20       ; DATA XREF: ion_memtrack_get_memory+90↑r
.text:00000FA4                                                             ; "%*s %u\n"
.text:00000FA8 F4 3F 00 00                   off_FA8 DCD __stack_chk_guard_ptr - 0xF6C
.text:00000FA8                                                             ; DATA XREF: ion_memtrack_get_memory:loc_F62↑r
.text:00000FA8                               ; } // starts at E84
.text:00000FAC
.text:00000FAC                               ; =============== S U B R O U T I N E =======================================
.text:00000FAC
.text:00000FAC
.text:00000FAC                               ; unsigned int *__fastcall sub_FAC(unsigned int *result, int *, int *)
.text:00000FAC                               sub_FAC                       ; CODE XREF: sub_1E78+1E↓p
.text:00000FAC                               ; __unwind {
.text:00000FAC 03 68                         LDR             R3, [R0]
.text:00000FAE 00 2B                         CMP             R3, #0
.text:00000FB0 0A DB                         BLT             loc_FC8
.text:00000FB0
.text:00000FB2 01 23                         MOVS            R3, #1
.text:00000FB4 0B 60                         STR             R3, [R1]
.text:00000FB6 04 23                         MOVS            R3, #4
.text:00000FB8 50 F8 04 1F                   LDR.W           R1, [R0,#4]!
.text:00000FBC 4F EA 11 61                   MOV.W           R1, R1,LSR#24
.text:00000FC0 03 EB 81 01                   ADD.W           R1, R3, R1,LSL#2
.text:00000FC4 11 60                         STR             R1, [R2]
.text:00000FC6 70 47                         BX              LR
.text:00000FC6
.text:00000FC8                               ; ---------------------------------------------------------------------------
.text:00000FC8
.text:00000FC8                               loc_FC8                       ; CODE XREF: sub_FAC+4↑j
.text:00000FC8 C3 F3 03 6C                   UBFX.W          R12, R3, #0x18, #4
.text:00000FCC BC F1 00 0F                   CMP.W           R12, #0
.text:00000FD0 0F D0                         BEQ             loc_FF2
.text:00000FD0
.text:00000FD2 BC F1 03 0F                   CMP.W           R12, #3
.text:00000FD6 1E BF                         ITTT NE
.text:00000FD8 BC F1 01 0F                   CMPNE.W         R12, #1
.text:00000FDC 00 20                         MOVNE           R0, #0
.text:00000FDE 70 47                         BXNE            LR
.text:00000FDE
.text:00000FE0 C3 F3 07 4C                   UBFX.W          R12, R3, #0x10, #8
.text:00000FE4 4F F0 04 03                   MOV.W           R3, #4
.text:00000FE8 03 EB 8C 03                   ADD.W           R3, R3, R12,LSL#2
.text:00000FEC 4F F0 02 0C                   MOV.W           R12, #2
.text:00000FF0 02 E0                         B               loc_FF8
.text:00000FF0
.text:00000FF2                               ; ---------------------------------------------------------------------------
.text:00000FF2
.text:00000FF2                               loc_FF2                       ; CODE XREF: sub_FAC+24↑j
.text:00000FF2 4F F0 01 0C                   MOV.W           R12, #1
.text:00000FF6 04 23                         MOVS            R3, #4
.text:00000FF6
.text:00000FF8
.text:00000FF8                               loc_FF8                       ; CODE XREF: sub_FAC+44↑j
.text:00000FF8 13 60                         STR             R3, [R2]
.text:00000FFA C1 F8 00 C0                   STR.W           R12, [R1]
.text:00000FFE 70 47                         BX              LR
.text:00000FFE                               ; } // starts at FAC
.text:00000FFE
.text:00000FFE                               ; End of function sub_FAC
.text:00000FFE
.text:00001000
.text:00001000                               ; =============== S U B R O U T I N E =======================================
.text:00001000
.text:00001000
.text:00001000                               ; int __fastcall sub_1000(int, int, unsigned int, unsigned int)
.text:00001000                               sub_1000                      ; CODE XREF: sub_1E78+2A↓p
.text:00001000
.text:00001000                               var_30= -0x30
.text:00001000                               var_2C= -0x2C
.text:00001000                               var_28= -0x28
.text:00001000
.text:00001000                               ; __unwind {
.text:00001000 2D E9 F0 4F                   PUSH.W          {R4-R11,LR}
.text:00001004 83 B0                         SUB             SP, SP, #0xC
.text:00001006 04 46                         MOV             R4, R0
.text:00001008 A7 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x1012)
.text:0000100A 1D 46                         MOV             R5, R3
.text:0000100C 93 46                         MOV             R11, R2
.text:0000100E 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00001010 89 46                         MOV             R9, R1
.text:00001012 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00001014 AB 45                         CMP             R11, R5
.text:00001016 00 68                         LDR             R0, [R0]
.text:00001018 02 90                         STR             R0, [SP,#0x30+var_28]
.text:0000101A 80 F0 2D 81                   BCS.W           loc_1278
.text:0000101A
.text:0000101E 00 20                         MOVS            R0, #0
.text:00001020 0D F1 04 08                   ADD.W           R8, SP, #0x30+var_2C
.text:00001024 00 90                         STR             R0, [SP,#0x30+var_30]
.text:00001024
.text:00001026
.text:00001026                               loc_1026                      ; CODE XREF: sub_1000+1CA↓j
.text:00001026 8B F0 03 00                   EOR.W           R0, R11, #3
.text:0000102A 0B F1 01 07                   ADD.W           R7, R11, #1
.text:0000102E 19 F8 00 A0                   LDRB.W          R10, [R9,R0]
.text:00001032 1A F0 80 0F                   TST.W           R10, #0x80
.text:00001036 0D D1                         BNE             loc_1054
.text:00001036
.text:00001038 20 46                         MOV             R0, R4
.text:0000103A 0D 21                         MOVS            R1, #0xD
.text:0000103C 42 46                         MOV             R2, R8
.text:0000103E 00 F0 59 FC                   BL              sub_18F4
.text:0000103E
.text:00001042 4F EA 8A 00                   MOV.W           R0, R10,LSL#2
.text:00001046 1A F0 40 0F                   TST.W           R10, #0x40
.text:0000104A 20 D1                         BNE             loc_108E
.text:0000104A
.text:0000104C 01 99                         LDR             R1, [SP,#0x30+var_2C]
.text:0000104E 08 44                         ADD             R0, R1
.text:00001050 02 1D                         ADDS            R2, R0, #4
.text:00001052 23 E0                         B               loc_109C
.text:00001052
.text:00001054                               ; ---------------------------------------------------------------------------
.text:00001054
.text:00001054                               loc_1054                      ; CODE XREF: sub_1000+36↑j
.text:00001054 0A F0 F0 01                   AND.W           R1, R10, #0xF0
.text:00001058 09 20                         MOVS            R0, #9
.text:0000105A AF 29                         CMP             R1, #0xAF
.text:0000105C 24 DC                         BGT             loc_10A8
.text:0000105C
.text:0000105E 80 29                         CMP             R1, #0x80
.text:00001060 36 D0                         BEQ             loc_10D0
.text:00001060
.text:00001062 90 29                         CMP             R1, #0x90
.text:00001064 4F D0                         BEQ             loc_1106
.text:00001064
.text:00001066 A0 29                         CMP             R1, #0xA0
.text:00001068 40 F0 11 81                   BNE.W           loc_128E      ; jumptable 0000112E cases 180-183
.text:00001068
.text:0000106C 0A F0 07 01                   AND.W           R1, R10, #7
.text:00001070 10 22                         MOVS            R2, #0x10
.text:00001072 01 31                         ADDS            R1, #1
.text:00001074 4F F4 80 40                   MOV.W           R0, #0x4000
.text:00001078 02 FA 01 F1                   LSL.W           R1, R2, R1
.text:0000107C 00 EA CA 20                   AND.W           R0, R0, R10,LSL#11
.text:00001080 10 39                         SUBS            R1, #0x10
.text:00001082 00 23                         MOVS            R3, #0
.text:00001084 41 EA 00 02                   ORR.W           R2, R1, R0
.text:00001088 20 46                         MOV             R0, R4
.text:0000108A 00 21                         MOVS            R1, #0
.text:0000108C 99 E0                         B               loc_11C2
.text:0000108C
.text:0000108E                               ; ---------------------------------------------------------------------------
.text:0000108E
.text:0000108E                               loc_108E                      ; CODE XREF: sub_1000+4A↑j
.text:0000108E 01 99                         LDR             R1, [SP,#0x30+var_2C]
.text:00001090 00 F0 FC 00                   AND.W           R0, R0, #0xFC
.text:00001094 6F F0 03 02                   MOV             R2, #0xFFFFFFFC
.text:00001098 10 1A                         SUBS            R0, R2, R0
.text:0000109A 42 18                         ADDS            R2, R0, R1
.text:0000109A
.text:0000109C
.text:0000109C                               loc_109C                      ; CODE XREF: sub_1000+52↑j
.text:0000109C                                                             ; sub_1000+19A↓j
.text:0000109C 01 92                         STR             R2, [SP,#0x30+var_2C]
.text:0000109C
.text:0000109E
.text:0000109E                               loc_109E                      ; CODE XREF: sub_1000+11E↓j
.text:0000109E 20 46                         MOV             R0, R4
.text:000010A0 0D 21                         MOVS            R1, #0xD
.text:000010A2 00 F0 3E FC                   BL              sub_1922
.text:000010A2
.text:000010A6 8E E0                         B               loc_11C6
.text:000010A6
.text:000010A8                               ; ---------------------------------------------------------------------------
.text:000010A8
.text:000010A8                               loc_10A8                      ; CODE XREF: sub_1000+5C↑j
.text:000010A8 B0 29                         CMP             R1, #0xB0
.text:000010AA 39 D0                         BEQ             loc_1120
.text:000010AA
.text:000010AC C0 29                         CMP             R1, #0xC0
.text:000010AE 00 F0 75 80                   BEQ.W           loc_119C
.text:000010AE
.text:000010B2 D0 29                         CMP             R1, #0xD0
.text:000010B4 40 F0 EB 80                   BNE.W           loc_128E      ; jumptable 0000112E cases 180-183
.text:000010B4
.text:000010B8 1A F0 08 0F                   TST.W           R10, #8
.text:000010BC 40 F0 D6 80                   BNE.W           def_11A4      ; jumptable 000011A4 default case
.text:000010BC
.text:000010C0 0A F0 07 00                   AND.W           R0, R10, #7
.text:000010C4 01 21                         MOVS            R1, #1
.text:000010C6 01 30                         ADDS            R0, #1
.text:000010C8 40 F4 00 22                   ORR.W           R2, R0, #0x80000
.text:000010CC 20 46                         MOV             R0, R4
.text:000010CE 77 E0                         B               loc_11C0
.text:000010CE
.text:000010D0                               ; ---------------------------------------------------------------------------
.text:000010D0
.text:000010D0                               loc_10D0                      ; CODE XREF: sub_1000+60↑j
.text:000010D0 AF 42                         CMP             R7, R5
.text:000010D2 80 F0 CB 80                   BCS.W           def_11A4      ; jumptable 000011A4 default case
.text:000010D2
.text:000010D6 87 F0 03 00                   EOR.W           R0, R7, #3
.text:000010DA 4F EA 0A 36                   MOV.W           R6, R10,LSL#12
.text:000010DE 19 F8 00 00                   LDRB.W          R0, [R9,R0]
.text:000010E2 B1 B2                         UXTH            R1, R6
.text:000010E4 41 EA 00 12                   ORR.W           R2, R1, R0,LSL#4
.text:000010E8 00 2A                         CMP             R2, #0
.text:000010EA 00 F0 BF 80                   BEQ.W           def_11A4      ; jumptable 000011A4 default case
.text:000010EA
.text:000010EE 20 46                         MOV             R0, R4
.text:000010F0 00 21                         MOVS            R1, #0
.text:000010F2 00 23                         MOVS            R3, #0
.text:000010F4 00 F0 74 F9                   BL              sub_13E0
.text:000010F4
.text:000010F8 00 99                         LDR             R1, [SP,#0x30+var_30]
.text:000010FA 06 F4 00 40                   AND.W           R0, R6, #0x8000
.text:000010FE 41 EA D0 31                   ORR.W           R1, R1, R0,LSR#15
.text:00001102 00 91                         STR             R1, [SP,#0x30+var_30]
.text:00001104 A8 E0                         B               loc_1258
.text:00001104
.text:00001106                               ; ---------------------------------------------------------------------------
.text:00001106
.text:00001106                               loc_1106                      ; CODE XREF: sub_1000+64↑j
.text:00001106 0A F0 0F 01                   AND.W           R1, R10, #0xF
.text:0000110A 41 F0 02 00                   ORR.W           R0, R1, #2
.text:0000110E 0F 28                         CMP             R0, #0xF
.text:00001110 00 F0 AC 80                   BEQ.W           def_11A4      ; jumptable 000011A4 default case
.text:00001110
.text:00001114 20 46                         MOV             R0, R4
.text:00001116 42 46                         MOV             R2, R8
.text:00001118 00 F0 EC FB                   BL              sub_18F4
.text:00001118
.text:0000111C 01 9A                         LDR             R2, [SP,#0x30+var_2C]
.text:0000111E BE E7                         B               loc_109E
.text:0000111E
.text:00001120                               ; ---------------------------------------------------------------------------
.text:00001120
.text:00001120                               loc_1120                      ; CODE XREF: sub_1000+AA↑j
.text:00001120 AA F1 B0 02                   SUB.W           R2, R10, #0xB0 ; switch 8 cases
.text:00001124 07 2A                         CMP             R2, #7
.text:00001126 53 D8                         BHI             def_112E      ; jumptable 0000112E default case
.text:00001126
.text:00001128 09 20                         MOVS            R0, #9
.text:0000112A 00 21                         MOVS            R1, #0
.text:0000112C 00 26                         MOVS            R6, #0
.text:0000112E DF E8 02 F0                   TBB.W           [PC,R2]       ; switch jump
.text:0000112E
.text:0000112E                               ; ---------------------------------------------------------------------------
.text:00001132 9F                            jpt_112E DCB 0x9F             ; jump table for switch statement
.text:00001133 04                            DCB 4
.text:00001134 17                            DCB 0x17
.text:00001135 58                            DCB 0x58
.text:00001136 AE                            DCB 0xAE
.text:00001137 AE                            DCB 0xAE
.text:00001138 AE                            DCB 0xAE
.text:00001139 AE                            DCB 0xAE
.text:0000113A                               ; ---------------------------------------------------------------------------
.text:0000113A
.text:0000113A                               loc_113A                      ; CODE XREF: sub_1000+12E↑j
.text:0000113A AF 42                         CMP             R7, R5        ; jumptable 0000112E case 177
.text:0000113C 80 F0 96 80                   BCS.W           def_11A4      ; jumptable 000011A4 default case
.text:0000113C
.text:00001140 87 F0 03 00                   EOR.W           R0, R7, #3
.text:00001144 19 F8 00 20                   LDRB.W          R2, [R9,R0]
.text:00001148 09 20                         MOVS            R0, #9
.text:0000114A 00 2A                         CMP             R2, #0
.text:0000114C 00 F0 9F 80                   BEQ.W           loc_128E      ; jumptable 0000112E cases 180-183
.text:0000114C
.text:00001150 12 F0 F0 01                   ANDS.W          R1, R2, #0xF0
.text:00001154 40 F0 9B 80                   BNE.W           loc_128E      ; jumptable 0000112E cases 180-183
.text:00001154
.text:00001158 20 46                         MOV             R0, R4
.text:0000115A 00 21                         MOVS            R1, #0
.text:0000115C 00 23                         MOVS            R3, #0
.text:0000115E 79 E0                         B               loc_1254
.text:0000115E
.text:00001160                               ; ---------------------------------------------------------------------------
.text:00001160
.text:00001160                               loc_1160                      ; CODE XREF: sub_1000+12E↑j
.text:00001160                                                             ; sub_1000+184↓j
.text:00001160 AF 42                         CMP             R7, R5        ; jumptable 0000112E case 178
.text:00001162 80 F0 83 80                   BCS.W           def_11A4      ; jumptable 000011A4 default case
.text:00001162
.text:00001166 87 F0 03 00                   EOR.W           R0, R7, #3
.text:0000116A 01 37                         ADDS            R7, #1
.text:0000116C 19 F8 00 00                   LDRB.W          R0, [R9,R0]
.text:00001170 00 F0 7F 02                   AND.W           R2, R0, #0x7F
.text:00001174 10 F0 80 0F                   TST.W           R0, #0x80
.text:00001178 02 FA 01 F2                   LSL.W           R2, R2, R1
.text:0000117C 01 F1 07 01                   ADD.W           R1, R1, #7
.text:00001180 46 EA 02 06                   ORR.W           R6, R6, R2
.text:00001184 EC D1                         BNE             loc_1160      ; jumptable 0000112E case 178
.text:00001184
.text:00001186 20 46                         MOV             R0, R4
.text:00001188 0D 21                         MOVS            R1, #0xD
.text:0000118A 42 46                         MOV             R2, R8
.text:0000118C 00 F0 B2 FB                   BL              sub_18F4
.text:0000118C
.text:00001190 01 98                         LDR             R0, [SP,#0x30+var_2C]
.text:00001192 00 EB 86 00                   ADD.W           R0, R0, R6,LSL#2
.text:00001196 00 F5 01 72                   ADD.W           R2, R0, #0x204
.text:0000119A 7F E7                         B               loc_109C
.text:0000119A
.text:0000119C                               ; ---------------------------------------------------------------------------
.text:0000119C
.text:0000119C                               loc_119C                      ; CODE XREF: sub_1000+AE↑j
.text:0000119C AA F1 C0 00                   SUB.W           R0, R10, #0xC0 ; switch 10 cases
.text:000011A0 09 28                         CMP             R0, #9
.text:000011A2 63 D8                         BHI             def_11A4      ; jumptable 000011A4 default case
.text:000011A2
.text:000011A4 DF E8 00 F0                   TBB.W           [PC,R0]       ; switch jump
.text:000011A4
.text:000011A4                               ; ---------------------------------------------------------------------------
.text:000011A8 05                            jpt_11A4 DCB 5                ; jump table for switch statement
.text:000011A9 05                            DCB 5
.text:000011AA 05                            DCB 5
.text:000011AB 05                            DCB 5
.text:000011AC 05                            DCB 5
.text:000011AD 05                            DCB 5
.text:000011AE 45                            DCB 0x45
.text:000011AF 5B                            DCB 0x5B
.text:000011B0 2E                            DCB 0x2E
.text:000011B1 2E                            DCB 0x2E
.text:000011B2                               ; ---------------------------------------------------------------------------
.text:000011B2
.text:000011B2                               loc_11B2                      ; CODE XREF: sub_1000+1A4↑j
.text:000011B2 0A F0 07 00                   AND.W           R0, R10, #7   ; jumptable 000011A4 cases 192-197
.text:000011B6 03 21                         MOVS            R1, #3
.text:000011B8 01 30                         ADDS            R0, #1
.text:000011BA 40 F4 20 22                   ORR.W           R2, R0, #0xA0000
.text:000011BE 20 46                         MOV             R0, R4
.text:000011BE
.text:000011C0
.text:000011C0                               loc_11C0                      ; CODE XREF: sub_1000+CE↑j
.text:000011C0 05 23                         MOVS            R3, #5
.text:000011C0
.text:000011C2
.text:000011C2                               loc_11C2                      ; CODE XREF: sub_1000+8C↑j
.text:000011C2                                                             ; sub_1000+1E0↓j
.text:000011C2 00 F0 0D F9                   BL              sub_13E0
.text:000011C2
.text:000011C6
.text:000011C6                               loc_11C6                      ; CODE XREF: sub_1000+A6↑j
.text:000011C6 BB 46                         MOV             R11, R7
.text:000011C6
.text:000011C8
.text:000011C8                               loc_11C8                      ; CODE XREF: sub_1000+25C↓j
.text:000011C8 AB 45                         CMP             R11, R5
.text:000011CA FF F4 2C AF                   BCC.W           loc_1026
.text:000011CA
.text:000011CE 4F E0                         B               loc_1270      ; jumptable 0000112E case 176
.text:000011CE
.text:000011D0                               ; ---------------------------------------------------------------------------
.text:000011D0
.text:000011D0                               def_112E                      ; CODE XREF: sub_1000+126↑j
.text:000011D0 0A F0 07 00                   AND.W           R0, R10, #7   ; jumptable 0000112E default case
.text:000011D4 01 21                         MOVS            R1, #1
.text:000011D6 01 30                         ADDS            R0, #1
.text:000011D8 01 23                         MOVS            R3, #1
.text:000011DA 40 F4 00 22                   ORR.W           R2, R0, #0x80000
.text:000011DE 20 46                         MOV             R0, R4
.text:000011E0 EF E7                         B               loc_11C2
.text:000011E0
.text:000011E2                               ; ---------------------------------------------------------------------------
.text:000011E2
.text:000011E2                               loc_11E2                      ; CODE XREF: sub_1000+12E↑j
.text:000011E2 87 F0 03 00                   EOR.W           R0, R7, #3    ; jumptable 0000112E case 179
.text:000011E6 01 23                         MOVS            R3, #1
.text:000011E8 19 F8 00 00                   LDRB.W          R0, [R9,R0]
.text:000011EC 4F EA 00 31                   MOV.W           R1, R0,LSL#12
.text:000011F0 00 F0 0F 00                   AND.W           R0, R0, #0xF
.text:000011F4 3F FA 81 F1                   UXTB16.W        R1, R1
.text:000011F8 01 30                         ADDS            R0, #1
.text:000011FA 40 EA 01 02                   ORR.W           R2, R0, R1
.text:000011FE 20 46                         MOV             R0, R4
.text:00001200 01 21                         MOVS            R1, #1
.text:00001202 27 E0                         B               loc_1254
.text:00001202
.text:00001204                               ; ---------------------------------------------------------------------------
.text:00001204
.text:00001204                               loc_1204                      ; CODE XREF: sub_1000+1A4↑j
.text:00001204 87 F0 03 00                   EOR.W           R0, R7, #3    ; jumptable 000011A4 cases 200,201
.text:00001208 10 22                         MOVS            R2, #0x10
.text:0000120A 19 F8 00 10                   LDRB.W          R1, [R9,R0]
.text:0000120E BA F1 C8 0F                   CMP.W           R10, #0xC8
.text:00001212 4F EA 11 10                   MOV.W           R0, R1,LSR#4
.text:00001216 08 BF                         IT EQ
.text:00001218 42 EA 11 10                   ORREQ.W         R0, R2, R1,LSR#4
.text:0000121C 01 F0 0F 01                   AND.W           R1, R1, #0xF
.text:00001220 42 18                         ADDS            R2, R0, R1
.text:00001222 1F 2A                         CMP             R2, #0x1F
.text:00001224 22 D8                         BHI             def_11A4      ; jumptable 000011A4 default case
.text:00001224
.text:00001226 01 31                         ADDS            R1, #1
.text:00001228 41 EA 00 42                   ORR.W           R2, R1, R0,LSL#16
.text:0000122C 20 46                         MOV             R0, R4
.text:0000122E 01 21                         MOVS            R1, #1
.text:00001230 0F E0                         B               loc_1252
.text:00001230
.text:00001232                               ; ---------------------------------------------------------------------------
.text:00001232
.text:00001232                               loc_1232                      ; CODE XREF: sub_1000+1A4↑j
.text:00001232 87 F0 03 00                   EOR.W           R0, R7, #3    ; jumptable 000011A4 case 198
.text:00001236 19 F8 00 00                   LDRB.W          R0, [R9,R0]
.text:0000123A 00 F0 0F 01                   AND.W           R1, R0, #0xF
.text:0000123E 01 EB 10 12                   ADD.W           R2, R1, R0,LSR#4
.text:00001242 0F 2A                         CMP             R2, #0xF
.text:00001244 12 D8                         BHI             def_11A4      ; jumptable 000011A4 default case
.text:00001244
.text:00001246 00 09                         LSRS            R0, R0, #4
.text:00001248 01 31                         ADDS            R1, #1
.text:0000124A 41 EA 00 42                   ORR.W           R2, R1, R0,LSL#16
.text:0000124E 20 46                         MOV             R0, R4
.text:00001250 03 21                         MOVS            R1, #3
.text:00001250
.text:00001252
.text:00001252                               loc_1252                      ; CODE XREF: sub_1000+230↑j
.text:00001252 05 23                         MOVS            R3, #5
.text:00001252
.text:00001254
.text:00001254                               loc_1254                      ; CODE XREF: sub_1000+15E↑j
.text:00001254                                                             ; sub_1000+202↑j
.text:00001254 00 F0 C4 F8                   BL              sub_13E0
.text:00001254
.text:00001258
.text:00001258                               loc_1258                      ; CODE XREF: sub_1000+104↑j
.text:00001258                                                             ; sub_1000+26A↓j
.text:00001258 0B F1 02 0B                   ADD.W           R11, R11, #2
.text:0000125C B4 E7                         B               loc_11C8
.text:0000125C
.text:0000125E                               ; ---------------------------------------------------------------------------
.text:0000125E
.text:0000125E                               loc_125E                      ; CODE XREF: sub_1000+1A4↑j
.text:0000125E 87 F0 03 00                   EOR.W           R0, R7, #3    ; jumptable 000011A4 case 199
.text:00001262 19 F8 00 00                   LDRB.W          R0, [R9,R0]
.text:00001266 08 B1                         CBZ             R0, def_11A4  ; jumptable 000011A4 default case
.text:00001266
.text:00001268 10 28                         CMP             R0, #0x10
.text:0000126A F5 D3                         BCC             loc_1258
.text:0000126A
.text:0000126C
.text:0000126C                               def_11A4                      ; CODE XREF: sub_1000+BC↑j
.text:0000126C                                                             ; sub_1000+D2↑j
.text:0000126C                                                             ; sub_1000+EA↑j
.text:0000126C                                                             ; sub_1000+110↑j
.text:0000126C                                                             ; sub_1000+13C↑j
.text:0000126C                                                             ; sub_1000+162↑j
.text:0000126C                                                             ; sub_1000+1A2↑j
.text:0000126C                                                             ; sub_1000+224↑j
.text:0000126C                                                             ; sub_1000+244↑j
.text:0000126C                                                             ; sub_1000+266↑j
.text:0000126C 09 20                         MOVS            R0, #9        ; jumptable 000011A4 default case
.text:0000126E 0E E0                         B               loc_128E      ; jumptable 0000112E cases 180-183
.text:0000126E
.text:00001270                               ; ---------------------------------------------------------------------------
.text:00001270
.text:00001270                               loc_1270                      ; CODE XREF: sub_1000+12E↑j
.text:00001270                                                             ; sub_1000+1CE↑j
.text:00001270 00 98                         LDR             R0, [SP,#0x30+var_30] ; jumptable 0000112E case 176
.text:00001272 10 F0 01 0F                   TST.W           R0, #1
.text:00001276 09 D1                         BNE             loc_128C
.text:00001276
.text:00001278
.text:00001278                               loc_1278                      ; CODE XREF: sub_1000+1A↑j
.text:00001278 01 AA                         ADD             R2, SP, #0x30+var_2C
.text:0000127A 20 46                         MOV             R0, R4
.text:0000127C 0E 21                         MOVS            R1, #0xE
.text:0000127E 00 F0 39 FB                   BL              sub_18F4
.text:0000127E
.text:00001282 01 9A                         LDR             R2, [SP,#0x30+var_2C]
.text:00001284 20 46                         MOV             R0, R4
.text:00001286 0F 21                         MOVS            R1, #0xF
.text:00001288 00 F0 4B FB                   BL              sub_1922
.text:00001288
.text:0000128C
.text:0000128C                               loc_128C                      ; CODE XREF: sub_1000+276↑j
.text:0000128C 08 20                         MOVS            R0, #8
.text:0000128C
.text:0000128E
.text:0000128E                               loc_128E                      ; CODE XREF: sub_1000+68↑j
.text:0000128E                                                             ; sub_1000+B4↑j
.text:0000128E                                                             ; sub_1000+12E↑j
.text:0000128E                                                             ; sub_1000+14C↑j
.text:0000128E                                                             ; sub_1000+154↑j
.text:0000128E                                                             ; sub_1000+26E↑j
.text:0000128E 07 49                         LDR             R1, =(__stack_chk_guard_ptr - 0x1296) ; jumptable 0000112E cases 180-183
.text:00001290 02 9A                         LDR             R2, [SP,#0x30+var_28]
.text:00001292 79 44                         ADD             R1, PC        ; __stack_chk_guard_ptr
.text:00001294 09 68                         LDR             R1, [R1]      ; __stack_chk_guard
.text:00001296 09 68                         LDR             R1, [R1]
.text:00001298 89 1A                         SUBS            R1, R1, R2
.text:0000129A 04 BF                         ITT EQ
.text:0000129C 03 B0                         ADDEQ           SP, SP, #0xC
.text:0000129E BD E8 F0 8F                   POPEQ.W         {R4-R11,PC}
.text:0000129E
.text:000012A2 FF F7 D2 EB                   BLX             __stack_chk_fail
.text:000012A2
.text:000012A2                               ; End of function sub_1000
.text:000012A2
.text:000012A2                               ; ---------------------------------------------------------------------------
.text:000012A6 00 BF                         ALIGN 4
.text:000012A8 4E 3F 00 00                   off_12A8 DCD __stack_chk_guard_ptr - 0x1012
.text:000012A8                                                             ; DATA XREF: sub_1000+8↑r
.text:000012AC CA 3C 00 00                   off_12AC DCD __stack_chk_guard_ptr - 0x1296
.text:000012AC                                                             ; DATA XREF: sub_1000:loc_128E↑r
.text:000012AC                               ; } // starts at 1000
.text:000012B0                               ; ---------------------------------------------------------------------------
.text:000012B0                               ; __unwind {
.text:000012B0 70 B5                         PUSH            {R4-R6,LR}
.text:000012B2 16 46                         MOV             R6, R2
.text:000012B4 05 46                         MOV             R5, R0
.text:000012B6 04 29                         CMP             R1, #4        ; switch 5 cases
.text:000012B8 37 D8                         BHI             def_12BC      ; jumptable 000012BC default case, case 2
.text:000012B8
.text:000012BA 04 9C                         LDR             R4, [SP,#0x10]
.text:000012BC DF E8 01 F0                   TBB.W           [PC,R1]       ; switch jump
.text:000012BC
.text:000012BC                               ; ---------------------------------------------------------------------------
.text:000012C0 03                            jpt_12BC DCB 3                ; jump table for switch statement
.text:000012C1 1D                            DCB 0x1D
.text:000012C2 35                            DCB 0x35
.text:000012C3 0A                            DCB 0xA
.text:000012C4 12                            DCB 0x12
.text:000012C5 00                            ALIGN 2
.text:000012C6
.text:000012C6                               loc_12C6                      ; CODE XREF: .text:000012BC↑j
.text:000012C6 02 20                         MOVS            R0, #2        ; jumptable 000012BC case 0
.text:000012C8 0F 2E                         CMP             R6, #0xF
.text:000012CA 23 D8                         BHI             locret_1314
.text:000012CA
.text:000012CC 13 BB                         CBNZ            R3, locret_1314
.text:000012CC
.text:000012CE 28 46                         MOV             R0, R5
.text:000012D0 31 46                         MOV             R1, R6
.text:000012D2 0E E0                         B               loc_12F2
.text:000012D2
.text:000012D4                               ; ---------------------------------------------------------------------------
.text:000012D4
.text:000012D4                               loc_12D4                      ; CODE XREF: .text:000012BC↑j
.text:000012D4 02 20                         MOVS            R0, #2        ; jumptable 000012BC case 3
.text:000012D6 1F 2E                         CMP             R6, #0x1F
.text:000012D8 1C D8                         BHI             locret_1314
.text:000012D8
.text:000012DA 05 2B                         CMP             R3, #5
.text:000012DC 1A D1                         BNE             locret_1314
.text:000012DC
.text:000012DE 06 F1 70 01                   ADD.W           R1, R6, #0x70 ; 'p'
.text:000012E2 1A E0                         B               loc_131A
.text:000012E2
.text:000012E4                               ; ---------------------------------------------------------------------------
.text:000012E4
.text:000012E4                               loc_12E4                      ; CODE XREF: .text:000012BC↑j
.text:000012E4 02 20                         MOVS            R0, #2        ; jumptable 000012BC case 4
.text:000012E6 03 2E                         CMP             R6, #3
.text:000012E8 14 D8                         BHI             locret_1314
.text:000012E8
.text:000012EA 9B B9                         CBNZ            R3, locret_1314
.text:000012EA
.text:000012EC 06 F1 C0 01                   ADD.W           R1, R6, #0xC0
.text:000012F0 28 46                         MOV             R0, R5
.text:000012F0
.text:000012F2
.text:000012F2                               loc_12F2                      ; CODE XREF: .text:000012D2↑j
.text:000012F2 22 46                         MOV             R2, R4
.text:000012F4 00 F0 FE FA                   BL              sub_18F4
.text:000012F4
.text:000012F8 13 E0                         B               loc_1322
.text:000012F8
.text:000012FA                               ; ---------------------------------------------------------------------------
.text:000012FA
.text:000012FA                               loc_12FA                      ; CODE XREF: .text:000012BC↑j
.text:000012FA 05 2B                         CMP             R3, #5        ; jumptable 000012BC case 1
.text:000012FC 07 D0                         BEQ             loc_130E
.text:000012FC
.text:000012FE 01 2B                         CMP             R3, #1
.text:00001300 07 D1                         BNE             loc_1312
.text:00001300
.text:00001302 0F 2E                         CMP             R6, #0xF
.text:00001304 05 D8                         BHI             loc_1312
.text:00001304
.text:00001306 28 46                         MOV             R0, R5
.text:00001308 00 F0 7C FB                   BL              sub_1A04
.text:00001308
.text:0000130C 03 E0                         B               loc_1316
.text:0000130C
.text:0000130E                               ; ---------------------------------------------------------------------------
.text:0000130E
.text:0000130E                               loc_130E                      ; CODE XREF: .text:000012FC↑j
.text:0000130E 1F 2E                         CMP             R6, #0x1F
.text:00001310 01 D9                         BLS             loc_1316
.text:00001310
.text:00001312
.text:00001312                               loc_1312                      ; CODE XREF: .text:00001300↑j
.text:00001312                                                             ; .text:00001304↑j
.text:00001312 02 20                         MOVS            R0, #2
.text:00001312
.text:00001314
.text:00001314                               locret_1314                   ; CODE XREF: .text:000012CA↑j
.text:00001314                                                             ; .text:000012CC↑j
.text:00001314                                                             ; .text:000012D8↑j
.text:00001314                                                             ; .text:000012DC↑j
.text:00001314                                                             ; .text:000012E8↑j
.text:00001314                                                             ; .text:000012EA↑j
.text:00001314 70 BD                         POP             {R4-R6,PC}
.text:00001314
.text:00001316                               ; ---------------------------------------------------------------------------
.text:00001316
.text:00001316                               loc_1316                      ; CODE XREF: .text:0000130C↑j
.text:00001316                                                             ; .text:00001310↑j
.text:00001316 06 F5 80 71                   ADD.W           R1, R6, #0x100
.text:00001316
.text:0000131A
.text:0000131A                               loc_131A                      ; CODE XREF: .text:000012E2↑j
.text:0000131A 28 46                         MOV             R0, R5
.text:0000131C 22 46                         MOV             R2, R4
.text:0000131E 00 F0 22 FB                   BL              sub_1966
.text:0000131E
.text:00001322
.text:00001322                               loc_1322                      ; CODE XREF: .text:000012F8↑j
.text:00001322 00 28                         CMP             R0, #0
.text:00001324 18 BF                         IT NE
.text:00001326 02 20                         MOVNE           R0, #2
.text:00001328 70 BD                         POP             {R4-R6,PC}
.text:00001328
.text:0000132A                               ; ---------------------------------------------------------------------------
.text:0000132A
.text:0000132A                               def_12BC                      ; CODE XREF: .text:000012B8↑j
.text:0000132A                                                             ; .text:000012BC↑j
.text:0000132A 04 48                         LDR             R0, =(aUnwindVrsResul_1 - 0x1336) ; jumptable 000012BC default case, case 2
.text:0000132C 40 F2 75 31                   MOVW            R1, #0x375
.text:00001330 03 4A                         LDR             R2, =(aUnsupportedReg - 0x1338) ; "unsupported register class"
.text:00001332 78 44                         ADD             R0, PC        ; "_Unwind_VRS_Result _Unwind_VRS_Get_Inte"...
.text:00001334 7A 44                         ADD             R2, PC        ; "unsupported register class"
.text:00001336 00 F0 13 FA                   BL              sub_1760
.text:00001336
.text:00001336                               ; ---------------------------------------------------------------------------
.text:0000133A 00 BF                         ALIGN 4
.text:0000133C D4 17 00 00                   off_133C DCD aUnwindVrsResul_1 - 0x1336
.text:0000133C                                                             ; DATA XREF: .text:def_12BC↑r
.text:0000133C                                                             ; "_Unwind_VRS_Result _Unwind_VRS_Get_Inte"...
.text:00001340 76 16 00 00                   off_1340 DCD aUnsupportedReg - 0x1338
.text:00001340                                                             ; DATA XREF: .text:00001330↑r
.text:00001340                                                             ; "unsupported register class"
.text:00001344
.text:00001344                               ; =============== S U B R O U T I N E =======================================
.text:00001344
.text:00001344
.text:00001344                               ; int __fastcall sub_1344(int, int, unsigned int, int, int *)
.text:00001344                               sub_1344                      ; CODE XREF: sub_13E0+64↓p
.text:00001344                                                             ; sub_13E0+D2↓p
.text:00001344
.text:00001344                               arg_0=  0
.text:00001344
.text:00001344 70 B5                         PUSH            {R4-R6,LR}
.text:00001346 15 46                         MOV             R5, R2
.text:00001348 04 46                         MOV             R4, R0
.text:0000134A 04 29                         CMP             R1, #4        ; switch 5 cases
.text:0000134C 3B D8                         BHI             def_1350      ; jumptable 00001350 default case, case 2
.text:0000134C
.text:0000134E 04 9E                         LDR             R6, [SP,#0x10+arg_0]
.text:00001350 DF E8 01 F0                   TBB.W           [PC,R1]       ; switch jump
.text:00001350
.text:00001350                               ; ---------------------------------------------------------------------------
.text:00001354 03                            jpt_1350 DCB 3                ; jump table for switch statement
.text:00001355 20                            DCB 0x20
.text:00001356 39                            DCB 0x39
.text:00001357 0B                            DCB 0xB
.text:00001358 15                            DCB 0x15
.text:00001359 00                            ALIGN 2
.text:0000135A
.text:0000135A                               loc_135A                      ; CODE XREF: sub_1344+C↑j
.text:0000135A 02 20                         MOVS            R0, #2        ; jumptable 00001350 case 0
.text:0000135C 0F 2D                         CMP             R5, #0xF
.text:0000135E 26 D8                         BHI             locret_13AE
.text:0000135E
.text:00001360 2B BB                         CBNZ            R3, locret_13AE
.text:00001360
.text:00001362 32 68                         LDR             R2, [R6]
.text:00001364 20 46                         MOV             R0, R4
.text:00001366 29 46                         MOV             R1, R5
.text:00001368 11 E0                         B               loc_138E
.text:00001368
.text:0000136A                               ; ---------------------------------------------------------------------------
.text:0000136A
.text:0000136A                               loc_136A                      ; CODE XREF: sub_1344+C↑j
.text:0000136A 02 20                         MOVS            R0, #2        ; jumptable 00001350 case 3
.text:0000136C 1F 2D                         CMP             R5, #0x1F
.text:0000136E 1E D8                         BHI             locret_13AE
.text:0000136E
.text:00001370 05 2B                         CMP             R3, #5
.text:00001372 1C D1                         BNE             locret_13AE
.text:00001372
.text:00001374 D6 E9 00 23                   LDRD.W          R2, R3, [R6]
.text:00001378 05 F1 70 01                   ADD.W           R1, R5, #0x70 ; 'p'
.text:0000137C 1C E0                         B               loc_13B8
.text:0000137C
.text:0000137E                               ; ---------------------------------------------------------------------------
.text:0000137E
.text:0000137E                               loc_137E                      ; CODE XREF: sub_1344+C↑j
.text:0000137E 02 20                         MOVS            R0, #2        ; jumptable 00001350 case 4
.text:00001380 03 2D                         CMP             R5, #3
.text:00001382 14 D8                         BHI             locret_13AE
.text:00001382
.text:00001384 9B B9                         CBNZ            R3, locret_13AE
.text:00001384
.text:00001386 32 68                         LDR             R2, [R6]
.text:00001388 05 F1 C0 01                   ADD.W           R1, R5, #0xC0
.text:0000138C 20 46                         MOV             R0, R4
.text:0000138C
.text:0000138E
.text:0000138E                               loc_138E                      ; CODE XREF: sub_1344+24↑j
.text:0000138E 00 F0 C8 FA                   BL              sub_1922
.text:0000138E
.text:00001392 14 E0                         B               loc_13BE
.text:00001392
.text:00001394                               ; ---------------------------------------------------------------------------
.text:00001394
.text:00001394                               loc_1394                      ; CODE XREF: sub_1344+C↑j
.text:00001394 05 2B                         CMP             R3, #5        ; jumptable 00001350 case 1
.text:00001396 07 D0                         BEQ             loc_13A8
.text:00001396
.text:00001398 01 2B                         CMP             R3, #1
.text:0000139A 07 D1                         BNE             loc_13AC
.text:0000139A
.text:0000139C 0F 2D                         CMP             R5, #0xF
.text:0000139E 05 D8                         BHI             loc_13AC
.text:0000139E
.text:000013A0 20 46                         MOV             R0, R4
.text:000013A2 00 F0 2F FB                   BL              sub_1A04
.text:000013A2
.text:000013A6 03 E0                         B               loc_13B0
.text:000013A6
.text:000013A8                               ; ---------------------------------------------------------------------------
.text:000013A8
.text:000013A8                               loc_13A8                      ; CODE XREF: sub_1344+52↑j
.text:000013A8 1F 2D                         CMP             R5, #0x1F
.text:000013AA 01 D9                         BLS             loc_13B0
.text:000013AA
.text:000013AC
.text:000013AC                               loc_13AC                      ; CODE XREF: sub_1344+56↑j
.text:000013AC                                                             ; sub_1344+5A↑j
.text:000013AC 02 20                         MOVS            R0, #2
.text:000013AC
.text:000013AE
.text:000013AE                               locret_13AE                   ; CODE XREF: sub_1344+1A↑j
.text:000013AE                                                             ; sub_1344+1C↑j
.text:000013AE                                                             ; sub_1344+2A↑j
.text:000013AE                                                             ; sub_1344+2E↑j
.text:000013AE                                                             ; sub_1344+3E↑j
.text:000013AE                                                             ; sub_1344+40↑j
.text:000013AE 70 BD                         POP             {R4-R6,PC}
.text:000013AE
.text:000013B0                               ; ---------------------------------------------------------------------------
.text:000013B0
.text:000013B0                               loc_13B0                      ; CODE XREF: sub_1344+62↑j
.text:000013B0                                                             ; sub_1344+66↑j
.text:000013B0 D6 E9 00 23                   LDRD.W          R2, R3, [R6]
.text:000013B4 05 F5 80 71                   ADD.W           R1, R5, #0x100
.text:000013B4
.text:000013B8
.text:000013B8                               loc_13B8                      ; CODE XREF: sub_1344+38↑j
.text:000013B8 20 46                         MOV             R0, R4
.text:000013BA 00 F0 EC FA                   BL              sub_1996
.text:000013BA
.text:000013BE
.text:000013BE                               loc_13BE                      ; CODE XREF: sub_1344+4E↑j
.text:000013BE 00 28                         CMP             R0, #0
.text:000013C0 18 BF                         IT NE
.text:000013C2 02 20                         MOVNE           R0, #2
.text:000013C4 70 BD                         POP             {R4-R6,PC}
.text:000013C4
.text:000013C6                               ; ---------------------------------------------------------------------------
.text:000013C6
.text:000013C6                               def_1350                      ; CODE XREF: sub_1344+8↑j
.text:000013C6                                                             ; sub_1344+C↑j
.text:000013C6 04 48                         LDR             R0, =(aUnwindVrsResul - 0x13D2) ; jumptable 00001350 default case, case 2
.text:000013C8 40 F2 45 31                   MOVW            R1, #0x345
.text:000013CC 03 4A                         LDR             R2, =(aUnsupportedReg - 0x13D4) ; "unsupported register class"
.text:000013CE 78 44                         ADD             R0, PC        ; "_Unwind_VRS_Result _Unwind_VRS_Set(_Unw"...
.text:000013D0 7A 44                         ADD             R2, PC        ; "unsupported register class"
.text:000013D2 00 F0 C5 F9                   BL              sub_1760
.text:000013D2
.text:000013D2                               ; End of function sub_1344
.text:000013D2
.text:000013D2                               ; ---------------------------------------------------------------------------
.text:000013D6 00 BF                         ALIGN 4
.text:000013D8 5E 15 00 00                   off_13D8 DCD aUnwindVrsResul - 0x13D2
.text:000013D8                                                             ; DATA XREF: sub_1344:def_1350↑r
.text:000013D8                                                             ; "_Unwind_VRS_Result _Unwind_VRS_Set(_Unw"...
.text:000013DC DA 15 00 00                   off_13DC DCD aUnsupportedReg - 0x13D4
.text:000013DC                                                             ; DATA XREF: sub_1344+88↑r
.text:000013DC                               ; } // starts at 12B0         ; "unsupported register class"
.text:000013E0
.text:000013E0                               ; =============== S U B R O U T I N E =======================================
.text:000013E0
.text:000013E0
.text:000013E0                               ; int __fastcall sub_13E0(int, int, unsigned int, int)
.text:000013E0                               sub_13E0                      ; CODE XREF: sub_1000+F4↑p
.text:000013E0                                                             ; sub_1000:loc_11C2↑p
.text:000013E0                                                             ; sub_1000:loc_1254↑p
.text:000013E0
.text:000013E0                               var_38= -0x38
.text:000013E0                               var_30= -0x30
.text:000013E0                               var_28= -0x28
.text:000013E0                               var_24= -0x24
.text:000013E0
.text:000013E0                               ; __unwind {
.text:000013E0 2D E9 F0 47                   PUSH.W          {R4-R10,LR}
.text:000013E4 86 B0                         SUB             SP, SP, #0x18
.text:000013E6 80 46                         MOV             R8, R0
.text:000013E8 48 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x13F2)
.text:000013EA 0D 46                         MOV             R5, R1
.text:000013EC 1F 46                         MOV             R7, R3
.text:000013EE 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:000013F0 16 46                         MOV             R6, R2
.text:000013F2 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:000013F4 04 2D                         CMP             R5, #4        ; switch 5 cases
.text:000013F6 00 68                         LDR             R0, [R0]
.text:000013F8 05 90                         STR             R0, [SP,#0x38+var_24]
.text:000013FA 00 F2 7E 80                   BHI.W           def_13FE      ; jumptable 000013FE default case, case 2
.text:000013FA
.text:000013FE DF E8 05 F0                   TBB.W           [PC,R5]       ; switch jump
.text:000013FE
.text:000013FE                               ; ---------------------------------------------------------------------------
.text:00001402 03                            jpt_13FE DCB 3                ; jump table for switch statement
.text:00001403 37                            DCB 0x37
.text:00001404 7C                            DCB 0x7C
.text:00001405 37                            DCB 0x37
.text:00001406 03                            DCB 3
.text:00001407 00                            ALIGN 2
.text:00001408
.text:00001408                               loc_1408                      ; CODE XREF: sub_13E0+1E↑j
.text:00001408 00 2F                         CMP             R7, #0        ; jumptable 000013FE cases 0,4
.text:0000140A 5E D1                         BNE             loc_14CA
.text:0000140A
.text:0000140C 02 AA                         ADD             R2, SP, #0x38+var_30
.text:0000140E 40 46                         MOV             R0, R8
.text:00001410 0D 21                         MOVS            R1, #0xD
.text:00001412 00 F0 6F FA                   BL              sub_18F4
.text:00001412
.text:00001416 00 28                         CMP             R0, #0
.text:00001418 57 D1                         BNE             loc_14CA
.text:00001418
.text:0000141A 00 24                         MOVS            R4, #0
.text:0000141C 4F F0 01 09                   MOV.W           R9, #1
.text:00001420 0D F1 10 0A                   ADD.W           R10, SP, #0x38+var_28
.text:00001424 00 27                         MOVS            R7, #0
.text:00001424
.text:00001426
.text:00001426                               loc_1426                      ; CODE XREF: sub_13E0+84↓j
.text:00001426 09 FA 07 F0                   LSL.W           R0, R9, R7
.text:0000142A 30 42                         TST             R0, R6
.text:0000142C 18 D0                         BEQ             loc_1460
.text:0000142C
.text:0000142E 02 98                         LDR             R0, [SP,#0x38+var_30]
.text:00001430 3A 46                         MOV             R2, R7
.text:00001432 00 23                         MOVS            R3, #0
.text:00001434 01 1D                         ADDS            R1, R0, #4
.text:00001436 02 91                         STR             R1, [SP,#0x38+var_30]
.text:00001438 29 46                         MOV             R1, R5
.text:0000143A 00 68                         LDR             R0, [R0]
.text:0000143C CD F8 00 A0                   STR.W           R10, [SP,#0x38+var_38]
.text:00001440 04 90                         STR             R0, [SP,#0x38+var_28]
.text:00001442 40 46                         MOV             R0, R8
.text:00001444 FF F7 7E FF                   BL              sub_1344
.text:00001444
.text:00001448 00 21                         MOVS            R1, #0
.text:0000144A 00 22                         MOVS            R2, #0
.text:0000144C 0D 2F                         CMP             R7, #0xD
.text:0000144E 08 BF                         IT EQ
.text:00001450 01 21                         MOVEQ           R1, #1
.text:00001452 00 2D                         CMP             R5, #0
.text:00001454 08 BF                         IT EQ
.text:00001456 01 22                         MOVEQ           R2, #1
.text:00001458 B8 BB                         CBNZ            R0, loc_14CA
.text:00001458
.text:0000145A 02 EA 01 00                   AND.W           R0, R2, R1
.text:0000145E 04 43                         ORRS            R4, R0
.text:0000145E
.text:00001460
.text:00001460                               loc_1460                      ; CODE XREF: sub_13E0+4C↑j
.text:00001460 01 37                         ADDS            R7, #1
.text:00001462 10 2F                         CMP             R7, #0x10
.text:00001464 DF D3                         BCC             loc_1426
.text:00001464
.text:00001466 14 F0 01 0F                   TST.W           R4, #1
.text:0000146A 3D D0                         BEQ             loc_14E8
.text:0000146A
.text:0000146C 00 20                         MOVS            R0, #0
.text:0000146E 2D E0                         B               loc_14CC
.text:0000146E
.text:00001470                               ; ---------------------------------------------------------------------------
.text:00001470
.text:00001470                               loc_1470                      ; CODE XREF: sub_13E0+1E↑j
.text:00001470 47 F0 04 00                   ORR.W           R0, R7, #4    ; jumptable 000013FE cases 1,3
.text:00001474 05 28                         CMP             R0, #5
.text:00001476 28 D1                         BNE             loc_14CA
.text:00001476
.text:00001478 04 AA                         ADD             R2, SP, #0x38+var_28
.text:0000147A 40 46                         MOV             R0, R8
.text:0000147C 0D 21                         MOVS            R1, #0xD
.text:0000147E 00 F0 39 FA                   BL              sub_18F4
.text:0000147E
.text:00001482 10 BB                         CBNZ            R0, loc_14CA
.text:00001482
.text:00001484 B0 B2                         UXTH            R0, R6
.text:00001486 D0 B1                         CBZ             R0, loc_14BE
.text:00001486
.text:00001488 34 0C                         LSRS            R4, R6, #0x10
.text:0000148A 0D F1 08 09                   ADD.W           R9, SP, #0x38+var_30
.text:0000148E 14 FA 86 F6                   UXTAH.W         R6, R4, R6
.text:0000148E
.text:00001492
.text:00001492                               loc_1492                      ; CODE XREF: sub_13E0+DC↓j
.text:00001492 04 98                         LDR             R0, [SP,#0x38+var_28]
.text:00001494 3B 46                         MOV             R3, R7
.text:00001496 01 1D                         ADDS            R1, R0, #4
.text:00001498 04 91                         STR             R1, [SP,#0x38+var_28]
.text:0000149A 01 46                         MOV             R1, R0
.text:0000149C 51 F8 08 2B                   LDR.W           R2, [R1],#8
.text:000014A0 04 91                         STR             R1, [SP,#0x38+var_28]
.text:000014A2 29 46                         MOV             R1, R5
.text:000014A4 40 68                         LDR             R0, [R0,#4]
.text:000014A6 CD E9 02 20                   STRD.W          R2, R0, [SP,#0x38+var_30]
.text:000014AA 40 46                         MOV             R0, R8
.text:000014AC 22 46                         MOV             R2, R4
.text:000014AE CD F8 00 90                   STR.W           R9, [SP,#0x38+var_38]
.text:000014B2 FF F7 47 FF                   BL              sub_1344
.text:000014B2
.text:000014B6 40 B9                         CBNZ            R0, loc_14CA
.text:000014B6
.text:000014B8 01 34                         ADDS            R4, #1
.text:000014BA B4 42                         CMP             R4, R6
.text:000014BC E9 D3                         BCC             loc_1492
.text:000014BC
.text:000014BE
.text:000014BE                               loc_14BE                      ; CODE XREF: sub_13E0+A6↑j
.text:000014BE 01 2F                         CMP             R7, #1
.text:000014C0 10 D1                         BNE             loc_14E4
.text:000014C0
.text:000014C2 04 98                         LDR             R0, [SP,#0x38+var_28]
.text:000014C4 02 1D                         ADDS            R2, R0, #4
.text:000014C6 04 92                         STR             R2, [SP,#0x38+var_28]
.text:000014C8 0F E0                         B               loc_14EA
.text:000014C8
.text:000014CA                               ; ---------------------------------------------------------------------------
.text:000014CA
.text:000014CA                               loc_14CA                      ; CODE XREF: sub_13E0+2A↑j
.text:000014CA                                                             ; sub_13E0+38↑j
.text:000014CA                                                             ; sub_13E0+78↑j
.text:000014CA                                                             ; sub_13E0+96↑j
.text:000014CA                                                             ; sub_13E0+A2↑j
.text:000014CA                                                             ; sub_13E0+D6↑j
.text:000014CA 02 20                         MOVS            R0, #2
.text:000014CA
.text:000014CC
.text:000014CC                               loc_14CC                      ; CODE XREF: sub_13E0+8E↑j
.text:000014CC                                                             ; sub_13E0+118↓j
.text:000014CC 10 49                         LDR             R1, =(__stack_chk_guard_ptr - 0x14D4)
.text:000014CE 05 9A                         LDR             R2, [SP,#0x38+var_24]
.text:000014D0 79 44                         ADD             R1, PC        ; __stack_chk_guard_ptr
.text:000014D2 09 68                         LDR             R1, [R1]      ; __stack_chk_guard
.text:000014D4 09 68                         LDR             R1, [R1]
.text:000014D6 89 1A                         SUBS            R1, R1, R2
.text:000014D8 04 BF                         ITT EQ
.text:000014DA 06 B0                         ADDEQ           SP, SP, #0x18
.text:000014DC BD E8 F0 87                   POPEQ.W         {R4-R10,PC}
.text:000014DC
.text:000014E0 FF F7 B2 EA                   BLX             __stack_chk_fail
.text:000014E0
.text:000014E4                               ; ---------------------------------------------------------------------------
.text:000014E4
.text:000014E4                               loc_14E4                      ; CODE XREF: sub_13E0+E0↑j
.text:000014E4 04 9A                         LDR             R2, [SP,#0x38+var_28]
.text:000014E6 00 E0                         B               loc_14EA
.text:000014E6
.text:000014E8                               ; ---------------------------------------------------------------------------
.text:000014E8
.text:000014E8                               loc_14E8                      ; CODE XREF: sub_13E0+8A↑j
.text:000014E8 02 9A                         LDR             R2, [SP,#0x38+var_30]
.text:000014E8
.text:000014EA
.text:000014EA                               loc_14EA                      ; CODE XREF: sub_13E0+E8↑j
.text:000014EA                                                             ; sub_13E0+106↑j
.text:000014EA 40 46                         MOV             R0, R8
.text:000014EC 0D 21                         MOVS            R1, #0xD
.text:000014EE 00 F0 18 FA                   BL              sub_1922
.text:000014EE
.text:000014F2 00 28                         CMP             R0, #0
.text:000014F4 18 BF                         IT NE
.text:000014F6 02 20                         MOVNE           R0, #2
.text:000014F8 E8 E7                         B               loc_14CC
.text:000014F8
.text:000014FA                               ; ---------------------------------------------------------------------------
.text:000014FA
.text:000014FA                               def_13FE                      ; CODE XREF: sub_13E0+1A↑j
.text:000014FA                                                             ; sub_13E0+1E↑j
.text:000014FA 06 48                         LDR             R0, =(aUnwindVrsResul_0 - 0x1506) ; jumptable 000013FE default case, case 2
.text:000014FC 40 F2 CB 31                   MOVW            R1, #0x3CB
.text:00001500 05 4A                         LDR             R2, =(aUnsupportedReg - 0x1508) ; "unsupported register class"
.text:00001502 78 44                         ADD             R0, PC        ; "_Unwind_VRS_Result _Unwind_VRS_Pop(_Unw"...
.text:00001504 7A 44                         ADD             R2, PC        ; "unsupported register class"
.text:00001506 00 F0 2B F9                   BL              sub_1760
.text:00001506
.text:00001506                               ; End of function sub_13E0
.text:00001506
.text:00001506                               ; ---------------------------------------------------------------------------
.text:0000150A 00 BF                         ALIGN 4
.text:0000150C 6E 3B 00 00                   off_150C DCD __stack_chk_guard_ptr - 0x13F2
.text:0000150C                                                             ; DATA XREF: sub_13E0+8↑r
.text:00001510 8C 3A 00 00                   off_1510 DCD __stack_chk_guard_ptr - 0x14D4
.text:00001510                                                             ; DATA XREF: sub_13E0:loc_14CC↑r
.text:00001514 C3 14 00 00                   off_1514 DCD aUnwindVrsResul_0 - 0x1506
.text:00001514                                                             ; DATA XREF: sub_13E0:def_13FE↑r
.text:00001514                                                             ; "_Unwind_VRS_Result _Unwind_VRS_Pop(_Unw"...
.text:00001518 A6 14 00 00                   off_1518 DCD aUnsupportedReg - 0x1508
.text:00001518                                                             ; DATA XREF: sub_13E0+120↑r
.text:00001518                               ; } // starts at 13E0         ; "unsupported register class"
.text:0000151C
.text:0000151C                               ; =============== S U B R O U T I N E =======================================
.text:0000151C
.text:0000151C
.text:0000151C                               ; int __fastcall sub_151C(int, int, int)
.text:0000151C                               sub_151C                      ; DATA XREF: sub_1F24+C2↓o
.text:0000151C                                                             ; .got:off_4F74↓o
.text:0000151C                               ; __unwind {
.text:0000151C 08 46                         MOV             R0, R1
.text:0000151E 11 46                         MOV             R1, R2
.text:00001520 00 F0 00 B8                   B.W             sub_1524
.text:00001520                               ; } // starts at 151C
.text:00001520
.text:00001520                               ; End of function sub_151C
.text:00001520
.text:00001524
.text:00001524                               ; =============== S U B R O U T I N E =======================================
.text:00001524
.text:00001524
.text:00001524                               ; int __fastcall sub_1524(int, int)
.text:00001524                               sub_1524                      ; CODE XREF: sub_151C+4↑j
.text:00001524                                                             ; sub_1580+4↓j
.text:00001524                                                             ; sub_1588+4↓j
.text:00001524
.text:00001524                               var_3C= -0x3C
.text:00001524                               var_34= -0x34
.text:00001524                               var_14= -0x14
.text:00001524
.text:00001524                               ; __unwind {
.text:00001524 B0 B5                         PUSH            {R4,R5,R7,LR}
.text:00001526 8C B0                         SUB             SP, SP, #0x30
.text:00001528 05 46                         MOV             R5, R0
.text:0000152A 13 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x1534)
.text:0000152C 0C 46                         MOV             R4, R1
.text:0000152E 01 A9                         ADD             R1, SP, #0x40+var_3C
.text:00001530 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00001532 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00001534 00 68                         LDR             R0, [R0]
.text:00001536 0B 90                         STR             R0, [SP,#0x40+var_14]
.text:00001538 20 46                         MOV             R0, R4
.text:0000153A 00 F0 4B FA                   BL              sub_19D4
.text:0000153A
.text:0000153E 95 F8 50 00                   LDRB.W          R0, [R5,#0x50]
.text:00001542 10 F0 01 0F                   TST.W           R0, #1
.text:00001546 04 D1                         BNE             loc_1552
.text:00001546
.text:00001548 03 98                         LDR             R0, [SP,#0x40+var_34]
.text:0000154A 00 68                         LDR             R0, [R0]
.text:0000154C 08 B1                         CBZ             R0, loc_1552
.text:0000154C
.text:0000154E 09 20                         MOVS            R0, #9
.text:00001550 07 E0                         B               loc_1562
.text:00001550
.text:00001552                               ; ---------------------------------------------------------------------------
.text:00001552
.text:00001552                               loc_1552                      ; CODE XREF: sub_1524+22↑j
.text:00001552                                                             ; sub_1524+28↑j
.text:00001552 20 46                         MOV             R0, R4
.text:00001554 00 F0 3B FA                   BL              sub_19CE
.text:00001554
.text:00001558 01 46                         MOV             R1, R0
.text:0000155A 09 20                         MOVS            R0, #9
.text:0000155C 01 29                         CMP             R1, #1
.text:0000155E 08 BF                         IT EQ
.text:00001560 08 20                         MOVEQ           R0, #8
.text:00001560
.text:00001562
.text:00001562                               loc_1562                      ; CODE XREF: sub_1524+2C↑j
.text:00001562 06 49                         LDR             R1, =(__stack_chk_guard_ptr - 0x156A)
.text:00001564 0B 9A                         LDR             R2, [SP,#0x40+var_14]
.text:00001566 79 44                         ADD             R1, PC        ; __stack_chk_guard_ptr
.text:00001568 09 68                         LDR             R1, [R1]      ; __stack_chk_guard
.text:0000156A 09 68                         LDR             R1, [R1]
.text:0000156C 89 1A                         SUBS            R1, R1, R2
.text:0000156E 04 BF                         ITT EQ
.text:00001570 0C B0                         ADDEQ           SP, SP, #0x30 ; '0'
.text:00001572 B0 BD                         POPEQ           {R4,R5,R7,PC}
.text:00001572
.text:00001574 FF F7 68 EA                   BLX             __stack_chk_fail
.text:00001574
.text:00001574                               ; End of function sub_1524
.text:00001574
.text:00001574                               ; ---------------------------------------------------------------------------
.text:00001578 2C 3A 00 00                   off_1578 DCD __stack_chk_guard_ptr - 0x1534
.text:00001578                                                             ; DATA XREF: sub_1524+6↑r
.text:0000157C F6 39 00 00                   off_157C DCD __stack_chk_guard_ptr - 0x156A
.text:0000157C                                                             ; DATA XREF: sub_1524:loc_1562↑r
.text:0000157C                               ; } // starts at 1524
.text:00001580
.text:00001580                               ; =============== S U B R O U T I N E =======================================
.text:00001580
.text:00001580
.text:00001580                               ; int __fastcall sub_1580(int, int, int)
.text:00001580                               sub_1580                      ; DATA XREF: sub_1F24+DA↓o
.text:00001580                                                             ; .got:off_4F70↓o
.text:00001580                               ; __unwind {
.text:00001580 08 46                         MOV             R0, R1
.text:00001582 11 46                         MOV             R1, R2
.text:00001584 FF F7 CE BF                   B.W             sub_1524
.text:00001584
.text:00001584                               ; End of function sub_1580
.text:00001584
.text:00001588
.text:00001588                               ; =============== S U B R O U T I N E =======================================
.text:00001588
.text:00001588
.text:00001588                               ; int __fastcall sub_1588(int, int, int)
.text:00001588                               sub_1588                      ; DATA XREF: sub_1F24+CE↓o
.text:00001588                                                             ; .got:off_4F6C↓o
.text:00001588 08 46                         MOV             R0, R1
.text:0000158A 11 46                         MOV             R1, R2
.text:0000158C FF F7 CA BF                   B.W             sub_1524
.text:0000158C                               ; } // starts at 1580
.text:0000158C
.text:0000158C                               ; End of function sub_1588
.text:0000158C
.text:00001590
.text:00001590                               ; =============== S U B R O U T I N E =======================================
.text:00001590
.text:00001590
.text:00001590                               ; int __fastcall sub_1590(int *, int, int, int)
.text:00001590                               sub_1590
.text:00001590
.text:00001590                               var_8A0= -0x8A0
.text:00001590                               var_894= -0x894
.text:00001590                               var_88C= -0x88C
.text:00001590                               var_880= -0x880
.text:00001590                               var_878= -0x878
.text:00001590                               var_478= -0x478
.text:00001590                               var_18= -0x18
.text:00001590
.text:00001590                               ; __unwind {
.text:00001590 F0 B5                         PUSH            {R4-R7,LR}
.text:00001592 AD F5 08 6D                   SUB.W           SP, SP, #0x880
.text:00001596 83 B0                         SUB             SP, SP, #0xC
.text:00001598 04 46                         MOV             R4, R0
.text:0000159A 26 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x15A2)
.text:0000159C 0A AD                         ADD             R5, SP, #0x8A0+var_878
.text:0000159E 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:000015A0 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:000015A2 00 68                         LDR             R0, [R0]
.text:000015A4 CD F8 88 08                   STR.W           R0, [SP,#0x8A0+var_18]
.text:000015A8 28 46                         MOV             R0, R5
.text:000015AA 00 F0 3E E9                   BLX             sub_1828
.text:000015AA
.text:000015AE 00 20                         MOVS            R0, #0
.text:000015B0 0D F5 85 66                   ADD.W           R6, SP, #0x8A0+var_478
.text:000015B4 E0 60                         STR             R0, [R4,#0xC]
.text:000015B6 30 46                         MOV             R0, R6
.text:000015B8 29 46                         MOV             R1, R5
.text:000015BA 00 F0 79 F9                   BL              sub_18B0
.text:000015BA
.text:000015BE 69 46                         MOV             R1, SP
.text:000015C0 30 46                         MOV             R0, R6
.text:000015C2 00 F0 07 FA                   BL              sub_19D4
.text:000015C2
.text:000015C6 B8 B9                         CBNZ            R0, loc_15F8
.text:000015C6
.text:000015C8 0D F5 85 66                   ADD.W           R6, SP, #0x8A0+var_478
.text:000015CC 6F 46                         MOV             R7, SP
.text:000015CE 03 25                         MOVS            R5, #3
.text:000015CE
.text:000015D0
.text:000015D0                               loc_15D0                      ; CODE XREF: sub_1590+66↓j
.text:000015D0 03 9B                         LDR             R3, [SP,#0x8A0+var_894]
.text:000015D2 5B B1                         CBZ             R3, loc_15EC
.text:000015D2
.text:000015D4 00 98                         LDR             R0, [SP,#0x8A0+var_8A0]
.text:000015D6 21 46                         MOV             R1, R4
.text:000015D8 32 46                         MOV             R2, R6
.text:000015DA A0 64                         STR             R0, [R4,#0x48]
.text:000015DC 08 98                         LDR             R0, [SP,#0x8A0+var_880]
.text:000015DE E0 64                         STR             R0, [R4,#0x4C]
.text:000015E0 05 98                         LDR             R0, [SP,#0x8A0+var_88C]
.text:000015E2 20 65                         STR             R0, [R4,#0x50]
.text:000015E4 00 20                         MOVS            R0, #0
.text:000015E6 98 47                         BLX             R3
.text:000015E6
.text:000015E8 08 28                         CMP             R0, #8
.text:000015EA 15 D1                         BNE             loc_1618
.text:000015EA
.text:000015EC
.text:000015EC                               loc_15EC                      ; CODE XREF: sub_1590+42↑j
.text:000015EC 30 46                         MOV             R0, R6
.text:000015EE 39 46                         MOV             R1, R7
.text:000015F0 00 F0 F0 F9                   BL              sub_19D4
.text:000015F0
.text:000015F4 00 28                         CMP             R0, #0
.text:000015F6 EB D0                         BEQ             loc_15D0
.text:000015F6
.text:000015F8
.text:000015F8                               loc_15F8                      ; CODE XREF: sub_1590+36↑j
.text:000015F8 03 25                         MOVS            R5, #3
.text:000015F8
.text:000015FA
.text:000015FA                               loc_15FA                      ; CODE XREF: sub_1590+92↓j
.text:000015FA                                                             ; sub_1590+A0↓j
.text:000015FA 0F 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x1604)
.text:000015FC DD F8 88 18                   LDR.W           R1, [SP,#0x8A0+var_18]
.text:00001600 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00001602 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00001604 00 68                         LDR             R0, [R0]
.text:00001606 40 1A                         SUBS            R0, R0, R1
.text:00001608 01 BF                         ITTTT EQ
.text:0000160A 28 46                         MOVEQ           R0, R5
.text:0000160C 0D F5 08 6D                   ADDEQ.W         SP, SP, #0x880
.text:00001610 03 B0                         ADDEQ           SP, SP, #0xC
.text:00001612 F0 BD                         POPEQ           {R4-R7,PC}
.text:00001612
.text:00001614 FF F7 18 EA                   BLX             __stack_chk_fail
.text:00001614
.text:00001618                               ; ---------------------------------------------------------------------------
.text:00001618
.text:00001618                               loc_1618                      ; CODE XREF: sub_1590+5A↑j
.text:00001618 06 28                         CMP             R0, #6
.text:0000161A 03 D0                         BEQ             loc_1624
.text:0000161A
.text:0000161C 09 28                         CMP             R0, #9
.text:0000161E 08 BF                         IT EQ
.text:00001620 09 25                         MOVEQ           R5, #9
.text:00001622 EA E7                         B               loc_15FA
.text:00001622
.text:00001624                               ; ---------------------------------------------------------------------------
.text:00001624
.text:00001624                               loc_1624                      ; CODE XREF: sub_1590+8A↑j
.text:00001624 0A A8                         ADD             R0, SP, #0x8A0+var_878
.text:00001626 21 46                         MOV             R1, R4
.text:00001628 00 22                         MOVS            R2, #0
.text:0000162A 00 F0 07 F8                   BL              sub_163C
.text:0000162A
.text:0000162E 02 25                         MOVS            R5, #2
.text:00001630 E3 E7                         B               loc_15FA
.text:00001630
.text:00001630                               ; End of function sub_1590
.text:00001630
.text:00001630                               ; ---------------------------------------------------------------------------
.text:00001632 00 BF                         ALIGN 4
.text:00001634 BE 39 00 00                   off_1634 DCD __stack_chk_guard_ptr - 0x15A2
.text:00001634                                                             ; DATA XREF: sub_1590+A↑r
.text:00001638 5C 39 00 00                   off_1638 DCD __stack_chk_guard_ptr - 0x1604
.text:00001638                                                             ; DATA XREF: sub_1590:loc_15FA↑r
.text:00001638                               ; } // starts at 1590
.text:0000163C
.text:0000163C                               ; =============== S U B R O U T I N E =======================================
.text:0000163C
.text:0000163C
.text:0000163C                               ; int __fastcall sub_163C(const void *, int *, char)
.text:0000163C                               sub_163C                      ; CODE XREF: sub_1590+9A↑p
.text:0000163C                                                             ; sub_172C+16↓p
.text:0000163C
.text:0000163C                               var_4B8= -0x4B8
.text:0000163C                               var_4B4= -0x4B4
.text:0000163C                               var_4A8= -0x4A8
.text:0000163C                               var_4A0= -0x4A0
.text:0000163C                               var_494= -0x494
.text:0000163C                               var_48C= -0x48C
.text:0000163C                               var_488= -0x488
.text:0000163C                               var_24= -0x24
.text:0000163C
.text:0000163C                               ; __unwind {
.text:0000163C 2D E9 F0 47                   PUSH.W          {R4-R10,LR}
.text:00001640 AD F5 93 6D                   SUB.W           SP, SP, #0x498
.text:00001644 0C 46                         MOV             R4, R1
.text:00001646 01 46                         MOV             R1, R0
.text:00001648 33 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x1652)
.text:0000164A 0C AD                         ADD             R5, SP, #0x4B8+var_488
.text:0000164C 92 46                         MOV             R10, R2
.text:0000164E 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00001650 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00001652 00 68                         LDR             R0, [R0]
.text:00001654 CD F8 94 04                   STR.W           R0, [SP,#0x4B8+var_24]
.text:00001658 28 46                         MOV             R0, R5
.text:0000165A 00 F0 29 F9                   BL              sub_18B0
.text:0000165A
.text:0000165E 01 26                         MOVS            R6, #1
.text:00001660 0D F1 2C 08                   ADD.W           R8, SP, #0x4B8+var_48C
.text:00001664 0D F1 04 09                   ADD.W           R9, SP, #0x4B8+var_4B4
.text:00001668 00 E0                         B               loc_166C
.text:00001668
.text:0000166A                               ; ---------------------------------------------------------------------------
.text:0000166A
.text:0000166A                               loc_166A                      ; CODE XREF: sub_163C+68↓j
.text:0000166A                                                             ; sub_163C+8C↓j
.text:0000166A 01 3E                         SUBS            R6, #1
.text:0000166A
.text:0000166C
.text:0000166C                               loc_166C                      ; CODE XREF: sub_163C+2C↑j
.text:0000166C 01 27                         MOVS            R7, #1
.text:0000166E 1A F0 01 00                   ANDS.W          R0, R10, #1
.text:00001672 18 BF                         IT NE
.text:00001674 02 27                         MOVNE           R7, #2
.text:00001676 08 D0                         BEQ             loc_168A
.text:00001676
.text:00001678 3E B9                         CBNZ            R6, loc_168A
.text:00001678
.text:0000167A 22 69                         LDR             R2, [R4,#0x10]
.text:0000167C 28 46                         MOV             R0, R5
.text:0000167E 4F F0 FF 31                   MOV.W           R1, #0xFFFFFFFF
.text:00001682 00 F0 4E F9                   BL              sub_1922
.text:00001682
.text:00001686 4F F0 00 0A                   MOV.W           R10, #0
.text:00001686
.text:0000168A
.text:0000168A                               loc_168A                      ; CODE XREF: sub_163C+3A↑j
.text:0000168A                                                             ; sub_163C+3C↑j
.text:0000168A 28 46                         MOV             R0, R5
.text:0000168C 6F F0 01 01                   MOV             R1, #0xFFFFFFFE
.text:00001690 42 46                         MOV             R2, R8
.text:00001692 00 F0 2F F9                   BL              sub_18F4
.text:00001692
.text:00001696 28 46                         MOV             R0, R5
.text:00001698 49 46                         MOV             R1, R9
.text:0000169A 00 F0 9B F9                   BL              sub_19D4
.text:0000169A
.text:0000169E 60 BB                         CBNZ            R0, loc_16FA
.text:0000169E
.text:000016A0 04 9B                         LDR             R3, [SP,#0x4B8+var_4A8]
.text:000016A2 00 2B                         CMP             R3, #0
.text:000016A4 E1 D0                         BEQ             loc_166A
.text:000016A4
.text:000016A6 01 98                         LDR             R0, [SP,#0x4B8+var_4B4]
.text:000016A8 21 46                         MOV             R1, R4
.text:000016AA 2A 46                         MOV             R2, R5
.text:000016AC A0 64                         STR             R0, [R4,#0x48]
.text:000016AE 09 98                         LDR             R0, [SP,#0x4B8+var_494]
.text:000016B0 E0 64                         STR             R0, [R4,#0x4C]
.text:000016B2 06 98                         LDR             R0, [SP,#0x4B8+var_4A0]
.text:000016B4 20 65                         STR             R0, [R4,#0x50]
.text:000016B6 38 46                         MOV             R0, R7
.text:000016B8 98 47                         BLX             R3
.text:000016B8
.text:000016BA 07 28                         CMP             R0, #7
.text:000016BC 11 D0                         BEQ             loc_16E2
.text:000016BC
.text:000016BE 08 28                         CMP             R0, #8
.text:000016C0 0B D1                         BNE             loc_16DA
.text:000016C0
.text:000016C2 0B 98                         LDR             R0, [SP,#0x4B8+var_48C]
.text:000016C4 21 6A                         LDR             R1, [R4,#0x20]
.text:000016C6 88 42                         CMP             R0, R1
.text:000016C8 CF D1                         BNE             loc_166A
.text:000016C8
.text:000016CA 14 48                         LDR             R0, =(aUnwindReasonCo - 0x16D6) ; "_Unwind_Reason_Code unwind_phase2(unw_c"...
.text:000016CC 40 F2 8D 21                   MOVW            R1, #0x28D
.text:000016D0 13 4A                         LDR             R2, =(aDuringPhase1Pe - 0x16D8) ; "during phase1 personality function said"...
.text:000016D2 78 44                         ADD             R0, PC        ; "_Unwind_Reason_Code unwind_phase2(unw_c"...
.text:000016D4 7A 44                         ADD             R2, PC        ; "during phase1 personality function said"...
.text:000016D6 00 F0 43 F8                   BL              sub_1760
.text:000016D6
.text:000016DA                               ; ---------------------------------------------------------------------------
.text:000016DA
.text:000016DA                               loc_16DA                      ; CODE XREF: sub_163C+84↑j
.text:000016DA 09 28                         CMP             R0, #9
.text:000016DC 0D D1                         BNE             loc_16FA
.text:000016DC
.text:000016DE FF F7 C6 E9                   BLX             abort
.text:000016DE
.text:000016E2                               ; ---------------------------------------------------------------------------
.text:000016E2
.text:000016E2                               loc_16E2                      ; CODE XREF: sub_163C+80↑j
.text:000016E2 0C AD                         ADD             R5, SP, #0x4B8+var_488
.text:000016E4 6A 46                         MOV             R2, SP
.text:000016E6 28 46                         MOV             R0, R5
.text:000016E8 4F F0 FF 31                   MOV.W           R1, #0xFFFFFFFF
.text:000016EC 00 F0 02 F9                   BL              sub_18F4
.text:000016EC
.text:000016F0 00 98                         LDR             R0, [SP,#0x4B8+var_4B8]
.text:000016F2 20 61                         STR             R0, [R4,#0x10]
.text:000016F4 28 46                         MOV             R0, R5
.text:000016F6 00 F0 7C F9                   BL              sub_19F2
.text:000016F6
.text:000016FA
.text:000016FA                               loc_16FA                      ; CODE XREF: sub_163C+62↑j
.text:000016FA                                                             ; sub_163C+A0↑j
.text:000016FA 0A 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x1704)
.text:000016FC DD F8 94 14                   LDR.W           R1, [SP,#0x4B8+var_24]
.text:00001700 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00001702 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00001704 00 68                         LDR             R0, [R0]
.text:00001706 40 1A                         SUBS            R0, R0, R1
.text:00001708 04 BF                         ITT EQ
.text:0000170A 0D F5 93 6D                   ADDEQ.W         SP, SP, #0x498
.text:0000170E BD E8 F0 87                   POPEQ.W         {R4-R10,PC}
.text:0000170E
.text:00001712 FF F7 9A E9                   BLX             __stack_chk_fail
.text:00001712
.text:00001712                               ; End of function sub_163C
.text:00001712
.text:00001712                               ; ---------------------------------------------------------------------------
.text:00001716 00 BF                         ALIGN 4
.text:00001718 0E 39 00 00                   off_1718 DCD __stack_chk_guard_ptr - 0x1652
.text:00001718                                                             ; DATA XREF: sub_163C+C↑r
.text:0000171C 69 13 00 00                   off_171C DCD aUnwindReasonCo - 0x16D6
.text:0000171C                                                             ; DATA XREF: sub_163C+8E↑r
.text:0000171C                                                             ; "_Unwind_Reason_Code unwind_phase2(unw_c"...
.text:00001720 B5 13 00 00                   off_1720 DCD aDuringPhase1Pe - 0x16D8
.text:00001720                                                             ; DATA XREF: sub_163C+94↑r
.text:00001720                                                             ; "during phase1 personality function said"...
.text:00001724 5C 38 00 00                   off_1724 DCD __stack_chk_guard_ptr - 0x1704
.text:00001724                                                             ; DATA XREF: sub_163C:loc_16FA↑r
.text:00001724                               ; } // starts at 163C
.text:00001728                               ; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0000172A 00 00                         ALIGN 4
.text:0000172A                               ; } // starts at 1728
.text:0000172C
.text:0000172C                               ; =============== S U B R O U T I N E =======================================
.text:0000172C
.text:0000172C                               ; Attributes: noreturn
.text:0000172C
.text:0000172C                               ; void __fastcall __noreturn sub_172C(int *, int, int, int)
.text:0000172C                               sub_172C
.text:0000172C                               ; __unwind {
.text:0000172C B0 B5                         PUSH            {R4,R5,R7,LR}
.text:0000172E AD F5 80 6D                   SUB.W           SP, SP, #0x400
.text:00001732 6D 46                         MOV             R5, SP
.text:00001734 04 46                         MOV             R4, R0
.text:00001736 28 46                         MOV             R0, R5
.text:00001738 00 F0 76 E8                   BLX             sub_1828
.text:00001738
.text:0000173C 28 46                         MOV             R0, R5
.text:0000173E 21 46                         MOV             R1, R4
.text:00001740 01 22                         MOVS            R2, #1
.text:00001742 FF F7 7B FF                   BL              sub_163C
.text:00001742
.text:00001746 04 48                         LDR             R0, =(aVoidUnwindResu - 0x1752) ; "void _Unwind_Resume(_Unwind_Exception *"...
.text:00001748 40 F2 F1 21                   MOVW            R1, #0x2F1
.text:0000174C 03 4A                         LDR             R2, =(aUnwindResumeCa - 0x1754) ; "_Unwind_Resume() can't return"
.text:0000174E 78 44                         ADD             R0, PC        ; "void _Unwind_Resume(_Unwind_Exception *"...
.text:00001750 7A 44                         ADD             R2, PC        ; "_Unwind_Resume() can't return"
.text:00001752 00 F0 05 F8                   BL              sub_1760
.text:00001752
.text:00001752                               ; End of function sub_172C
.text:00001752
.text:00001752                               ; ---------------------------------------------------------------------------
.text:00001756 00 BF                         ALIGN 4
.text:00001758 6A 11 00 00                   off_1758 DCD aVoidUnwindResu - 0x1752
.text:00001758                                                             ; DATA XREF: sub_172C+1A↑r
.text:00001758                                                             ; "void _Unwind_Resume(_Unwind_Exception *"...
.text:0000175C BE 11 00 00                   off_175C DCD aUnwindResumeCa - 0x1754
.text:0000175C                                                             ; DATA XREF: sub_172C+20↑r
.text:0000175C                               ; } // starts at 172C         ; "_Unwind_Resume() can't return"
.text:00001760
.text:00001760                               ; =============== S U B R O U T I N E =======================================
.text:00001760
.text:00001760                               ; Attributes: noreturn
.text:00001760
.text:00001760                               ; void __fastcall __noreturn sub_1760(const char *, int, const char *)
.text:00001760                               sub_1760                      ; CODE XREF: .text:00001336↑p
.text:00001760                                                             ; sub_1344+8E↑p
.text:00001760                                                             ; sub_13E0+126↑p
.text:00001760                                                             ; sub_163C+9A↑p
.text:00001760                                                             ; sub_172C+26↑p
.text:00001760
.text:00001760                               var_10= -0x10
.text:00001760
.text:00001760                               ; __unwind {
.text:00001760 80 B5                         PUSH            {R7,LR}
.text:00001762 82 B0                         SUB             SP, SP, #8
.text:00001764 84 46                         MOV             R12, R0
.text:00001766 07 48                         LDR             R0, =(stderr_ptr - 0x176E)
.text:00001768 08 4B                         LDR             R3, =(aExternalLibunw - 0x1772) ; "external/libunwind_llvm/src/Unwind-EHAB"...
.text:0000176A 78 44                         ADD             R0, PC        ; stderr_ptr
.text:0000176C 00 68                         LDR             R0, [R0]      ; stderr
.text:0000176E 7B 44                         ADD             R3, PC        ; "external/libunwind_llvm/src/Unwind-EHAB"...
.text:00001770 00 68                         LDR             R0, [R0]      ; stream
.text:00001772 CD E9 00 12                   STRD.W          R1, R2, [SP,#0x10+var_10]
.text:00001776 62 46                         MOV             R2, R12
.text:00001778 03 49                         LDR             R1, =(aLibunwindSSDS - 0x177E) ; "libunwind: %s %s:%d - %s\n"
.text:0000177A 79 44                         ADD             R1, PC        ; "libunwind: %s %s:%d - %s\n"
.text:0000177C FF F7 7C E9                   BLX             fprintf
.text:0000177C
.text:00001780 FF F7 74 E9                   BLX             abort
.text:00001780
.text:00001780                               ; End of function sub_1760
.text:00001780
.text:00001780                               ; ---------------------------------------------------------------------------
.text:00001784 FA 37 00 00                   off_1784 DCD stderr_ptr - 0x176E
.text:00001784                                                             ; DATA XREF: sub_1760+6↑r
.text:00001788 72 13 00 00                   off_1788 DCD aLibunwindSSDS - 0x177E
.text:00001788                                                             ; DATA XREF: sub_1760+18↑r
.text:00001788                                                             ; "libunwind: %s %s:%d - %s\n"
.text:0000178C 73 11 00 00                   off_178C DCD aExternalLibunw - 0x1772
.text:0000178C                                                             ; DATA XREF: sub_1760+8↑r
.text:0000178C                               ; } // starts at 1760         ; "external/libunwind_llvm/src/Unwind-EHAB"...
.text:00001790
.text:00001790                               ; =============== S U B R O U T I N E =======================================
.text:00001790
.text:00001790
.text:00001790                               ; int __fastcall sub_1790(int)
.text:00001790                               sub_1790
.text:00001790
.text:00001790                               var_34= -0x34
.text:00001790                               var_2C= -0x2C
.text:00001790                               var_C= -0xC
.text:00001790
.text:00001790                               ; __unwind {
.text:00001790 80 B5                         PUSH            {R7,LR}
.text:00001792 8C B0                         SUB             SP, SP, #0x30
.text:00001794 0B 49                         LDR             R1, =(__stack_chk_guard_ptr - 0x179A)
.text:00001796 79 44                         ADD             R1, PC        ; __stack_chk_guard_ptr
.text:00001798 09 68                         LDR             R1, [R1]      ; __stack_chk_guard
.text:0000179A 09 68                         LDR             R1, [R1]
.text:0000179C 0B 91                         STR             R1, [SP,#0x38+var_C]
.text:0000179E 01 A9                         ADD             R1, SP, #0x38+var_34
.text:000017A0 00 F0 18 F9                   BL              sub_19D4
.text:000017A0
.text:000017A4 01 46                         MOV             R1, R0
.text:000017A6 03 98                         LDR             R0, [SP,#0x38+var_2C]
.text:000017A8 00 29                         CMP             R1, #0
.text:000017AA 07 49                         LDR             R1, =(__stack_chk_guard_ptr - 0x17B6)
.text:000017AC 18 BF                         IT NE
.text:000017AE 00 20                         MOVNE           R0, #0
.text:000017B0 0B 9A                         LDR             R2, [SP,#0x38+var_C]
.text:000017B2 79 44                         ADD             R1, PC        ; __stack_chk_guard_ptr
.text:000017B4 09 68                         LDR             R1, [R1]      ; __stack_chk_guard
.text:000017B6 09 68                         LDR             R1, [R1]
.text:000017B8 89 1A                         SUBS            R1, R1, R2
.text:000017BA 04 BF                         ITT EQ
.text:000017BC 0C B0                         ADDEQ           SP, SP, #0x30 ; '0'
.text:000017BE 80 BD                         POPEQ           {R7,PC}
.text:000017BE
.text:000017C0 FF F7 42 E9                   BLX             __stack_chk_fail
.text:000017C0
.text:000017C0                               ; End of function sub_1790
.text:000017C0
.text:000017C0                               ; ---------------------------------------------------------------------------
.text:000017C4 C6 37 00 00                   off_17C4 DCD __stack_chk_guard_ptr - 0x179A
.text:000017C4                                                             ; DATA XREF: sub_1790+4↑r
.text:000017C8 AA 37 00 00                   off_17C8 DCD __stack_chk_guard_ptr - 0x17B6
.text:000017C8                                                             ; DATA XREF: sub_1790+1A↑r
.text:000017CC
.text:000017CC                               ; =============== S U B R O U T I N E =======================================
.text:000017CC
.text:000017CC
.text:000017CC                               ; int __fastcall sub_17CC(int)
.text:000017CC                               sub_17CC
.text:000017CC
.text:000017CC                               var_34= -0x34
.text:000017CC                               var_C= -0xC
.text:000017CC
.text:000017CC 80 B5                         PUSH            {R7,LR}
.text:000017CE 8C B0                         SUB             SP, SP, #0x30
.text:000017D0 0B 49                         LDR             R1, =(__stack_chk_guard_ptr - 0x17D6)
.text:000017D2 79 44                         ADD             R1, PC        ; __stack_chk_guard_ptr
.text:000017D4 09 68                         LDR             R1, [R1]      ; __stack_chk_guard
.text:000017D6 09 68                         LDR             R1, [R1]
.text:000017D8 0B 91                         STR             R1, [SP,#0x38+var_C]
.text:000017DA 01 A9                         ADD             R1, SP, #0x38+var_34
.text:000017DC 00 F0 FA F8                   BL              sub_19D4
.text:000017DC
.text:000017E0 01 46                         MOV             R1, R0
.text:000017E2 01 98                         LDR             R0, [SP,#0x38+var_34]
.text:000017E4 00 29                         CMP             R1, #0
.text:000017E6 07 49                         LDR             R1, =(__stack_chk_guard_ptr - 0x17F2)
.text:000017E8 18 BF                         IT NE
.text:000017EA 00 20                         MOVNE           R0, #0
.text:000017EC 0B 9A                         LDR             R2, [SP,#0x38+var_C]
.text:000017EE 79 44                         ADD             R1, PC        ; __stack_chk_guard_ptr
.text:000017F0 09 68                         LDR             R1, [R1]      ; __stack_chk_guard
.text:000017F2 09 68                         LDR             R1, [R1]
.text:000017F4 89 1A                         SUBS            R1, R1, R2
.text:000017F6 04 BF                         ITT EQ
.text:000017F8 0C B0                         ADDEQ           SP, SP, #0x30 ; '0'
.text:000017FA 80 BD                         POPEQ           {R7,PC}
.text:000017FA
.text:000017FC FF F7 24 E9                   BLX             __stack_chk_fail
.text:000017FC
.text:000017FC                               ; End of function sub_17CC
.text:000017FC
.text:000017FC                               ; ---------------------------------------------------------------------------
.text:00001800 8A 37 00 00                   off_1800 DCD __stack_chk_guard_ptr - 0x17D6
.text:00001800                                                             ; DATA XREF: sub_17CC+4↑r
.text:00001804 6E 37 00 00                   off_1804 DCD __stack_chk_guard_ptr - 0x17F2
.text:00001804                                                             ; DATA XREF: sub_17CC+1A↑r
.text:00001804                               ; } // starts at 1790
.text:00001808                               ; ---------------------------------------------------------------------------
.text:00001808                               ; __unwind {
.text:00001808 01 46                         MOV             R1, R0
.text:0000180A 8A 68                         LDR             R2, [R1,#8]
.text:0000180C 0A B1                         CBZ             R2, locret_1812
.text:0000180C
.text:0000180E 01 20                         MOVS            R0, #1
.text:00001810 10 47                         BX              R2
.text:00001810
.text:00001812                               ; ---------------------------------------------------------------------------
.text:00001812
.text:00001812                               locret_1812                   ; CODE XREF: .text:0000180C↑j
.text:00001812 70 47                         BX              LR
.text:00001812                               ; } // starts at 1808
.text:00001812
.text:00001814
.text:00001814                               ; =============== S U B R O U T I N E =======================================
.text:00001814
.text:00001814
.text:00001814                               ; int __fastcall sub_1814(int, int)
.text:00001814                               sub_1814
.text:00001814                               ; __unwind {
.text:00001814 80 B5                         PUSH            {R7,LR}
.text:00001816 08 46                         MOV             R0, R1
.text:00001818 00 F0 D9 F8                   BL              sub_19CE
.text:00001818
.text:0000181C 09 21                         MOVS            R1, #9
.text:0000181E 01 28                         CMP             R0, #1
.text:00001820 08 BF                         IT EQ
.text:00001822 00 21                         MOVEQ           R1, #0
.text:00001824 08 46                         MOV             R0, R1
.text:00001826 80 BD                         POP             {R7,PC}
.text:00001826                               ; } // starts at 1814
.text:00001826
.text:00001826                               ; End of function sub_1814
.text:00001826
.text:00001828                               CODE32
.text:00001828
.text:00001828                               ; =============== S U B R O U T I N E =======================================
.text:00001828
.text:00001828
.text:00001828                               ; int __fastcall sub_1828(_DWORD *, int, int, int, int)
.text:00001828                               sub_1828                      ; CODE XREF: sub_1590+1A↑p
.text:00001828                                                             ; sub_172C+C↑p
.text:00001828 FF 1F 80 E8                   STM             R0, {R0-R12}
.text:0000182C 34 D0 80 E5                   STR             SP, [R0,#0x34]
.text:00001830 38 E0 80 E5                   STR             LR, [R0,#0x38]
.text:00001834 3C E0 80 E5                   STR             LR, [R0,#0x3C]
.text:00001838 00 00 A0 E3                   MOV             R0, #0
.text:0000183C 1E FF 2F E1                   BX              LR
.text:0000183C
.text:0000183C                               ; End of function sub_1828
.text:0000183C
.text:00001840
.text:00001840                               ; =============== S U B R O U T I N E =======================================
.text:00001840
.text:00001840
.text:00001840                               ; _QWORD *__fastcall sub_1840(_QWORD *result)
.text:00001840                               sub_1840                      ; CODE XREF: sub_1B68:loc_1BDA↓p
.text:00001840                                                             ; sub_1C0C:loc_1C98↓p
.text:00001840 20 0B 80 EC                   VSTM            R0, {D0-D15}
.text:00001844 1E FF 2F E1                   BX              LR
.text:00001844
.text:00001844                               ; End of function sub_1840
.text:00001844
.text:00001848
.text:00001848                               ; =============== S U B R O U T I N E =======================================
.text:00001848
.text:00001848
.text:00001848                               ; _QWORD *__fastcall sub_1848(_QWORD *result)
.text:00001848                               sub_1848                      ; CODE XREF: sub_1B68+30↓p
.text:00001848                                                             ; sub_1C0C+36↓p
.text:00001848 20 0B 80 EC                   VSTM            R0, {D0-D15}
.text:0000184C 1E FF 2F E1                   BX              LR
.text:0000184C
.text:0000184C                               ; End of function sub_1848
.text:0000184C
.text:00001850
.text:00001850                               ; =============== S U B R O U T I N E =======================================
.text:00001850
.text:00001850
.text:00001850                               ; _QWORD *__fastcall sub_1850(_QWORD *result)
.text:00001850                               sub_1850                      ; CODE XREF: sub_1B68+64↓p
.text:00001850                                                             ; sub_1C0C+74↓p
.text:00001850 20 0B C0 EC                   VSTM            R0, {D16-D31}
.text:00001854 1E FF 2F E1                   BX              LR
.text:00001854
.text:00001854                               ; End of function sub_1850
.text:00001854
.text:00001858
.text:00001858                               ; =============== S U B R O U T I N E =======================================
.text:00001858
.text:00001858
.text:00001858                               ; void sub_1858()
.text:00001858                               sub_1858                      ; CODE XREF: sub_1B68+46↓p
.text:00001858                                                             ; sub_1C0C+4C↓p
.text:00001858 02 01 E0 EC                   STCL            p1, c0, [R0],#8
.text:0000185C 02 11 E0 EC                   STCL            p1, c1, [R0],#8
.text:00001860 02 21 E0 EC                   STCL            p1, c2, [R0],#8
.text:00001864 02 31 E0 EC                   STCL            p1, c3, [R0],#8
.text:00001868 02 41 E0 EC                   STCL            p1, c4, [R0],#8
.text:0000186C 02 51 E0 EC                   STCL            p1, c5, [R0],#8
.text:00001870 02 61 E0 EC                   STCL            p1, c6, [R0],#8
.text:00001874 02 71 E0 EC                   STCL            p1, c7, [R0],#8
.text:00001878 02 81 E0 EC                   STCL            p1, c8, [R0],#8
.text:0000187C 02 91 E0 EC                   STCL            p1, c9, [R0],#8
.text:00001880 02 A1 E0 EC                   STCL            p1, c10, [R0],#8
.text:00001884 02 B1 E0 EC                   STCL            p1, c11, [R0],#8
.text:00001888 02 C1 E0 EC                   STCL            p1, c12, [R0],#8
.text:0000188C 02 D1 E0 EC                   STCL            p1, c13, [R0],#8
.text:00001890 02 E1 E0 EC                   STCL            p1, c14, [R0],#8
.text:00001894 02 F1 E0 EC                   STCL            p1, c15, [R0],#8
.text:00001898 1E FF 2F E1                   BX              LR
.text:00001898
.text:00001898                               ; End of function sub_1858
.text:00001898
.text:0000189C
.text:0000189C                               ; =============== S U B R O U T I N E =======================================
.text:0000189C
.text:0000189C
.text:0000189C                               ; void sub_189C()
.text:0000189C                               sub_189C                      ; CODE XREF: sub_1A2C+5A↓p
.text:0000189C                                                             ; sub_1AB8+56↓p
.text:0000189C 01 81 A0 FC                   STC2            p1, c8, [R0],#4
.text:000018A0 01 91 A0 FC                   STC2            p1, c9, [R0],#4
.text:000018A4 01 A1 A0 FC                   STC2            p1, c10, [R0],#4
.text:000018A8 01 B1 A0 FC                   STC2            p1, c11, [R0],#4
.text:000018AC 1E FF 2F E1                   BX              LR
.text:000018AC
.text:000018AC                               ; End of function sub_189C
.text:000018AC
.text:000018B0                               CODE16
.text:000018B0
.text:000018B0                               ; =============== S U B R O U T I N E =======================================
.text:000018B0
.text:000018B0
.text:000018B0                               ; int __fastcall sub_18B0(int, const void *)
.text:000018B0                               sub_18B0                      ; CODE XREF: sub_1590+2A↑p
.text:000018B0                                                             ; sub_163C+1E↑p
.text:000018B0                               ; __unwind {
.text:000018B0 10 B5                         PUSH            {R4,LR}
.text:000018B2 04 46                         MOV             R4, R0
.text:000018B4 0D 48                         LDR             R0, =(unk_4E08 - 0x18BC)
.text:000018B6 40 22                         MOVS            R2, #0x40 ; '@'
.text:000018B8 78 44                         ADD             R0, PC        ; unk_4E08
.text:000018BA 08 30                         ADDS            R0, #8
.text:000018BC 20 60                         STR             R0, [R4]
.text:000018BE 0C 48                         LDR             R0, =(unk_51A8 - 0x18C4)
.text:000018C0 78 44                         ADD             R0, PC        ; unk_51A8
.text:000018C2 60 60                         STR             R0, [R4,#4]
.text:000018C4 00 20                         MOVS            R0, #0
.text:000018C6 84 F8 4C 00                   STRB.W          R0, [R4,#0x4C]
.text:000018CA A0 64                         STR             R0, [R4,#0x48]
.text:000018CC 04 F1 08 00                   ADD.W           R0, R4, #8
.text:000018D0 FF F7 D8 E8                   BLX             __aeabi_memcpy
.text:000018D0
.text:000018D4 04 F1 50 00                   ADD.W           R0, R4, #0x50 ; 'P'
.text:000018D8 4F F4 E1 71                   MOV.W           R1, #0x1C2
.text:000018DC FF F7 54 E8                   BLX             __aeabi_memclr8
.text:000018DC
.text:000018E0 20 46                         MOV             R0, R4
.text:000018E2 00 21                         MOVS            R1, #0
.text:000018E4 00 F0 72 FA                   BL              sub_1DCC
.text:000018E4
.text:000018E8 00 20                         MOVS            R0, #0
.text:000018EA 10 BD                         POP             {R4,PC}
.text:000018EA
.text:000018EA                               ; End of function sub_18B0
.text:000018EA
.text:000018EA                               ; ---------------------------------------------------------------------------
.text:000018EC 4C 35 00 00                   off_18EC DCD unk_4E08 - 0x18BC
.text:000018EC                                                             ; DATA XREF: sub_18B0+4↑r
.text:000018F0 E4 38 00 00                   off_18F0 DCD unk_51A8 - 0x18C4
.text:000018F0                                                             ; DATA XREF: sub_18B0+E↑r
.text:000018F0                               ; } // starts at 18B0
.text:000018F4
.text:000018F4                               ; =============== S U B R O U T I N E =======================================
.text:000018F4
.text:000018F4
.text:000018F4                               ; int __fastcall sub_18F4(int, int, _DWORD *)
.text:000018F4                               sub_18F4                      ; CODE XREF: sub_1000+3E↑p
.text:000018F4                                                             ; sub_1000+118↑p
.text:000018F4                                                             ; sub_1000+18C↑p
.text:000018F4                                                             ; sub_1000+27E↑p
.text:000018F4                                                             ; .text:000012F4↑p
.text:000018F4                                                             ; sub_13E0+32↑p
.text:000018F4                                                             ; sub_13E0+9E↑p
.text:000018F4                                                             ; sub_163C+56↑p
.text:000018F4                                                             ; sub_163C+B0↑p
.text:000018F4                               ; __unwind {
.text:000018F4 70 B5                         PUSH            {R4-R6,LR}
.text:000018F6 06 46                         MOV             R6, R0
.text:000018F8 14 46                         MOV             R4, R2
.text:000018FA 30 68                         LDR             R0, [R6]
.text:000018FC 0D 46                         MOV             R5, R1
.text:000018FE 82 68                         LDR             R2, [R0,#8]
.text:00001900 30 46                         MOV             R0, R6
.text:00001902 90 47                         BLX             R2
.text:00001902
.text:00001904 01 28                         CMP             R0, #1
.text:00001906 07 D1                         BNE             loc_1918
.text:00001906
.text:00001908 30 68                         LDR             R0, [R6]
.text:0000190A 29 46                         MOV             R1, R5
.text:0000190C C2 68                         LDR             R2, [R0,#0xC]
.text:0000190E 30 46                         MOV             R0, R6
.text:00001910 90 47                         BLX             R2
.text:00001910
.text:00001912 20 60                         STR             R0, [R4]
.text:00001914 00 20                         MOVS            R0, #0
.text:00001916 70 BD                         POP             {R4-R6,PC}
.text:00001916
.text:00001918                               ; ---------------------------------------------------------------------------
.text:00001918
.text:00001918                               loc_1918                      ; CODE XREF: sub_18F4+12↑j
.text:00001918 4E F2 72 60 CF F6 FF 70       MOV             R0, #0xFFFFE672
.text:00001920 70 BD                         POP             {R4-R6,PC}
.text:00001920
.text:00001920                               ; End of function sub_18F4
.text:00001920
.text:00001922
.text:00001922                               ; =============== S U B R O U T I N E =======================================
.text:00001922
.text:00001922
.text:00001922                               ; int __fastcall sub_1922(int, int, int)
.text:00001922                               sub_1922                      ; CODE XREF: sub_1000+A2↑p
.text:00001922                                                             ; sub_1000+288↑p
.text:00001922                                                             ; sub_1344:loc_138E↑p
.text:00001922                                                             ; sub_13E0+10E↑p
.text:00001922                                                             ; sub_163C+46↑p
.text:00001922 70 B5                         PUSH            {R4-R6,LR}
.text:00001924 04 46                         MOV             R4, R0
.text:00001926 16 46                         MOV             R6, R2
.text:00001928 20 68                         LDR             R0, [R4]
.text:0000192A 0D 46                         MOV             R5, R1
.text:0000192C 82 68                         LDR             R2, [R0,#8]
.text:0000192E 20 46                         MOV             R0, R4
.text:00001930 90 47                         BLX             R2
.text:00001930
.text:00001932 01 28                         CMP             R0, #1
.text:00001934 0A D1                         BNE             loc_194C
.text:00001934
.text:00001936 20 68                         LDR             R0, [R4]
.text:00001938 29 46                         MOV             R1, R5
.text:0000193A 32 46                         MOV             R2, R6
.text:0000193C 03 69                         LDR             R3, [R0,#0x10]
.text:0000193E 20 46                         MOV             R0, R4
.text:00001940 98 47                         BLX             R3
.text:00001940
.text:00001942 B5 F1 FF 3F                   CMP.W           R5, #0xFFFFFFFF
.text:00001946 06 D0                         BEQ             loc_1956
.text:00001946
.text:00001948 00 25                         MOVS            R5, #0
.text:0000194A 0A E0                         B               loc_1962
.text:0000194A
.text:0000194C                               ; ---------------------------------------------------------------------------
.text:0000194C
.text:0000194C                               loc_194C                      ; CODE XREF: sub_1922+12↑j
.text:0000194C 4E F2 72 65 CF F6 FF 75       MOV             R5, #0xFFFFE672
.text:00001954 05 E0                         B               loc_1962
.text:00001954
.text:00001956                               ; ---------------------------------------------------------------------------
.text:00001956
.text:00001956                               loc_1956                      ; CODE XREF: sub_1922+24↑j
.text:00001956 20 68                         LDR             R0, [R4]
.text:00001958 00 21                         MOVS            R1, #0
.text:0000195A 00 25                         MOVS            R5, #0
.text:0000195C 42 6B                         LDR             R2, [R0,#0x34]
.text:0000195E 20 46                         MOV             R0, R4
.text:00001960 90 47                         BLX             R2
.text:00001960
.text:00001962
.text:00001962                               loc_1962                      ; CODE XREF: sub_1922+28↑j
.text:00001962                                                             ; sub_1922+32↑j
.text:00001962 28 46                         MOV             R0, R5
.text:00001964 70 BD                         POP             {R4-R6,PC}
.text:00001964
.text:00001964                               ; End of function sub_1922
.text:00001964
.text:00001966
.text:00001966                               ; =============== S U B R O U T I N E =======================================
.text:00001966
.text:00001966
.text:00001966                               ; int __fastcall sub_1966(int, int, _QWORD *)
.text:00001966                               sub_1966                      ; CODE XREF: .text:0000131E↑p
.text:00001966 70 B5                         PUSH            {R4-R6,LR}
.text:00001968 06 46                         MOV             R6, R0
.text:0000196A 14 46                         MOV             R4, R2
.text:0000196C 30 68                         LDR             R0, [R6]
.text:0000196E 0D 46                         MOV             R5, R1
.text:00001970 42 69                         LDR             R2, [R0,#0x14]
.text:00001972 30 46                         MOV             R0, R6
.text:00001974 90 47                         BLX             R2
.text:00001974
.text:00001976 01 28                         CMP             R0, #1
.text:00001978 08 D1                         BNE             loc_198C
.text:00001978
.text:0000197A 30 68                         LDR             R0, [R6]
.text:0000197C 29 46                         MOV             R1, R5
.text:0000197E 82 69                         LDR             R2, [R0,#0x18]
.text:00001980 30 46                         MOV             R0, R6
.text:00001982 90 47                         BLX             R2
.text:00001982
.text:00001984 C4 E9 00 01                   STRD.W          R0, R1, [R4]
.text:00001988 00 20                         MOVS            R0, #0
.text:0000198A 70 BD                         POP             {R4-R6,PC}
.text:0000198A
.text:0000198C                               ; ---------------------------------------------------------------------------
.text:0000198C
.text:0000198C                               loc_198C                      ; CODE XREF: sub_1966+12↑j
.text:0000198C 4E F2 72 60 CF F6 FF 70       MOV             R0, #0xFFFFE672
.text:00001994 70 BD                         POP             {R4-R6,PC}
.text:00001994                               ; } // starts at 18F4
.text:00001994
.text:00001994                               ; End of function sub_1966
.text:00001994
.text:00001996
.text:00001996                               ; =============== S U B R O U T I N E =======================================
.text:00001996
.text:00001996
.text:00001996                               ; int __fastcall sub_1996(int, int, int, int)
.text:00001996                               sub_1996                      ; CODE XREF: sub_1344+76↑p
.text:00001996                               ; __unwind {
.text:00001996 2D E9 F0 41                   PUSH.W          {R4-R8,LR}
.text:0000199A 07 46                         MOV             R7, R0
.text:0000199C 15 46                         MOV             R5, R2
.text:0000199E 38 68                         LDR             R0, [R7]
.text:000019A0 98 46                         MOV             R8, R3
.text:000019A2 0E 46                         MOV             R6, R1
.text:000019A4 42 69                         LDR             R2, [R0,#0x14]
.text:000019A6 38 46                         MOV             R0, R7
.text:000019A8 90 47                         BLX             R2
.text:000019A8
.text:000019AA 01 28                         CMP             R0, #1
.text:000019AC 09 D1                         BNE             loc_19C2
.text:000019AC
.text:000019AE 38 68                         LDR             R0, [R7]
.text:000019B0 31 46                         MOV             R1, R6
.text:000019B2 2A 46                         MOV             R2, R5
.text:000019B4 43 46                         MOV             R3, R8
.text:000019B6 C4 69                         LDR             R4, [R0,#0x1C]
.text:000019B8 38 46                         MOV             R0, R7
.text:000019BA A0 47                         BLX             R4
.text:000019BA
.text:000019BC 00 20                         MOVS            R0, #0
.text:000019BE BD E8 F0 81                   POP.W           {R4-R8,PC}
.text:000019BE
.text:000019C2                               ; ---------------------------------------------------------------------------
.text:000019C2
.text:000019C2                               loc_19C2                      ; CODE XREF: sub_1996+16↑j
.text:000019C2 4E F2 72 60 CF F6 FF 70       MOV             R0, #0xFFFFE672
.text:000019CA BD E8 F0 81                   POP.W           {R4-R8,PC}
.text:000019CA                               ; } // starts at 1996
.text:000019CA
.text:000019CA                               ; End of function sub_1996
.text:000019CA
.text:000019CE
.text:000019CE                               ; =============== S U B R O U T I N E =======================================
.text:000019CE
.text:000019CE
.text:000019CE                               ; int __fastcall sub_19CE(int)
.text:000019CE                               sub_19CE                      ; CODE XREF: sub_1524+30↑p
.text:000019CE                                                             ; sub_1814+4↑p
.text:000019CE                               ; __unwind {
.text:000019CE 01 68                         LDR             R1, [R0]
.text:000019D0 09 6A                         LDR             R1, [R1,#0x20]
.text:000019D2 08 47                         BX              R1
.text:000019D2                               ; } // starts at 19CE
.text:000019D2
.text:000019D2                               ; End of function sub_19CE
.text:000019D2
.text:000019D4
.text:000019D4                               ; =============== S U B R O U T I N E =======================================
.text:000019D4
.text:000019D4
.text:000019D4                               ; int __fastcall sub_19D4(int, int)
.text:000019D4                               sub_19D4                      ; CODE XREF: sub_1524+16↑p
.text:000019D4                                                             ; sub_1590+32↑p
.text:000019D4                                                             ; sub_1590+60↑p
.text:000019D4                                                             ; sub_163C+5E↑p
.text:000019D4                                                             ; sub_1790+10↑p
.text:000019D4                                                             ; sub_17CC+10↑p
.text:000019D4                               ; __unwind {
.text:000019D4 10 B5                         PUSH            {R4,LR}
.text:000019D6 0C 46                         MOV             R4, R1
.text:000019D8 01 68                         LDR             R1, [R0]
.text:000019DA 4A 6A                         LDR             R2, [R1,#0x24]
.text:000019DC 21 46                         MOV             R1, R4
.text:000019DE 90 47                         BLX             R2
.text:000019DE
.text:000019E0 61 68                         LDR             R1, [R4,#4]
.text:000019E2 00 20                         MOVS            R0, #0
.text:000019E4 00 29                         CMP             R1, #0
.text:000019E6 04 BF                         ITT EQ
.text:000019E8 4E F2 6B 60                   MOVWEQ          R0, #0xE66B
.text:000019EC CF F6 FF 70                   MOVTEQ          R0, #0xFFFF
.text:000019F0 10 BD                         POP             {R4,PC}
.text:000019F0                               ; } // starts at 19D4
.text:000019F0
.text:000019F0                               ; End of function sub_19D4
.text:000019F0
.text:000019F2
.text:000019F2                               ; =============== S U B R O U T I N E =======================================
.text:000019F2
.text:000019F2
.text:000019F2                               ; int __fastcall sub_19F2(int)
.text:000019F2                               sub_19F2                      ; CODE XREF: sub_163C+BA↑p
.text:000019F2                               ; __unwind {
.text:000019F2 80 B5                         PUSH            {R7,LR}
.text:000019F4 01 68                         LDR             R1, [R0]
.text:000019F6 89 6A                         LDR             R1, [R1,#0x28]
.text:000019F8 88 47                         BLX             R1
.text:000019F8
.text:000019FA 4E F2 74 60 CF F6 FF 70       MOV             R0, #0xFFFFE674
.text:00001A02 80 BD                         POP             {R7,PC}
.text:00001A02                               ; } // starts at 19F2
.text:00001A02
.text:00001A02                               ; End of function sub_19F2
.text:00001A02
.text:00001A04
.text:00001A04                               ; =============== S U B R O U T I N E =======================================
.text:00001A04
.text:00001A04
.text:00001A04                               ; int __fastcall sub_1A04(int)
.text:00001A04                               sub_1A04                      ; CODE XREF: .text:00001308↑p
.text:00001A04                                                             ; sub_1344+5E↑p
.text:00001A04                               ; __unwind {
.text:00001A04 01 68                         LDR             R1, [R0]
.text:00001A06 C9 6B                         LDR             R1, [R1,#0x3C]
.text:00001A08 08 47                         BX              R1
.text:00001A08
.text:00001A08                               ; End of function sub_1A04
.text:00001A08
.text:00001A0A
.text:00001A0A                               ; =============== S U B R O U T I N E =======================================
.text:00001A0A
.text:00001A0A
.text:00001A0A                               ; int __fastcall sub_1A0A(int, int)
.text:00001A0A                               sub_1A0A                      ; DATA XREF: .data.rel.ro:00004E18↓o
.text:00001A0A 21 F0 03 00                   BIC.W           R0, R1, #3
.text:00001A0E 00 22                         MOVS            R2, #0
.text:00001A10 C0 28                         CMP             R0, #0xC0
.text:00001A12 4F F0 00 00                   MOV.W           R0, #0
.text:00001A16 A1 F1 10 01                   SUB.W           R1, R1, #0x10
.text:00001A1A 08 BF                         IT EQ
.text:00001A1C 01 20                         MOVEQ           R0, #1
.text:00001A1E 11 F1 13 0F                   CMN.W           R1, #0x13
.text:00001A22 88 BF                         IT HI
.text:00001A24 01 22                         MOVHI           R2, #1
.text:00001A26 40 EA 02 00                   ORR.W           R0, R0, R2
.text:00001A2A 70 47                         BX              LR
.text:00001A2A                               ; } // starts at 1A04
.text:00001A2A
.text:00001A2A                               ; End of function sub_1A0A
.text:00001A2A
.text:00001A2C
.text:00001A2C                               ; =============== S U B R O U T I N E =======================================
.text:00001A2C
.text:00001A2C
.text:00001A2C                               ; int __fastcall sub_1A2C(int, int)
.text:00001A2C                               sub_1A2C                      ; DATA XREF: .data.rel.ro:00004E1C↓o
.text:00001A2C                               ; __unwind {
.text:00001A2C B0 B5                         PUSH            {R4,R5,R7,LR}
.text:00001A2E 0D 46                         MOV             R5, R1
.text:00001A30 04 46                         MOV             R4, R0
.text:00001A32 0C 2D                         CMP             R5, #0xC
.text:00001A34 06 DD                         BLE             loc_1A44
.text:00001A34
.text:00001A36 0F 2D                         CMP             R5, #0xF
.text:00001A38 0A D0                         BEQ             loc_1A50
.text:00001A38
.text:00001A3A 0E 2D                         CMP             R5, #0xE
.text:00001A3C 0E D0                         BEQ             loc_1A5C
.text:00001A3C
.text:00001A3E 0D 2D                         CMP             R5, #0xD
.text:00001A40 09 D0                         BEQ             loc_1A56
.text:00001A40
.text:00001A42 0E E0                         B               loc_1A62
.text:00001A42
.text:00001A44                               ; ---------------------------------------------------------------------------
.text:00001A44
.text:00001A44                               loc_1A44                      ; CODE XREF: sub_1A2C+8↑j
.text:00001A44 15 F1 02 0F                   CMN.W           R5, #2
.text:00001A48 05 D0                         BEQ             loc_1A56
.text:00001A48
.text:00001A4A B5 F1 FF 3F                   CMP.W           R5, #0xFFFFFFFF
.text:00001A4E 08 D1                         BNE             loc_1A62
.text:00001A4E
.text:00001A50
.text:00001A50                               loc_1A50                      ; CODE XREF: sub_1A2C+C↑j
.text:00001A50 04 F1 44 00                   ADD.W           R0, R4, #0x44 ; 'D'
.text:00001A54 1D E0                         B               loc_1A92
.text:00001A54
.text:00001A56                               ; ---------------------------------------------------------------------------
.text:00001A56
.text:00001A56                               loc_1A56                      ; CODE XREF: sub_1A2C+14↑j
.text:00001A56                                                             ; sub_1A2C+1C↑j
.text:00001A56 04 F1 3C 00                   ADD.W           R0, R4, #0x3C ; '<'
.text:00001A5A 1A E0                         B               loc_1A92
.text:00001A5A
.text:00001A5C                               ; ---------------------------------------------------------------------------
.text:00001A5C
.text:00001A5C                               loc_1A5C                      ; CODE XREF: sub_1A2C+10↑j
.text:00001A5C 04 F1 40 00                   ADD.W           R0, R4, #0x40 ; '@'
.text:00001A60 17 E0                         B               loc_1A92
.text:00001A60
.text:00001A62                               ; ---------------------------------------------------------------------------
.text:00001A62
.text:00001A62                               loc_1A62                      ; CODE XREF: sub_1A2C+16↑j
.text:00001A62                                                             ; sub_1A2C+22↑j
.text:00001A62 0C 2D                         CMP             R5, #0xC
.text:00001A64 03 D8                         BHI             loc_1A6E
.text:00001A64
.text:00001A66 04 EB 85 00                   ADD.W           R0, R4, R5,LSL#2
.text:00001A6A 08 30                         ADDS            R0, #8
.text:00001A6C 11 E0                         B               loc_1A92
.text:00001A6C
.text:00001A6E                               ; ---------------------------------------------------------------------------
.text:00001A6E
.text:00001A6E                               loc_1A6E                      ; CODE XREF: sub_1A2C+38↑j
.text:00001A6E 25 F0 03 00                   BIC.W           R0, R5, #3
.text:00001A72 C0 28                         CMP             R0, #0xC0
.text:00001A74 0F D1                         BNE             loc_1A96
.text:00001A74
.text:00001A76 94 F8 4C 00                   LDRB.W          R0, [R4,#0x4C]
.text:00001A7A 30 B9                         CBNZ            R0, loc_1A8A
.text:00001A7A
.text:00001A7C 01 20                         MOVS            R0, #1
.text:00001A7E 84 F8 4C 00                   STRB.W          R0, [R4,#0x4C]
.text:00001A82 04 F5 EC 70                   ADD.W           R0, R4, #0x1D8
.text:00001A86 FF F7 0A EF                   BLX             sub_189C
.text:00001A86
.text:00001A8A
.text:00001A8A                               loc_1A8A                      ; CODE XREF: sub_1A2C+4E↑j
.text:00001A8A 04 EB 85 00                   ADD.W           R0, R4, R5,LSL#2
.text:00001A8E A0 F5 94 70                   SUB.W           R0, R0, #0x128
.text:00001A8E
.text:00001A92
.text:00001A92                               loc_1A92                      ; CODE XREF: sub_1A2C+28↑j
.text:00001A92                                                             ; sub_1A2C+2E↑j
.text:00001A92                                                             ; sub_1A2C+34↑j
.text:00001A92                                                             ; sub_1A2C+40↑j
.text:00001A92 00 68                         LDR             R0, [R0]
.text:00001A94 B0 BD                         POP             {R4,R5,R7,PC}
.text:00001A94
.text:00001A96                               ; ---------------------------------------------------------------------------
.text:00001A96
.text:00001A96                               loc_1A96                      ; CODE XREF: sub_1A2C+48↑j
.text:00001A96 05 48                         LDR             R0, =(aUint32TLibunwi - 0x1AA4) ; "uint32_t libunwind::Registers_arm::getR"...
.text:00001A98 40 F2 AC 52                   MOVW            R2, #0x5AC
.text:00001A9C 04 49                         LDR             R1, =(aExternalLibunw_1 - 0x1AA6) ; "external/libunwind_llvm/src/Registers.h"...
.text:00001A9E 05 4B                         LDR             R3, =(aUnsupportedArm - 0x1AA8) ; "unsupported arm register"
.text:00001AA0 78 44                         ADD             R0, PC        ; "uint32_t libunwind::Registers_arm::getR"...
.text:00001AA2 79 44                         ADD             R1, PC        ; "external/libunwind_llvm/src/Registers.h"...
.text:00001AA4 7B 44                         ADD             R3, PC        ; "unsupported arm register"
.text:00001AA6 00 F0 D1 F9                   BL              sub_1E4C
.text:00001AA6
.text:00001AA6                               ; End of function sub_1A2C
.text:00001AA6
.text:00001AA6                               ; ---------------------------------------------------------------------------
.text:00001AAA 00 BF                         ALIGN 4
.text:00001AAC 1A 11 00 00                   off_1AAC DCD aUint32TLibunwi - 0x1AA4
.text:00001AAC                                                             ; DATA XREF: sub_1A2C:loc_1A96↑r
.text:00001AAC                                                             ; "uint32_t libunwind::Registers_arm::getR"...
.text:00001AB0 4C 11 00 00                   off_1AB0 DCD aExternalLibunw_1 - 0x1AA6
.text:00001AB0                                                             ; DATA XREF: sub_1A2C+70↑r
.text:00001AB0                                                             ; "external/libunwind_llvm/src/Registers.h"...
.text:00001AB4 74 11 00 00                   off_1AB4 DCD aUnsupportedArm - 0x1AA8
.text:00001AB4                                                             ; DATA XREF: sub_1A2C+72↑r
.text:00001AB4                               ; } // starts at 1A2C         ; "unsupported arm register"
.text:00001AB8
.text:00001AB8                               ; =============== S U B R O U T I N E =======================================
.text:00001AB8
.text:00001AB8
.text:00001AB8                               ; int __fastcall sub_1AB8(int result, int, int)
.text:00001AB8                               sub_1AB8                      ; DATA XREF: .data.rel.ro:00004E20↓o
.text:00001AB8                               ; __unwind {
.text:00001AB8 70 B5                         PUSH            {R4-R6,LR}
.text:00001ABA 0E 46                         MOV             R6, R1
.text:00001ABC 14 46                         MOV             R4, R2
.text:00001ABE 05 46                         MOV             R5, R0
.text:00001AC0 0C 2E                         CMP             R6, #0xC
.text:00001AC2 06 DD                         BLE             loc_1AD2
.text:00001AC2
.text:00001AC4 0F 2E                         CMP             R6, #0xF
.text:00001AC6 0A D0                         BEQ             loc_1ADE
.text:00001AC6
.text:00001AC8 0E 2E                         CMP             R6, #0xE
.text:00001ACA 0C D0                         BEQ             loc_1AE6
.text:00001ACA
.text:00001ACC 0D 2E                         CMP             R6, #0xD
.text:00001ACE 08 D0                         BEQ             loc_1AE2
.text:00001ACE
.text:00001AD0 0B E0                         B               loc_1AEA
.text:00001AD0
.text:00001AD2                               ; ---------------------------------------------------------------------------
.text:00001AD2
.text:00001AD2                               loc_1AD2                      ; CODE XREF: sub_1AB8+A↑j
.text:00001AD2 16 F1 02 0F                   CMN.W           R6, #2
.text:00001AD6 04 D0                         BEQ             loc_1AE2
.text:00001AD6
.text:00001AD8 B6 F1 FF 3F                   CMP.W           R6, #0xFFFFFFFF
.text:00001ADC 05 D1                         BNE             loc_1AEA
.text:00001ADC
.text:00001ADE
.text:00001ADE                               loc_1ADE                      ; CODE XREF: sub_1AB8+E↑j
.text:00001ADE 6C 64                         STR             R4, [R5,#0x44]
.text:00001AE0 70 BD                         POP             {R4-R6,PC}
.text:00001AE0
.text:00001AE2                               ; ---------------------------------------------------------------------------
.text:00001AE2
.text:00001AE2                               loc_1AE2                      ; CODE XREF: sub_1AB8+16↑j
.text:00001AE2                                                             ; sub_1AB8+1E↑j
.text:00001AE2 EC 63                         STR             R4, [R5,#0x3C]
.text:00001AE4 70 BD                         POP             {R4-R6,PC}
.text:00001AE4
.text:00001AE6                               ; ---------------------------------------------------------------------------
.text:00001AE6
.text:00001AE6                               loc_1AE6                      ; CODE XREF: sub_1AB8+12↑j
.text:00001AE6 2C 64                         STR             R4, [R5,#0x40]
.text:00001AE8 70 BD                         POP             {R4-R6,PC}
.text:00001AE8
.text:00001AEA                               ; ---------------------------------------------------------------------------
.text:00001AEA
.text:00001AEA                               loc_1AEA                      ; CODE XREF: sub_1AB8+18↑j
.text:00001AEA                                                             ; sub_1AB8+24↑j
.text:00001AEA 0C 2E                         CMP             R6, #0xC
.text:00001AEC 03 D8                         BHI             loc_1AF6
.text:00001AEC
.text:00001AEE 05 EB 86 00                   ADD.W           R0, R5, R6,LSL#2
.text:00001AF2 84 60                         STR             R4, [R0,#8]
.text:00001AF4 70 BD                         POP             {R4-R6,PC}
.text:00001AF4
.text:00001AF6                               ; ---------------------------------------------------------------------------
.text:00001AF6
.text:00001AF6                               loc_1AF6                      ; CODE XREF: sub_1AB8+34↑j
.text:00001AF6 26 F0 03 00                   BIC.W           R0, R6, #3
.text:00001AFA C0 28                         CMP             R0, #0xC0
.text:00001AFC 11 D1                         BNE             loc_1B22
.text:00001AFC
.text:00001AFE 95 F8 4C 00                   LDRB.W          R0, [R5,#0x4C]
.text:00001B02 30 B9                         CBNZ            R0, loc_1B12
.text:00001B02
.text:00001B04 01 20                         MOVS            R0, #1
.text:00001B06 85 F8 4C 00                   STRB.W          R0, [R5,#0x4C]
.text:00001B0A 05 F5 EC 70                   ADD.W           R0, R5, #0x1D8
.text:00001B0E FF F7 C6 EE                   BLX             sub_189C
.text:00001B0E
.text:00001B12
.text:00001B12                               loc_1B12                      ; CODE XREF: sub_1AB8+4A↑j
.text:00001B12 4F F6 D8 61                   MOVW            R1, #0xFED8
.text:00001B16 05 EB 86 00                   ADD.W           R0, R5, R6,LSL#2
.text:00001B1A CF F6 FF 71                   MOVT            R1, #0xFFFF
.text:00001B1E 44 50                         STR             R4, [R0,R1]
.text:00001B20 70 BD                         POP             {R4-R6,PC}
.text:00001B20
.text:00001B22                               ; ---------------------------------------------------------------------------
.text:00001B22
.text:00001B22                               loc_1B22                      ; CODE XREF: sub_1AB8+44↑j
.text:00001B22 05 48                         LDR             R0, =(aVoidLibunwindR - 0x1B30) ; "void libunwind::Registers_arm::setRegis"...
.text:00001B24 40 F2 BF 52                   MOVW            R2, #0x5BF
.text:00001B28 04 49                         LDR             R1, =(aExternalLibunw_1 - 0x1B32) ; "external/libunwind_llvm/src/Registers.h"...
.text:00001B2A 05 4B                         LDR             R3, =(aUnsupportedArm - 0x1B34) ; "unsupported arm register"
.text:00001B2C 78 44                         ADD             R0, PC        ; "void libunwind::Registers_arm::setRegis"...
.text:00001B2E 79 44                         ADD             R1, PC        ; "external/libunwind_llvm/src/Registers.h"...
.text:00001B30 7B 44                         ADD             R3, PC        ; "unsupported arm register"
.text:00001B32 00 F0 8B F9                   BL              sub_1E4C
.text:00001B32
.text:00001B32                               ; End of function sub_1AB8
.text:00001B32
.text:00001B32                               ; ---------------------------------------------------------------------------
.text:00001B36 00 BF                         ALIGN 4
.text:00001B38 05 11 00 00                   off_1B38 DCD aVoidLibunwindR - 0x1B30
.text:00001B38                                                             ; DATA XREF: sub_1AB8:loc_1B22↑r
.text:00001B38                                                             ; "void libunwind::Registers_arm::setRegis"...
.text:00001B3C C0 10 00 00                   off_1B3C DCD aExternalLibunw_1 - 0x1B32
.text:00001B3C                                                             ; DATA XREF: sub_1AB8+70↑r
.text:00001B3C                                                             ; "external/libunwind_llvm/src/Registers.h"...
.text:00001B40 E8 10 00 00                   off_1B40 DCD aUnsupportedArm - 0x1B34
.text:00001B40                                                             ; DATA XREF: sub_1AB8+72↑r
.text:00001B40                               ; } // starts at 1AB8         ; "unsupported arm register"
.text:00001B44
.text:00001B44                               ; =============== S U B R O U T I N E =======================================
.text:00001B44
.text:00001B44
.text:00001B44                               ; int __fastcall sub_1B44(int, int)
.text:00001B44                               sub_1B44                      ; DATA XREF: .data.rel.ro:00004E24↓o
.text:00001B44                               ; __unwind {
.text:00001B44 21 F0 0F 00                   BIC.W           R0, R1, #0xF
.text:00001B48 00 22                         MOVS            R2, #0
.text:00001B4A 70 28                         CMP             R0, #0x70 ; 'p'
.text:00001B4C 4F F0 00 00                   MOV.W           R0, #0
.text:00001B50 21 F0 1F 01                   BIC.W           R1, R1, #0x1F
.text:00001B54 08 BF                         IT EQ
.text:00001B56 01 20                         MOVEQ           R0, #1
.text:00001B58 B1 F5 80 7F                   CMP.W           R1, #0x100
.text:00001B5C 08 BF                         IT EQ
.text:00001B5E 01 22                         MOVEQ           R2, #1
.text:00001B60 40 EA 02 00                   ORR.W           R0, R0, R2
.text:00001B64 70 47                         BX              LR
.text:00001B64
.text:00001B64                               ; End of function sub_1B44
.text:00001B64
.text:00001B64                               ; ---------------------------------------------------------------------------
.text:00001B66 00 00                         ALIGN 4
.text:00001B66                               ; } // starts at 1B44
.text:00001B68
.text:00001B68                               ; =============== S U B R O U T I N E =======================================
.text:00001B68
.text:00001B68
.text:00001B68                               ; __int64 __fastcall sub_1B68(int, int)
.text:00001B68                               sub_1B68                      ; DATA XREF: .data.rel.ro:00004E28↓o
.text:00001B68                               ; __unwind {
.text:00001B68 B0 B5                         PUSH            {R4,R5,R7,LR}
.text:00001B6A 0C 46                         MOV             R4, R1
.text:00001B6C 05 46                         MOV             R5, R0
.text:00001B6E 24 F0 0F 00                   BIC.W           R0, R4, #0xF
.text:00001B72 70 28                         CMP             R0, #0x70 ; 'p'
.text:00001B74 13 D0                         BEQ             loc_1B9E
.text:00001B74
.text:00001B76 B0 F5 88 7F                   CMP.W           R0, #0x110
.text:00001B7A 1F D0                         BEQ             loc_1BBC
.text:00001B7A
.text:00001B7C B0 F5 80 7F                   CMP.W           R0, #0x100
.text:00001B80 34 D1                         BNE             loc_1BEC
.text:00001B80
.text:00001B82 95 F8 49 00                   LDRB.W          R0, [R5,#0x49]
.text:00001B86 50 BB                         CBNZ            R0, loc_1BDE
.text:00001B86
.text:00001B88 01 20                         MOVS            R0, #1
.text:00001B8A 85 F8 49 00                   STRB.W          R0, [R5,#0x49]
.text:00001B8E 05 F1 50 00                   ADD.W           R0, R5, #0x50 ; 'P'
.text:00001B92 95 F8 48 10                   LDRB.W          R1, [R5,#0x48]
.text:00001B96 01 B3                         CBZ             R1, loc_1BDA
.text:00001B96
.text:00001B98 FF F7 56 EE                   BLX             sub_1848
.text:00001B98
.text:00001B9C 1F E0                         B               loc_1BDE
.text:00001B9C
.text:00001B9E                               ; ---------------------------------------------------------------------------
.text:00001B9E
.text:00001B9E                               loc_1B9E                      ; CODE XREF: sub_1B68+C↑j
.text:00001B9E 95 F8 4B 00                   LDRB.W          R0, [R5,#0x4B]
.text:00001BA2 30 B9                         CBNZ            R0, loc_1BB2
.text:00001BA2
.text:00001BA4 01 20                         MOVS            R0, #1
.text:00001BA6 85 F8 4B 00                   STRB.W          R0, [R5,#0x4B]
.text:00001BAA 05 F5 AC 70                   ADD.W           R0, R5, #0x158
.text:00001BAE FF F7 54 EE                   BLX             sub_1858
.text:00001BAE
.text:00001BB2
.text:00001BB2                               loc_1BB2                      ; CODE XREF: sub_1B68+3A↑j
.text:00001BB2 05 EB C4 00                   ADD.W           R0, R5, R4,LSL#3
.text:00001BB6 A0 F5 0A 70                   SUB.W           R0, R0, #0x228
.text:00001BBA 14 E0                         B               loc_1BE6
.text:00001BBA
.text:00001BBC                               ; ---------------------------------------------------------------------------
.text:00001BBC
.text:00001BBC                               loc_1BBC                      ; CODE XREF: sub_1B68+12↑j
.text:00001BBC 95 F8 4A 00                   LDRB.W          R0, [R5,#0x4A]
.text:00001BC0 30 B9                         CBNZ            R0, loc_1BD0
.text:00001BC0
.text:00001BC2 01 20                         MOVS            R0, #1
.text:00001BC4 85 F8 4A 00                   STRB.W          R0, [R5,#0x4A]
.text:00001BC8 05 F1 D8 00                   ADD.W           R0, R5, #0xD8
.text:00001BCC FF F7 40 EE                   BLX             sub_1850
.text:00001BCC
.text:00001BD0
.text:00001BD0                               loc_1BD0                      ; CODE XREF: sub_1B68+58↑j
.text:00001BD0 05 EB C4 00                   ADD.W           R0, R5, R4,LSL#3
.text:00001BD4 A0 F5 F5 60                   SUB.W           R0, R0, #0x7A8
.text:00001BD8 05 E0                         B               loc_1BE6
.text:00001BD8
.text:00001BDA                               ; ---------------------------------------------------------------------------
.text:00001BDA
.text:00001BDA                               loc_1BDA                      ; CODE XREF: sub_1B68+2E↑j
.text:00001BDA FF F7 32 EE                   BLX             sub_1840
.text:00001BDA
.text:00001BDE
.text:00001BDE                               loc_1BDE                      ; CODE XREF: sub_1B68+1E↑j
.text:00001BDE                                                             ; sub_1B68+34↑j
.text:00001BDE 05 EB C4 00                   ADD.W           R0, R5, R4,LSL#3
.text:00001BE2 A0 F5 F6 60                   SUB.W           R0, R0, #0x7B0
.text:00001BE2
.text:00001BE6
.text:00001BE6                               loc_1BE6                      ; CODE XREF: sub_1B68+52↑j
.text:00001BE6                                                             ; sub_1B68+70↑j
.text:00001BE6 D0 E9 00 01                   LDRD.W          R0, R1, [R0]
.text:00001BEA B0 BD                         POP             {R4,R5,R7,PC}
.text:00001BEA
.text:00001BEC                               ; ---------------------------------------------------------------------------
.text:00001BEC
.text:00001BEC                               loc_1BEC                      ; CODE XREF: sub_1B68+18↑j
.text:00001BEC 04 48                         LDR             R0, =(aUnwFpregTLibun - 0x1BFA) ; "unw_fpreg_t libunwind::Registers_arm::g"...
.text:00001BEE 40 F2 89 62                   MOVW            R2, #0x689
.text:00001BF2 04 49                         LDR             R1, =(aExternalLibunw_1 - 0x1BFC) ; "external/libunwind_llvm/src/Registers.h"...
.text:00001BF4 04 4B                         LDR             R3, =(aUnknownArmFloa - 0x1BFE) ; "Unknown ARM float register"
.text:00001BF6 78 44                         ADD             R0, PC        ; "unw_fpreg_t libunwind::Registers_arm::g"...
.text:00001BF8 79 44                         ADD             R1, PC        ; "external/libunwind_llvm/src/Registers.h"...
.text:00001BFA 7B 44                         ADD             R3, PC        ; "Unknown ARM float register"
.text:00001BFC 00 F0 26 F9                   BL              sub_1E4C
.text:00001BFC
.text:00001BFC                               ; End of function sub_1B68
.text:00001BFC
.text:00001BFC                               ; ---------------------------------------------------------------------------
.text:00001C00 75 10 00 00                   off_1C00 DCD aUnwFpregTLibun - 0x1BFA
.text:00001C00                                                             ; DATA XREF: sub_1B68:loc_1BEC↑r
.text:00001C00                                                             ; "unw_fpreg_t libunwind::Registers_arm::g"...
.text:00001C04 F6 0F 00 00                   off_1C04 DCD aExternalLibunw_1 - 0x1BFC
.text:00001C04                                                             ; DATA XREF: sub_1B68+8A↑r
.text:00001C04                                                             ; "external/libunwind_llvm/src/Registers.h"...
.text:00001C08 AD 10 00 00                   off_1C08 DCD aUnknownArmFloa - 0x1BFE
.text:00001C08                                                             ; DATA XREF: sub_1B68+8C↑r
.text:00001C08                               ; } // starts at 1B68         ; "Unknown ARM float register"
.text:00001C0C
.text:00001C0C                               ; =============== S U B R O U T I N E =======================================
.text:00001C0C
.text:00001C0C
.text:00001C0C                               ; int __fastcall sub_1C0C(int, int, int, int)
.text:00001C0C                               sub_1C0C                      ; DATA XREF: .data.rel.ro:00004E2C↓o
.text:00001C0C                               ; __unwind {
.text:00001C0C F0 B5                         PUSH            {R4-R7,LR}
.text:00001C0E 81 B0                         SUB             SP, SP, #4
.text:00001C10 0E 46                         MOV             R6, R1
.text:00001C12 07 46                         MOV             R7, R0
.text:00001C14 26 F0 0F 00                   BIC.W           R0, R6, #0xF
.text:00001C18 1D 46                         MOV             R5, R3
.text:00001C1A 14 46                         MOV             R4, R2
.text:00001C1C 70 28                         CMP             R0, #0x70 ; 'p'
.text:00001C1E 13 D0                         BEQ             loc_1C48
.text:00001C1E
.text:00001C20 B0 F5 88 7F                   CMP.W           R0, #0x110
.text:00001C24 24 D0                         BEQ             loc_1C70
.text:00001C24
.text:00001C26 B0 F5 80 7F                   CMP.W           R0, #0x100
.text:00001C2A 45 D1                         BNE             loc_1CB8
.text:00001C2A
.text:00001C2C 97 F8 49 00                   LDRB.W          R0, [R7,#0x49]
.text:00001C30 A0 BB                         CBNZ            R0, loc_1C9C
.text:00001C30
.text:00001C32 01 20                         MOVS            R0, #1
.text:00001C34 87 F8 49 00                   STRB.W          R0, [R7,#0x49]
.text:00001C38 07 F1 50 00                   ADD.W           R0, R7, #0x50 ; 'P'
.text:00001C3C 97 F8 48 10                   LDRB.W          R1, [R7,#0x48]
.text:00001C40 51 B3                         CBZ             R1, loc_1C98
.text:00001C40
.text:00001C42 FF F7 02 EE                   BLX             sub_1848
.text:00001C42
.text:00001C46 29 E0                         B               loc_1C9C
.text:00001C46
.text:00001C48                               ; ---------------------------------------------------------------------------
.text:00001C48
.text:00001C48                               loc_1C48                      ; CODE XREF: sub_1C0C+12↑j
.text:00001C48 97 F8 4B 00                   LDRB.W          R0, [R7,#0x4B]
.text:00001C4C 30 B9                         CBNZ            R0, loc_1C5C
.text:00001C4C
.text:00001C4E 01 20                         MOVS            R0, #1
.text:00001C50 87 F8 4B 00                   STRB.W          R0, [R7,#0x4B]
.text:00001C54 07 F5 AC 70                   ADD.W           R0, R7, #0x158
.text:00001C58 FF F7 FE ED                   BLX             sub_1858
.text:00001C58
.text:00001C5C
.text:00001C5C                               loc_1C5C                      ; CODE XREF: sub_1C0C+40↑j
.text:00001C5C 4F F6 DC 51                   MOVW            R1, #0xFDDC
.text:00001C60 07 EB C6 00                   ADD.W           R0, R7, R6,LSL#3
.text:00001C64 CF F6 FF 71                   MOVT            R1, #0xFFFF
.text:00001C68 45 50                         STR             R5, [R0,R1]
.text:00001C6A 4F F6 D8 51                   MOVW            R1, #0xFDD8
.text:00001C6E 1E E0                         B               loc_1CAE
.text:00001C6E
.text:00001C70                               ; ---------------------------------------------------------------------------
.text:00001C70
.text:00001C70                               loc_1C70                      ; CODE XREF: sub_1C0C+18↑j
.text:00001C70 97 F8 4A 00                   LDRB.W          R0, [R7,#0x4A]
.text:00001C74 30 B9                         CBNZ            R0, loc_1C84
.text:00001C74
.text:00001C76 01 20                         MOVS            R0, #1
.text:00001C78 87 F8 4A 00                   STRB.W          R0, [R7,#0x4A]
.text:00001C7C 07 F1 D8 00                   ADD.W           R0, R7, #0xD8
.text:00001C80 FF F7 E6 ED                   BLX             sub_1850
.text:00001C80
.text:00001C84
.text:00001C84                               loc_1C84                      ; CODE XREF: sub_1C0C+68↑j
.text:00001C84 4F F6 5C 01                   MOVW            R1, #0xF85C
.text:00001C88 07 EB C6 00                   ADD.W           R0, R7, R6,LSL#3
.text:00001C8C CF F6 FF 71                   MOVT            R1, #0xFFFF
.text:00001C90 45 50                         STR             R5, [R0,R1]
.text:00001C92 4F F6 58 01                   MOVW            R1, #0xF858
.text:00001C96 0A E0                         B               loc_1CAE
.text:00001C96
.text:00001C98                               ; ---------------------------------------------------------------------------
.text:00001C98
.text:00001C98                               loc_1C98                      ; CODE XREF: sub_1C0C+34↑j
.text:00001C98 FF F7 D2 ED                   BLX             sub_1840
.text:00001C98
.text:00001C9C
.text:00001C9C                               loc_1C9C                      ; CODE XREF: sub_1C0C+24↑j
.text:00001C9C                                                             ; sub_1C0C+3A↑j
.text:00001C9C 4F F6 54 01                   MOVW            R1, #0xF854
.text:00001CA0 07 EB C6 00                   ADD.W           R0, R7, R6,LSL#3
.text:00001CA4 CF F6 FF 71                   MOVT            R1, #0xFFFF
.text:00001CA8 45 50                         STR             R5, [R0,R1]
.text:00001CAA 4F F6 50 01                   MOVW            R1, #0xF850
.text:00001CAA
.text:00001CAE
.text:00001CAE                               loc_1CAE                      ; CODE XREF: sub_1C0C+62↑j
.text:00001CAE                                                             ; sub_1C0C+8A↑j
.text:00001CAE CF F6 FF 71                   MOVT            R1, #0xFFFF
.text:00001CB2 44 50                         STR             R4, [R0,R1]
.text:00001CB4 01 B0                         ADD             SP, SP, #4
.text:00001CB6 F0 BD                         POP             {R4-R7,PC}
.text:00001CB6
.text:00001CB8                               ; ---------------------------------------------------------------------------
.text:00001CB8
.text:00001CB8                               loc_1CB8                      ; CODE XREF: sub_1C0C+1E↑j
.text:00001CB8 04 48                         LDR             R0, =(aVoidLibunwindR_0 - 0x1CC6) ; "void libunwind::Registers_arm::setFloat"...
.text:00001CBA 40 F2 A4 62                   MOVW            R2, #0x6A4
.text:00001CBE 04 49                         LDR             R1, =(aExternalLibunw_1 - 0x1CC8) ; "external/libunwind_llvm/src/Registers.h"...
.text:00001CC0 04 4B                         LDR             R3, =(aUnknownArmFloa - 0x1CCA) ; "Unknown ARM float register"
.text:00001CC2 78 44                         ADD             R0, PC        ; "void libunwind::Registers_arm::setFloat"...
.text:00001CC4 79 44                         ADD             R1, PC        ; "external/libunwind_llvm/src/Registers.h"...
.text:00001CC6 7B 44                         ADD             R3, PC        ; "Unknown ARM float register"
.text:00001CC8 00 F0 C0 F8                   BL              sub_1E4C
.text:00001CC8
.text:00001CC8                               ; End of function sub_1C0C
.text:00001CC8
.text:00001CC8                               ; ---------------------------------------------------------------------------
.text:00001CCC 00 10 00 00                   off_1CCC DCD aVoidLibunwindR_0 - 0x1CC6
.text:00001CCC                                                             ; DATA XREF: sub_1C0C:loc_1CB8↑r
.text:00001CCC                                                             ; "void libunwind::Registers_arm::setFloat"...
.text:00001CD0 2A 0F 00 00                   off_1CD0 DCD aExternalLibunw_1 - 0x1CC8
.text:00001CD0                                                             ; DATA XREF: sub_1C0C+B2↑r
.text:00001CD0                                                             ; "external/libunwind_llvm/src/Registers.h"...
.text:00001CD4 E1 0F 00 00                   off_1CD4 DCD aUnknownArmFloa - 0x1CCA
.text:00001CD4                                                             ; DATA XREF: sub_1C0C+B4↑r
.text:00001CD4                               ; } // starts at 1C0C         ; "Unknown ARM float register"
.text:00001CD8
.text:00001CD8                               ; =============== S U B R O U T I N E =======================================
.text:00001CD8
.text:00001CD8
.text:00001CD8                               ; int __fastcall sub_1CD8(_DWORD *)
.text:00001CD8                               sub_1CD8                      ; DATA XREF: .data.rel.ro:00004E30↓o
.text:00001CD8                               ; __unwind {
.text:00001CD8 B0 B5                         PUSH            {R4,R5,R7,LR}
.text:00001CDA 04 46                         MOV             R4, R0
.text:00001CDC 94 F8 10 02                   LDRB.W          R0, [R4,#0x210]
.text:00001CE0 68 B9                         CBNZ            R0, loc_1CFE
.text:00001CE0
.text:00001CE2 20 46                         MOV             R0, R4
.text:00001CE4 00 F0 C8 F8                   BL              sub_1E78
.text:00001CE4
.text:00001CE8 01 28                         CMP             R0, #1
.text:00001CEA 18 BF                         IT NE
.text:00001CEC B0 BD                         POPNE           {R4,R5,R7,PC}
.text:00001CEC
.text:00001CEE 20 68                         LDR             R0, [R4]
.text:00001CF0 01 21                         MOVS            R1, #1
.text:00001CF2 42 6B                         LDR             R2, [R0,#0x34]
.text:00001CF4 20 46                         MOV             R0, R4
.text:00001CF6 90 47                         BLX             R2
.text:00001CF6
.text:00001CF8 94 F8 10 02                   LDRB.W          R0, [R4,#0x210]
.text:00001CFC 08 B1                         CBZ             R0, loc_1D02
.text:00001CFC
.text:00001CFE
.text:00001CFE                               loc_1CFE                      ; CODE XREF: sub_1CD8+8↑j
.text:00001CFE 00 20                         MOVS            R0, #0
.text:00001D00 B0 BD                         POP             {R4,R5,R7,PC}
.text:00001D00
.text:00001D02                               ; ---------------------------------------------------------------------------
.text:00001D02
.text:00001D02                               loc_1D02                      ; CODE XREF: sub_1CD8+24↑j
.text:00001D02 D4 F8 F8 01                   LDR.W           R0, [R4,#0x1F8]
.text:00001D06 68 B1                         CBZ             R0, loc_1D24
.text:00001D06
.text:00001D08 20 68                         LDR             R0, [R4]
.text:00001D0A 6F F0 01 01                   MOV             R1, #0xFFFFFFFE
.text:00001D0E D0 E9 03 25                   LDRD.W          R2, R5, [R0,#0xC]
.text:00001D12 20 46                         MOV             R0, R4
.text:00001D14 90 47                         BLX             R2
.text:00001D14
.text:00001D16 D4 F8 F8 11                   LDR.W           R1, [R4,#0x1F8]
.text:00001D1A 0A 18                         ADDS            R2, R1, R0
.text:00001D1C 20 46                         MOV             R0, R4
.text:00001D1E 6F F0 01 01                   MOV             R1, #0xFFFFFFFE
.text:00001D22 A8 47                         BLX             R5
.text:00001D22
.text:00001D24
.text:00001D24                               loc_1D24                      ; CODE XREF: sub_1CD8+2E↑j
.text:00001D24 01 20                         MOVS            R0, #1
.text:00001D26 B0 BD                         POP             {R4,R5,R7,PC}
.text:00001D26                               ; } // starts at 1CD8
.text:00001D26
.text:00001D26                               ; End of function sub_1CD8
.text:00001D26
.text:00001D28
.text:00001D28                               ; =============== S U B R O U T I N E =======================================
.text:00001D28
.text:00001D28
.text:00001D28                               ; _DWORD *__fastcall sub_1D28(int, _DWORD *)
.text:00001D28                               sub_1D28                      ; DATA XREF: .data.rel.ro:00004E34↓o
.text:00001D28                               ; __unwind {
.text:00001D28 10 B5                         PUSH            {R4,LR}
.text:00001D2A 00 F5 F4 70                   ADD.W           R0, R0, #0x1E8
.text:00001D2E B0 E8 1C 50                   LDM.W           R0!, {R2-R4,R12,LR}
.text:00001D32 A1 E8 1C 50                   STM.W           R1!, {R2-R4,R12,LR}
.text:00001D36 90 E8 1C 50                   LDM.W           R0, {R2-R4,R12,LR}
.text:00001D3A 81 E8 1C 50                   STM.W           R1, {R2-R4,R12,LR}
.text:00001D3E 10 BD                         POP             {R4,PC}
.text:00001D3E
.text:00001D3E                               ; End of function sub_1D28
.text:00001D3E
.text:00001D40
.text:00001D40                               ; =============== S U B R O U T I N E =======================================
.text:00001D40
.text:00001D40
.text:00001D40                               ; int __fastcall sub_1D40(int)
.text:00001D40                               sub_1D40                      ; DATA XREF: .data.rel.ro:00004E38↓o
.text:00001D40 10 B5                         PUSH            {R4,LR}
.text:00001D42 00 F1 08 04                   ADD.W           R4, R0, #8
.text:00001D46 20 46                         MOV             R0, R4
.text:00001D48 00 F0 C0 F8                   BL              sub_1ECC
.text:00001D48
.text:00001D4C 20 46                         MOV             R0, R4
.text:00001D4E BD E8 10 40                   POP.W           {R4,LR}
.text:00001D52 00 F0 53 BC                   B.W             sub_25FC
.text:00001D52                               ; } // starts at 1D28
.text:00001D52
.text:00001D52                               ; End of function sub_1D40
.text:00001D52
.text:00001D56
.text:00001D56                               ; =============== S U B R O U T I N E =======================================
.text:00001D56
.text:00001D56
.text:00001D56                               ; int __fastcall sub_1D56(int)
.text:00001D56                               sub_1D56                      ; DATA XREF: .data.rel.ro:00004E3C↓o
.text:00001D56                               ; __unwind {
.text:00001D56 90 F8 11 02                   LDRB.W          R0, [R0,#0x211]
.text:00001D5A 70 47                         BX              LR
.text:00001D5A                               ; } // starts at 1D56
.text:00001D5A
.text:00001D5A                               ; End of function sub_1D56
.text:00001D5A
.text:00001D5C
.text:00001D5C                               ; =============== S U B R O U T I N E =======================================
.text:00001D5C
.text:00001D5C
.text:00001D5C                               ; int __fastcall sub_1D5C(int, int, int, _DWORD *)
.text:00001D5C                               sub_1D5C                      ; DATA XREF: .data.rel.ro:00004E40↓o
.text:00001D5C
.text:00001D5C                               var_30= -0x30
.text:00001D5C                               var_2C= -0x2C
.text:00001D5C                               var_28= -0x28
.text:00001D5C                               var_20= -0x20
.text:00001D5C                               var_1C= -0x1C
.text:00001D5C                               var_18= -0x18
.text:00001D5C
.text:00001D5C                               ; __unwind {
.text:00001D5C F0 B5                         PUSH            {R4-R7,LR}
.text:00001D5E 87 B0                         SUB             SP, SP, #0x1C
.text:00001D60 0E 46                         MOV             R6, R1
.text:00001D62 17 49                         LDR             R1, =(__stack_chk_guard_ptr - 0x1D6C)
.text:00001D64 15 46                         MOV             R5, R2
.text:00001D66 1C 46                         MOV             R4, R3
.text:00001D68 79 44                         ADD             R1, PC        ; __stack_chk_guard_ptr
.text:00001D6A 09 68                         LDR             R1, [R1]      ; __stack_chk_guard
.text:00001D6C 09 68                         LDR             R1, [R1]
.text:00001D6E 06 91                         STR             R1, [SP,#0x30+var_18]
.text:00001D70 01 68                         LDR             R1, [R0]
.text:00001D72 CA 68                         LDR             R2, [R1,#0xC]
.text:00001D74 4F F0 FF 31                   MOV.W           R1, #0xFFFFFFFF
.text:00001D78 90 47                         BLX             R2
.text:00001D78
.text:00001D7A 02 A9                         ADD             R1, SP, #0x30+var_28
.text:00001D7C 07 46                         MOV             R7, R0
.text:00001D7E FE F7 88 EE                   BLX             dladdr
.text:00001D7E
.text:00001D82 88 B1                         CBZ             R0, loc_1DA8
.text:00001D82
.text:00001D84 04 98                         LDR             R0, [SP,#0x30+var_20]
.text:00001D86 78 B1                         CBZ             R0, loc_1DA8
.text:00001D86
.text:00001D88 01 90                         STR             R0, [SP,#0x30+var_2C]
.text:00001D8A 29 46                         MOV             R1, R5
.text:00001D8C 0D 48                         LDR             R0, =(aS - 0x1D98) ; "%s"
.text:00001D8E 00 22                         MOVS            R2, #0
.text:00001D90 4F F0 FF 33                   MOV.W           R3, #0xFFFFFFFF
.text:00001D94 78 44                         ADD             R0, PC        ; "%s"
.text:00001D96 00 90                         STR             R0, [SP,#0x30+var_30]
.text:00001D98 30 46                         MOV             R0, R6
.text:00001D9A FE F7 20 EE                   BLX             __snprintf_chk
.text:00001D9A
.text:00001D9E 05 98                         LDR             R0, [SP,#0x30+var_1C]
.text:00001DA0 38 1A                         SUBS            R0, R7, R0
.text:00001DA2 20 60                         STR             R0, [R4]
.text:00001DA4 01 20                         MOVS            R0, #1
.text:00001DA6 00 E0                         B               loc_1DAA
.text:00001DA6
.text:00001DA8                               ; ---------------------------------------------------------------------------
.text:00001DA8
.text:00001DA8                               loc_1DA8                      ; CODE XREF: sub_1D5C+26↑j
.text:00001DA8                                                             ; sub_1D5C+2A↑j
.text:00001DA8 00 20                         MOVS            R0, #0
.text:00001DA8
.text:00001DAA
.text:00001DAA                               loc_1DAA                      ; CODE XREF: sub_1D5C+4A↑j
.text:00001DAA 07 49                         LDR             R1, =(__stack_chk_guard_ptr - 0x1DB2)
.text:00001DAC 06 9A                         LDR             R2, [SP,#0x30+var_18]
.text:00001DAE 79 44                         ADD             R1, PC        ; __stack_chk_guard_ptr
.text:00001DB0 09 68                         LDR             R1, [R1]      ; __stack_chk_guard
.text:00001DB2 09 68                         LDR             R1, [R1]
.text:00001DB4 89 1A                         SUBS            R1, R1, R2
.text:00001DB6 04 BF                         ITT EQ
.text:00001DB8 07 B0                         ADDEQ           SP, SP, #0x1C
.text:00001DBA F0 BD                         POPEQ           {R4-R7,PC}
.text:00001DBA
.text:00001DBC FE F7 44 EE                   BLX             __stack_chk_fail
.text:00001DBC
.text:00001DBC                               ; End of function sub_1D5C
.text:00001DBC
.text:00001DBC                               ; ---------------------------------------------------------------------------
.text:00001DC0 F4 31 00 00                   off_1DC0 DCD __stack_chk_guard_ptr - 0x1D6C
.text:00001DC0                                                             ; DATA XREF: sub_1D5C+6↑r
.text:00001DC4 70 0F 00 00                   off_1DC4 DCD aS - 0x1D98      ; DATA XREF: sub_1D5C+30↑r
.text:00001DC4                                                             ; "%s"
.text:00001DC8 AE 31 00 00                   off_1DC8 DCD __stack_chk_guard_ptr - 0x1DB2
.text:00001DC8                                                             ; DATA XREF: sub_1D5C:loc_1DAA↑r
.text:00001DC8                               ; } // starts at 1D5C
.text:00001DCC
.text:00001DCC                               ; =============== S U B R O U T I N E =======================================
.text:00001DCC
.text:00001DCC
.text:00001DCC                               ; int __fastcall sub_1DCC(int *, int)
.text:00001DCC                               sub_1DCC                      ; CODE XREF: sub_18B0+34↑p
.text:00001DCC                                                             ; DATA XREF: .data.rel.ro:00004E44↓o
.text:00001DCC
.text:00001DCC                               var_20= -0x20
.text:00001DCC                               var_1C= -0x1C
.text:00001DCC                               var_18= -0x18
.text:00001DCC                               var_14= -0x14
.text:00001DCC
.text:00001DCC                               ; __unwind {
.text:00001DCC 70 B5                         PUSH            {R4-R6,LR}
.text:00001DCE 84 B0                         SUB             SP, SP, #0x10
.text:00001DD0 04 46                         MOV             R4, R0
.text:00001DD2 18 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x1DDE)
.text:00001DD4 0E 46                         MOV             R6, R1
.text:00001DD6 4F F0 FF 31                   MOV.W           R1, #0xFFFFFFFF
.text:00001DDA 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00001DDC 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00001DDE 00 68                         LDR             R0, [R0]
.text:00001DE0 03 90                         STR             R0, [SP,#0x20+var_14]
.text:00001DE2 20 68                         LDR             R0, [R4]
.text:00001DE4 C2 68                         LDR             R2, [R0,#0xC]
.text:00001DE6 20 46                         MOV             R0, R4
.text:00001DE8 90 47                         BLX             R2
.text:00001DE8
.text:00001DEA 00 21                         MOVS            R1, #0
.text:00001DEC 20 F0 01 05                   BIC.W           R5, R0, #1
.text:00001DF0 02 91                         STR             R1, [SP,#0x20+var_18]
.text:00001DF2 00 2E                         CMP             R6, #0
.text:00001DF4 18 BF                         IT NE
.text:00001DF6 01 3D                         SUBNE           R5, #1
.text:00001DF8 02 A9                         ADD             R1, SP, #0x20+var_18
.text:00001DFA 28 46                         MOV             R0, R5
.text:00001DFC FE F7 4E EE                   BLX             __gnu_Unwind_Find_exidx
.text:00001DFC
.text:00001E00 02 99                         LDR             R1, [SP,#0x20+var_18]
.text:00001E02 00 28                         CMP             R0, #0
.text:00001E04 00 90                         STR             R0, [SP,#0x20+var_20]
.text:00001E06 01 91                         STR             R1, [SP,#0x20+var_1C]
.text:00001E08 06 D0                         BEQ             loc_1E18
.text:00001E08
.text:00001E0A 29 B1                         CBZ             R1, loc_1E18
.text:00001E0A
.text:00001E0C 6A 46                         MOV             R2, SP
.text:00001E0E 20 46                         MOV             R0, R4
.text:00001E10 29 46                         MOV             R1, R5
.text:00001E12 00 F0 87 F8                   BL              sub_1F24
.text:00001E12
.text:00001E16 10 B9                         CBNZ            R0, loc_1E1E
.text:00001E16
.text:00001E18
.text:00001E18                               loc_1E18                      ; CODE XREF: sub_1DCC+3C↑j
.text:00001E18                                                             ; sub_1DCC+3E↑j
.text:00001E18 01 20                         MOVS            R0, #1
.text:00001E1A 84 F8 10 02                   STRB.W          R0, [R4,#0x210]
.text:00001E1A
.text:00001E1E
.text:00001E1E                               loc_1E1E                      ; CODE XREF: sub_1DCC+4A↑j
.text:00001E1E 06 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x1E26)
.text:00001E20 03 99                         LDR             R1, [SP,#0x20+var_14]
.text:00001E22 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00001E24 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00001E26 00 68                         LDR             R0, [R0]
.text:00001E28 40 1A                         SUBS            R0, R0, R1
.text:00001E2A 04 BF                         ITT EQ
.text:00001E2C 04 B0                         ADDEQ           SP, SP, #0x10
.text:00001E2E 70 BD                         POPEQ           {R4-R6,PC}
.text:00001E2E
.text:00001E30 FE F7 0A EE                   BLX             __stack_chk_fail
.text:00001E30
.text:00001E30                               ; End of function sub_1DCC
.text:00001E30
.text:00001E30                               ; ---------------------------------------------------------------------------
.text:00001E34 82 31 00 00                   off_1E34 DCD __stack_chk_guard_ptr - 0x1DDE
.text:00001E34                                                             ; DATA XREF: sub_1DCC+6↑r
.text:00001E38 3A 31 00 00                   off_1E38 DCD __stack_chk_guard_ptr - 0x1E26
.text:00001E38                                                             ; DATA XREF: sub_1DCC:loc_1E1E↑r
.text:00001E38                               ; } // starts at 1DCC
.text:00001E3C                               ; ---------------------------------------------------------------------------
.text:00001E3C
.text:00001E3C                               loc_1E3C                      ; DATA XREF: .data.rel.ro:00004E48↓o
.text:00001E3C                               ; __unwind {
.text:00001E3C 08 30                         ADDS            R0, #8
.text:00001E3E 00 F0 67 B9                   B.W             loc_2110
.text:00001E3E
.text:00001E42
.text:00001E42                               ; =============== S U B R O U T I N E =======================================
.text:00001E42
.text:00001E42
.text:00001E42                               ; int __fastcall sub_1E42(int result)
.text:00001E42                               sub_1E42                      ; DATA XREF: .data.rel.ro:00004E4C↓o
.text:00001E42 01 21                         MOVS            R1, #1
.text:00001E44 80 F8 48 10                   STRB.W          R1, [R0,#0x48]
.text:00001E48 70 47                         BX              LR
.text:00001E48
.text:00001E48                               ; End of function sub_1E42
.text:00001E48
.text:00001E48                               ; ---------------------------------------------------------------------------
.text:00001E4A 00 00                         ALIGN 4
.text:00001E4A                               ; } // starts at 1E3C
.text:00001E4C
.text:00001E4C                               ; =============== S U B R O U T I N E =======================================
.text:00001E4C
.text:00001E4C                               ; Attributes: noreturn
.text:00001E4C
.text:00001E4C                               ; void __fastcall __noreturn sub_1E4C(const char *, const char *, int, const char *)
.text:00001E4C                               sub_1E4C                      ; CODE XREF: sub_1A2C+7A↑p
.text:00001E4C                                                             ; sub_1AB8+7A↑p
.text:00001E4C                                                             ; sub_1B68+94↑p
.text:00001E4C                                                             ; sub_1C0C+BC↑p
.text:00001E4C                                                             ; sub_1F24+160↓p
.text:00001E4C                                                             ; sub_1F24+174↓p
.text:00001E4C
.text:00001E4C                               var_10= -0x10
.text:00001E4C
.text:00001E4C                               ; __unwind {
.text:00001E4C 80 B5                         PUSH            {R7,LR}
.text:00001E4E 82 B0                         SUB             SP, SP, #8
.text:00001E50 86 46                         MOV             LR, R0
.text:00001E52 07 48                         LDR             R0, =(stderr_ptr - 0x1E5C)
.text:00001E54 8C 46                         MOV             R12, R1
.text:00001E56 07 49                         LDR             R1, =(aLibunwindSSDS - 0x1E60) ; "libunwind: %s %s:%d - %s\n"
.text:00001E58 78 44                         ADD             R0, PC        ; stderr_ptr
.text:00001E5A 00 68                         LDR             R0, [R0]      ; stderr
.text:00001E5C 79 44                         ADD             R1, PC        ; "libunwind: %s %s:%d - %s\n"
.text:00001E5E 00 68                         LDR             R0, [R0]      ; stream
.text:00001E60 CD E9 00 23                   STRD.W          R2, R3, [SP,#0x10+var_10]
.text:00001E64 72 46                         MOV             R2, LR
.text:00001E66 63 46                         MOV             R3, R12
.text:00001E68 FE F7 06 EE                   BLX             fprintf
.text:00001E68
.text:00001E6C FE F7 FE ED                   BLX             abort
.text:00001E6C
.text:00001E6C                               ; End of function sub_1E4C
.text:00001E6C
.text:00001E6C                               ; ---------------------------------------------------------------------------
.text:00001E70 0C 31 00 00                   off_1E70 DCD stderr_ptr - 0x1E5C
.text:00001E70                                                             ; DATA XREF: sub_1E4C+6↑r
.text:00001E74 90 0C 00 00                   off_1E74 DCD aLibunwindSSDS - 0x1E60
.text:00001E74                                                             ; DATA XREF: sub_1E4C+A↑r
.text:00001E74                               ; } // starts at 1E4C         ; "libunwind: %s %s:%d - %s\n"
.text:00001E78
.text:00001E78                               ; =============== S U B R O U T I N E =======================================
.text:00001E78
.text:00001E78
.text:00001E78                               ; int __fastcall sub_1E78(int)
.text:00001E78                               sub_1E78                      ; CODE XREF: sub_1CD8+C↑p
.text:00001E78
.text:00001E78                               var_1C= -0x1C
.text:00001E78                               var_18= -0x18
.text:00001E78                               var_14= -0x14
.text:00001E78
.text:00001E78                               ; __unwind {
.text:00001E78 B0 B5                         PUSH            {R4,R5,R7,LR}
.text:00001E7A 84 B0                         SUB             SP, SP, #0x10
.text:00001E7C 05 46                         MOV             R5, R0
.text:00001E7E 11 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x1E88)
.text:00001E80 00 24                         MOVS            R4, #0
.text:00001E82 01 A9                         ADD             R1, SP, #0x20+var_1C
.text:00001E84 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00001E86 02 AA                         ADD             R2, SP, #0x20+var_18
.text:00001E88 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00001E8A 00 68                         LDR             R0, [R0]
.text:00001E8C 03 90                         STR             R0, [SP,#0x20+var_14]
.text:00001E8E CD E9 01 44                   STRD.W          R4, R4, [SP,#0x20+var_1C]
.text:00001E92 D5 F8 08 02                   LDR.W           R0, [R5,#0x208]
.text:00001E96 FF F7 89 F8                   BL              sub_FAC
.text:00001E96
.text:00001E9A DD E9 01 23                   LDRD.W          R2, R3, [SP,#0x20+var_1C]
.text:00001E9E 01 46                         MOV             R1, R0
.text:00001EA0 28 46                         MOV             R0, R5
.text:00001EA2 FF F7 AD F8                   BL              sub_1000
.text:00001EA2
.text:00001EA6 08 28                         CMP             R0, #8
.text:00001EA8 07 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x1EB4)
.text:00001EAA 08 BF                         IT EQ
.text:00001EAC 01 24                         MOVEQ           R4, #1
.text:00001EAE 03 99                         LDR             R1, [SP,#0x20+var_14]
.text:00001EB0 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00001EB2 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00001EB4 00 68                         LDR             R0, [R0]
.text:00001EB6 40 1A                         SUBS            R0, R0, R1
.text:00001EB8 02 BF                         ITTT EQ
.text:00001EBA 20 46                         MOVEQ           R0, R4
.text:00001EBC 04 B0                         ADDEQ           SP, SP, #0x10
.text:00001EBE B0 BD                         POPEQ           {R4,R5,R7,PC}
.text:00001EBE
.text:00001EC0 FE F7 C2 ED                   BLX             __stack_chk_fail
.text:00001EC0
.text:00001EC0                               ; End of function sub_1E78
.text:00001EC0
.text:00001EC0                               ; ---------------------------------------------------------------------------
.text:00001EC4 D8 30 00 00                   off_1EC4 DCD __stack_chk_guard_ptr - 0x1E88
.text:00001EC4                                                             ; DATA XREF: sub_1E78+6↑r
.text:00001EC8 AC 30 00 00                   off_1EC8 DCD __stack_chk_guard_ptr - 0x1EB4
.text:00001EC8                                                             ; DATA XREF: sub_1E78+30↑r
.text:00001EC8                               ; } // starts at 1E78
.text:00001ECC
.text:00001ECC                               ; =============== S U B R O U T I N E =======================================
.text:00001ECC
.text:00001ECC
.text:00001ECC                               ; _DWORD *__fastcall sub_1ECC(int)
.text:00001ECC                               sub_1ECC                      ; CODE XREF: sub_1D40+8↑p
.text:00001ECC                               ; __unwind {
.text:00001ECC 10 B5                         PUSH            {R4,LR}
.text:00001ECE 04 46                         MOV             R4, R0
.text:00001ED0 94 F8 41 00                   LDRB.W          R0, [R4,#0x41]
.text:00001ED4 48 B1                         CBZ             R0, loc_1EEA
.text:00001ED4
.text:00001ED6 94 F8 40 10                   LDRB.W          R1, [R4,#0x40]
.text:00001EDA 04 F1 48 00                   ADD.W           R0, R4, #0x48 ; 'H'
.text:00001EDE 11 B1                         CBZ             R1, loc_1EE6
.text:00001EDE
.text:00001EE0 00 F0 48 EB                   BLX             sub_2574
.text:00001EE0
.text:00001EE4 01 E0                         B               loc_1EEA
.text:00001EE4
.text:00001EE6                               ; ---------------------------------------------------------------------------
.text:00001EE6
.text:00001EE6                               loc_1EE6                      ; CODE XREF: sub_1ECC+12↑j
.text:00001EE6 00 F0 42 EB                   BLX             sub_256C
.text:00001EE6
.text:00001EEA
.text:00001EEA                               loc_1EEA                      ; CODE XREF: sub_1ECC+8↑j
.text:00001EEA                                                             ; sub_1ECC+18↑j
.text:00001EEA B4 F8 42 00                   LDRH.W          R0, [R4,#0x42]
.text:00001EEE 10 F0 FF 0F                   TST.W           R0, #0xFF
.text:00001EF2 06 D0                         BEQ             loc_1F02
.text:00001EF2
.text:00001EF4 04 F1 D0 00                   ADD.W           R0, R4, #0xD0
.text:00001EF8 00 F0 40 EB                   BLX             sub_257C
.text:00001EF8
.text:00001EFC 94 F8 43 00                   LDRB.W          R0, [R4,#0x43]
.text:00001F00 00 E0                         B               loc_1F04
.text:00001F00
.text:00001F02                               ; ---------------------------------------------------------------------------
.text:00001F02
.text:00001F02                               loc_1F02                      ; CODE XREF: sub_1ECC+26↑j
.text:00001F02 00 0A                         LSRS            R0, R0, #8
.text:00001F02
.text:00001F04
.text:00001F04                               loc_1F04                      ; CODE XREF: sub_1ECC+34↑j
.text:00001F04 18 B1                         CBZ             R0, loc_1F0E
.text:00001F04
.text:00001F06 04 F5 A8 70                   ADD.W           R0, R4, #0x150
.text:00001F0A 00 F0 3C EB                   BLX             sub_2584
.text:00001F0A
.text:00001F0E
.text:00001F0E                               loc_1F0E                      ; CODE XREF: sub_1ECC:loc_1F04↑j
.text:00001F0E 94 F8 44 00                   LDRB.W          R0, [R4,#0x44]
.text:00001F12 28 B1                         CBZ             R0, locret_1F20
.text:00001F12
.text:00001F14 04 F5 E8 70                   ADD.W           R0, R4, #0x1D0
.text:00001F18 BD E8 10 40                   POP.W           {R4,LR}
.text:00001F1C 00 F0 76 BB                   B.W             sub_260C
.text:00001F1C
.text:00001F20                               ; ---------------------------------------------------------------------------
.text:00001F20
.text:00001F20                               locret_1F20                   ; CODE XREF: sub_1ECC+46↑j
.text:00001F20 10 BD                         POP             {R4,PC}
.text:00001F20
.text:00001F20                               ; End of function sub_1ECC
.text:00001F20
.text:00001F20                               ; ---------------------------------------------------------------------------
.text:00001F22 00 00                         ALIGN 4
.text:00001F22                               ; } // starts at 1ECC
.text:00001F24
.text:00001F24                               ; =============== S U B R O U T I N E =======================================
.text:00001F24
.text:00001F24
.text:00001F24                               ; int __fastcall sub_1F24(int *, int, _DWORD *)
.text:00001F24                               sub_1F24                      ; CODE XREF: sub_1DCC+46↑p
.text:00001F24
.text:00001F24                               var_48= -0x48
.text:00001F24                               var_40= -0x40
.text:00001F24                               var_38= -0x38
.text:00001F24                               var_34= -0x34
.text:00001F24                               var_2C= -0x2C
.text:00001F24                               var_28= -0x28
.text:00001F24                               var_24= -0x24
.text:00001F24                               var_20= -0x20
.text:00001F24
.text:00001F24                               ; __unwind {
.text:00001F24 2D E9 F0 43                   PUSH.W          {R4-R9,LR}
.text:00001F28 8B B0                         SUB             SP, SP, #0x2C
.text:00001F2A 04 46                         MOV             R4, R0
.text:00001F2C 5B 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x1F36)
.text:00001F2E 13 46                         MOV             R3, R2
.text:00001F30 00 25                         MOVS            R5, #0
.text:00001F32 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00001F34 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00001F36 00 68                         LDR             R0, [R0]
.text:00001F38 0A 90                         STR             R0, [SP,#0x48+var_20]
.text:00001F3A 09 A8                         ADD             R0, SP, #0x48+var_24
.text:00001F3C 08 91                         STR             R1, [SP,#0x48+var_28]
.text:00001F3E 08 A9                         ADD             R1, SP, #0x48+var_28
.text:00001F40 5E 68                         LDR             R6, [R3,#4]
.text:00001F42 62 68                         LDR             R2, [R4,#4]
.text:00001F44 CD E9 00 62                   STRD.W          R6, R2, [SP,#0x48+var_48]
.text:00001F48 CD E9 02 31                   STRD.W          R3, R1, [SP,#0x48+var_40]
.text:00001F4C 00 21                         MOVS            R1, #0
.text:00001F4E 04 90                         STR             R0, [SP,#0x48+var_38]
.text:00001F50 05 A8                         ADD             R0, SP, #0x48+var_34
.text:00001F52 00 F0 B9 F8                   BL              sub_20C8
.text:00001F52
.text:00001F56 05 98                         LDR             R0, [SP,#0x48+var_34]
.text:00001F58 00 28                         CMP             R0, #0
.text:00001F5A 7E D0                         BEQ             loc_205A
.text:00001F5A
.text:00001F5C B0 42                         CMP             R0, R6
.text:00001F5E 7C D0                         BEQ             loc_205A
.text:00001F5E
.text:00001F60 07 99                         LDR             R1, [SP,#0x48+var_2C]
.text:00001F62 09 68                         LDR             R1, [R1]
.text:00001F64 01 EB C0 01                   ADD.W           R1, R1, R0,LSL#3
.text:00001F68 08 46                         MOV             R0, R1
.text:00001F6A 0A 46                         MOV             R2, R1
.text:00001F6C 50 F8 04 59                   LDR.W           R5, [R0],#-4
.text:00001F70 52 F8 08 8D                   LDR.W           R8, [R2,#-8]!
.text:00001F74 10 B1                         CBZ             R0, loc_1F7C
.text:00001F74
.text:00001F76 07 68                         LDR             R7, [R0]
.text:00001F78 01 2F                         CMP             R7, #1
.text:00001F7A 01 D1                         BNE             loc_1F80
.text:00001F7A
.text:00001F7C
.text:00001F7C                               loc_1F7C                      ; CODE XREF: sub_1F24+50↑j
.text:00001F7C 00 25                         MOVS            R5, #0
.text:00001F7E 6C E0                         B               loc_205A
.text:00001F7E
.text:00001F80                               ; ---------------------------------------------------------------------------
.text:00001F80
.text:00001F80                               loc_1F80                      ; CODE XREF: sub_1F24+56↑j
.text:00001F80 00 2F                         CMP             R7, #0
.text:00001F82 1A DB                         BLT             loc_1FBA
.text:00001F82
.text:00001F84 4F F0 00 4C                   MOV.W           R12, #0x80000000
.text:00001F88 0C EA 47 06                   AND.W           R6, R12, R7,LSL#1
.text:00001F8C 3E 43                         ORRS            R6, R7
.text:00001F8E 37 58                         LDR             R7, [R6,R0]
.text:00001F90 30 44                         ADD             R0, R6
.text:00001F92 B7 F1 FF 3F                   CMP.W           R7, #0xFFFFFFFF
.text:00001F96 13 DD                         BLE             loc_1FC0
.text:00001F96
.text:00001F98 03 46                         MOV             R3, R0
.text:00001F9A 0C EA 47 06                   AND.W           R6, R12, R7,LSL#1
.text:00001F9E 53 F8 04 9F                   LDR.W           R9, [R3,#4]!
.text:00001FA2 4F F0 00 0C                   MOV.W           R12, #0
.text:00001FA6 37 43                         ORRS            R7, R6
.text:00001FA8 07 EB 00 0E                   ADD.W           LR, R7, R0
.text:00001FAC 4F EA 19 67                   MOV.W           R7, R9,LSR#24
.text:00001FB0 03 EB 87 03                   ADD.W           R3, R3, R7,LSL#2
.text:00001FB4 03 F1 04 09                   ADD.W           R9, R3, #4
.text:00001FB8 17 E0                         B               loc_1FEA
.text:00001FB8
.text:00001FBA                               ; ---------------------------------------------------------------------------
.text:00001FBA
.text:00001FBA                               loc_1FBA                      ; CODE XREF: sub_1F24+5E↑j
.text:00001FBA 4F F0 01 0C                   MOV.W           R12, #1
.text:00001FBE 01 E0                         B               loc_1FC4
.text:00001FBE
.text:00001FC0                               ; ---------------------------------------------------------------------------
.text:00001FC0
.text:00001FC0                               loc_1FC0                      ; CODE XREF: sub_1F24+72↑j
.text:00001FC0 4F F0 00 0C                   MOV.W           R12, #0
.text:00001FC0
.text:00001FC4
.text:00001FC4                               loc_1FC4                      ; CODE XREF: sub_1F24+9A↑j
.text:00001FC4 C7 F3 03 66                   UBFX.W          R6, R7, #0x18, #4
.text:00001FC8 02 2E                         CMP             R6, #2
.text:00001FCA 10 D0                         BEQ             loc_1FEE
.text:00001FCA
.text:00001FCC 01 2E                         CMP             R6, #1
.text:00001FCE 14 D0                         BEQ             loc_1FFA
.text:00001FCE
.text:00001FD0 00 2E                         CMP             R6, #0
.text:00001FD2 4F D1                         BNE             loc_2074
.text:00001FD2
.text:00001FD4 37 4E                         LDR             R6, =(off_4F74 - 0x1FE8)
.text:00001FD6 00 F1 04 09                   ADD.W           R9, R0, #4
.text:00001FDA BC F1 00 0F                   CMP.W           R12, #0
.text:00001FDE 18 BF                         IT NE
.text:00001FE0 4F F0 00 09                   MOVNE.W         R9, #0
.text:00001FE4 7E 44                         ADD             R6, PC        ; off_4F74
.text:00001FE6 D6 F8 00 E0                   LDR.W           LR, [R6]      ; sub_151C
.text:00001FE6
.text:00001FEA
.text:00001FEA                               loc_1FEA                      ; CODE XREF: sub_1F24+94↑j
.text:00001FEA 00 26                         MOVS            R6, #0
.text:00001FEC 18 E0                         B               loc_2020
.text:00001FEC
.text:00001FEE                               ; ---------------------------------------------------------------------------
.text:00001FEE
.text:00001FEE                               loc_1FEE                      ; CODE XREF: sub_1F24+A6↑j
.text:00001FEE 2C 4E                         LDR             R6, =(off_4F6C - 0x1FF4)
.text:00001FF0 7E 44                         ADD             R6, PC        ; off_4F6C
.text:00001FF2 D6 F8 00 E0                   LDR.W           LR, [R6]      ; sub_1588
.text:00001FF6 01 26                         MOVS            R6, #1
.text:00001FF8 04 E0                         B               loc_2004
.text:00001FF8
.text:00001FFA                               ; ---------------------------------------------------------------------------
.text:00001FFA
.text:00001FFA                               loc_1FFA                      ; CODE XREF: sub_1F24+AA↑j
.text:00001FFA 2A 4E                         LDR             R6, =(off_4F70 - 0x2000)
.text:00001FFC 7E 44                         ADD             R6, PC        ; off_4F70
.text:00001FFE D6 F8 00 E0                   LDR.W           LR, [R6]      ; sub_1580
.text:00002002 00 26                         MOVS            R6, #0
.text:00002002
.text:00002004
.text:00002004                               loc_2004                      ; CODE XREF: sub_1F24+D4↑j
.text:00002004 C7 F3 07 43                   UBFX.W          R3, R7, #0x10, #8
.text:00002008 1F 46                         MOV             R7, R3
.text:0000200A 00 2B                         CMP             R3, #0
.text:0000200C 18 BF                         IT NE
.text:0000200E 01 27                         MOVNE           R7, #1
.text:00002010 07 EA 0C 07                   AND.W           R7, R7, R12
.text:00002014 01 2F                         CMP             R7, #1
.text:00002016 37 D0                         BEQ             loc_2088
.text:00002016
.text:00002018 00 EB 83 03                   ADD.W           R3, R0, R3,LSL#2
.text:0000201C 03 F1 04 09                   ADD.W           R9, R3, #4
.text:0000201C
.text:00002020
.text:00002020                               loc_2020                      ; CODE XREF: sub_1F24+C8↑j
.text:00002020 4F F0 00 43                   MOV.W           R3, #0x80000000
.text:00002024 00 2E                         CMP             R6, #0
.text:00002026 03 EA 45 07                   AND.W           R7, R3, R5,LSL#1
.text:0000202A 03 EA 48 03                   AND.W           R3, R3, R8,LSL#1
.text:0000202E 45 EA 07 05                   ORR.W           R5, R5, R7
.text:00002032 43 EA 08 03                   ORR.W           R3, R3, R8
.text:00002036 29 44                         ADD             R1, R5
.text:00002038 1A 44                         ADD             R2, R3
.text:0000203A C4 E9 7A 21                   STRD.W          R2, R1, [R4,#0x1E8]
.text:0000203E 4F F0 01 05                   MOV.W           R5, #1
.text:00002042 C4 F8 08 02                   STR.W           R0, [R4,#0x208]
.text:00002046 C4 E9 7C 9E                   STRD.W          R9, LR, [R4,#0x1F0]
.text:0000204A 18 BF                         IT NE
.text:0000204C 02 26                         MOVNE           R6, #2
.text:0000204E BC F1 00 0F                   CMP.W           R12, #0
.text:00002052 18 BF                         IT NE
.text:00002054 01 26                         MOVNE           R6, #1
.text:00002056 C4 F8 FC 61                   STR.W           R6, [R4,#0x1FC]
.text:00002056
.text:0000205A
.text:0000205A                               loc_205A                      ; CODE XREF: sub_1F24+36↑j
.text:0000205A                                                             ; sub_1F24+3A↑j
.text:0000205A                                                             ; sub_1F24+5A↑j
.text:0000205A 1A 48                         LDR             R0, =(__stack_chk_guard_ptr - 0x2062)
.text:0000205C 0A 99                         LDR             R1, [SP,#0x48+var_20]
.text:0000205E 78 44                         ADD             R0, PC        ; __stack_chk_guard_ptr
.text:00002060 00 68                         LDR             R0, [R0]      ; __stack_chk_guard
.text:00002062 00 68                         LDR             R0, [R0]
.text:00002064 40 1A                         SUBS            R0, R0, R1
.text:00002066 02 BF                         ITTT EQ
.text:00002068 28 46                         MOVEQ           R0, R5
.text:0000206A 0B B0                         ADDEQ           SP, SP, #0x2C ; ','
.text:0000206C BD E8 F0 83                   POPEQ.W         {R4-R9,PC}
.text:0000206C
.text:00002070 FE F7 EA EC                   BLX             __stack_chk_fail
.text:00002070
.text:00002074                               ; ---------------------------------------------------------------------------
.text:00002074
.text:00002074                               loc_2074                      ; CODE XREF: sub_1F24+AE↑j
.text:00002074 10 48                         LDR             R0, =(aBoolLibunwindU - 0x2082) ; "bool libunwind::UnwindCursor<libunwind:"...
.text:00002076 4F F4 42 72                   MOV.W           R2, #0x308
.text:0000207A 10 49                         LDR             R1, =(aExternalLibunw_0 - 0x2084) ; "external/libunwind_llvm/src/UnwindCurso"...
.text:0000207C 10 4B                         LDR             R3, =(aUnknownPersona - 0x2086) ; "unknown personality routine"
.text:0000207E 78 44                         ADD             R0, PC        ; "bool libunwind::UnwindCursor<libunwind:"...
.text:00002080 79 44                         ADD             R1, PC        ; "external/libunwind_llvm/src/UnwindCurso"...
.text:00002082 7B 44                         ADD             R3, PC        ; "unknown personality routine"
.text:00002084 FF F7 E2 FE                   BL              sub_1E4C
.text:00002084
.text:00002088                               ; ---------------------------------------------------------------------------
.text:00002088
.text:00002088                               loc_2088                      ; CODE XREF: sub_1F24+F2↑j
.text:00002088 07 48                         LDR             R0, =(aBoolLibunwindU - 0x2096) ; "bool libunwind::UnwindCursor<libunwind:"...
.text:0000208A 40 F2 0F 32                   MOVW            R2, #0x30F
.text:0000208E 07 49                         LDR             R1, =(aExternalLibunw_0 - 0x2098) ; "external/libunwind_llvm/src/UnwindCurso"...
.text:00002090 07 4B                         LDR             R3, =(aIndexInlinedTa - 0x209A) ; "index inlined table detected but pr fun"...
.text:00002092 78 44                         ADD             R0, PC        ; "bool libunwind::UnwindCursor<libunwind:"...
.text:00002094 79 44                         ADD             R1, PC        ; "external/libunwind_llvm/src/UnwindCurso"...
.text:00002096 7B 44                         ADD             R3, PC        ; "index inlined table detected but pr fun"...
.text:00002098 FF F7 D8 FE                   BL              sub_1E4C
.text:00002098
.text:00002098                               ; End of function sub_1F24
.text:00002098
.text:00002098                               ; ---------------------------------------------------------------------------
.text:0000209C 2A 30 00 00                   off_209C DCD __stack_chk_guard_ptr - 0x1F36
.text:0000209C                                                             ; DATA XREF: sub_1F24+8↑r
.text:000020A0 78 2F 00 00                   off_20A0 DCD off_4F6C - 0x1FF4
.text:000020A0                                                             ; DATA XREF: sub_1F24:loc_1FEE↑r
.text:000020A4 70 2F 00 00                   off_20A4 DCD off_4F70 - 0x2000
.text:000020A4                                                             ; DATA XREF: sub_1F24:loc_1FFA↑r
.text:000020A8 75 0C 00 00                   off_20A8 DCD aBoolLibunwindU - 0x2096
.text:000020A8                                                             ; DATA XREF: sub_1F24:loc_2088↑r
.text:000020A8                                                             ; "bool libunwind::UnwindCursor<libunwind:"...
.text:000020AC F9 0A 00 00                   off_20AC DCD aExternalLibunw_0 - 0x2098
.text:000020AC                                                             ; DATA XREF: sub_1F24+16A↑r
.text:000020AC                                                             ; "external/libunwind_llvm/src/UnwindCurso"...
.text:000020B0 6B 0D 00 00                   off_20B0 DCD aIndexInlinedTa - 0x209A
.text:000020B0                                                             ; DATA XREF: sub_1F24+16C↑r
.text:000020B0                                                             ; "index inlined table detected but pr fun"...
.text:000020B4 8C 2F 00 00                   off_20B4 DCD off_4F74 - 0x1FE8
.text:000020B4                                                             ; DATA XREF: sub_1F24+B0↑r
.text:000020B8 89 0C 00 00                   off_20B8 DCD aBoolLibunwindU - 0x2082
.text:000020B8                                                             ; DATA XREF: sub_1F24:loc_2074↑r
.text:000020B8                                                             ; "bool libunwind::UnwindCursor<libunwind:"...
.text:000020BC 0D 0B 00 00                   off_20BC DCD aExternalLibunw_0 - 0x2084
.text:000020BC                                                             ; DATA XREF: sub_1F24+156↑r
.text:000020BC                                                             ; "external/libunwind_llvm/src/UnwindCurso"...
.text:000020C0 63 0D 00 00                   off_20C0 DCD aUnknownPersona - 0x2086
.text:000020C0                                                             ; DATA XREF: sub_1F24+158↑r
.text:000020C0                                                             ; "unknown personality routine"
.text:000020C4 FE 2E 00 00                   off_20C4 DCD __stack_chk_guard_ptr - 0x2062
.text:000020C4                                                             ; DATA XREF: sub_1F24:loc_205A↑r
.text:000020C4                               ; } // starts at 1F24
.text:000020C8
.text:000020C8                               ; =============== S U B R O U T I N E =======================================
.text:000020C8
.text:000020C8
.text:000020C8                               ; _DWORD *__fastcall sub_20C8(_DWORD *, int, int, _DWORD *, int, int, int, _DWORD *)
.text:000020C8                               sub_20C8                      ; CODE XREF: sub_1F24+2E↑p
.text:000020C8
.text:000020C8                               arg_0=  0
.text:000020C8                               arg_C=  0xC
.text:000020C8
.text:000020C8                               ; __unwind {
.text:000020C8 2D E9 F0 41                   PUSH.W          {R4-R8,LR}
.text:000020CC 09 9E                         LDR             R6, [SP,#0x18+arg_C]
.text:000020CE 4F F0 00 4E                   MOV.W           LR, #0x80000000
.text:000020D2 06 9D                         LDR             R5, [SP,#0x18+arg_0]
.text:000020D4 D6 F8 00 C0                   LDR.W           R12, [R6]
.text:000020D8 6C 1A                         SUBS            R4, R5, R1
.text:000020DA 02 E0                         B               loc_20E2
.text:000020DA
.text:000020DC                               ; ---------------------------------------------------------------------------
.text:000020DC
.text:000020DC                               loc_20DC                      ; CODE XREF: sub_20C8+3E↓j
.text:000020DC 69 1E                         SUBS            R1, R5, #1
.text:000020DE 0C 1B                         SUBS            R4, R1, R4
.text:000020E0 71 1C                         ADDS            R1, R6, #1
.text:000020E0
.text:000020E2
.text:000020E2                               loc_20E2                      ; CODE XREF: sub_20C8+12↑j
.text:000020E2                                                             ; sub_20C8+3C↓j
.text:000020E2 25 46                         MOV             R5, R4
.text:000020E4 85 B1                         CBZ             R5, loc_2108
.text:000020E4
.text:000020E6 D3 F8 00 80                   LDR.W           R8, [R3]
.text:000020EA 01 EB 55 06                   ADD.W           R6, R1, R5,LSR#1
.text:000020EE 58 F8 36 70                   LDR.W           R7, [R8,R6,LSL#3]
.text:000020F2 0E EA 47 04                   AND.W           R4, LR, R7,LSL#1
.text:000020F6 3C 43                         ORRS            R4, R7
.text:000020F8 08 EB C6 07                   ADD.W           R7, R8, R6,LSL#3
.text:000020FC 27 44                         ADD             R7, R4
.text:000020FE 4F EA 55 04                   MOV.W           R4, R5,LSR#1
.text:00002102 BC 45                         CMP             R12, R7
.text:00002104 ED D3                         BCC             loc_20E2
.text:00002104
.text:00002106 E9 E7                         B               loc_20DC
.text:00002106
.text:00002108                               ; ---------------------------------------------------------------------------
.text:00002108
.text:00002108                               loc_2108                      ; CODE XREF: sub_20C8+1C↑j
.text:00002108 0E C0                         STM             R0!, {R1-R3}
.text:0000210A BD E8 F0 81                   POP.W           {R4-R8,PC}
.text:0000210A
.text:0000210A                               ; End of function sub_20C8
.text:0000210A
.text:0000210A                               ; ---------------------------------------------------------------------------
.text:0000210E 00 00                         ALIGN 0x10
.text:0000210E                               ; } // starts at 20C8
.text:00002110
.text:00002110                               loc_2110                      ; CODE XREF: .text:00001E3E↑j
.text:00002110                               ; __unwind {
.text:00002110 8A 1C                         ADDS            R2, R1, #2
.text:00002112 61 2A                         CMP             R2, #0x61 ; 'a' ; switch 98 cases
.text:00002114 00 F2 6B 80                   BHI.W           def_211E      ; jumptable 0000211E default case
.text:00002114
.text:00002118 DF F8 F8 02                   LDR.W           R0, =(aPc - 0x2120) ; "pc"
.text:0000211C 78 44                         ADD             R0, PC        ; "pc"
.text:0000211E DF E8 12 F0                   TBH.W           [PC,R2,LSL#1] ; switch jump
.text:0000211E
.text:0000211E                               ; ---------------------------------------------------------------------------
.text:00002122 62 00                         jpt_211E DCW 0x62             ; jump table for switch statement
.text:00002124 91 00                         DCW 0x91
.text:00002126 92 00                         DCW 0x92
.text:00002128 95 00                         DCW 0x95
.text:0000212A 98 00                         DCW 0x98
.text:0000212C 9B 00                         DCW 0x9B
.text:0000212E 9E 00                         DCW 0x9E
.text:00002130 A1 00                         DCW 0xA1
.text:00002132 A4 00                         DCW 0xA4
.text:00002134 A7 00                         DCW 0xA7
.text:00002136 AA 00                         DCW 0xAA
.text:00002138 AD 00                         DCW 0xAD
.text:0000213A B0 00                         DCW 0xB0
.text:0000213C B3 00                         DCW 0xB3
.text:0000213E B6 00                         DCW 0xB6
.text:00002140 62 00                         DCW 0x62
.text:00002142 B9 00                         DCW 0xB9
.text:00002144 91 00                         DCW 0x91
.text:00002146 8F 00                         DCW 0x8F
.text:00002148 8F 00                         DCW 0x8F
.text:0000214A 8F 00                         DCW 0x8F
.text:0000214C 8F 00                         DCW 0x8F
.text:0000214E 8F 00                         DCW 0x8F
.text:00002150 8F 00                         DCW 0x8F
.text:00002152 8F 00                         DCW 0x8F
.text:00002154 8F 00                         DCW 0x8F
.text:00002156 8F 00                         DCW 0x8F
.text:00002158 8F 00                         DCW 0x8F
.text:0000215A 8F 00                         DCW 0x8F
.text:0000215C 8F 00                         DCW 0x8F
.text:0000215E 8F 00                         DCW 0x8F
.text:00002160 8F 00                         DCW 0x8F
.text:00002162 8F 00                         DCW 0x8F
.text:00002164 8F 00                         DCW 0x8F
.text:00002166 8F 00                         DCW 0x8F
.text:00002168 8F 00                         DCW 0x8F
.text:0000216A 8F 00                         DCW 0x8F
.text:0000216C 8F 00                         DCW 0x8F
.text:0000216E 8F 00                         DCW 0x8F
.text:00002170 8F 00                         DCW 0x8F
.text:00002172 8F 00                         DCW 0x8F
.text:00002174 8F 00                         DCW 0x8F
.text:00002176 8F 00                         DCW 0x8F
.text:00002178 8F 00                         DCW 0x8F
.text:0000217A 8F 00                         DCW 0x8F
.text:0000217C 8F 00                         DCW 0x8F
.text:0000217E 8F 00                         DCW 0x8F
.text:00002180 8F 00                         DCW 0x8F
.text:00002182 8F 00                         DCW 0x8F
.text:00002184 8F 00                         DCW 0x8F
.text:00002186 8F 00                         DCW 0x8F
.text:00002188 8F 00                         DCW 0x8F
.text:0000218A 8F 00                         DCW 0x8F
.text:0000218C 8F 00                         DCW 0x8F
.text:0000218E 8F 00                         DCW 0x8F
.text:00002190 8F 00                         DCW 0x8F
.text:00002192 8F 00                         DCW 0x8F
.text:00002194 8F 00                         DCW 0x8F
.text:00002196 8F 00                         DCW 0x8F
.text:00002198 8F 00                         DCW 0x8F
.text:0000219A 8F 00                         DCW 0x8F
.text:0000219C 8F 00                         DCW 0x8F
.text:0000219E 8F 00                         DCW 0x8F
.text:000021A0 8F 00                         DCW 0x8F
.text:000021A2 8F 00                         DCW 0x8F
.text:000021A4 8F 00                         DCW 0x8F
.text:000021A6 BC 00                         DCW 0xBC
.text:000021A8 BF 00                         DCW 0xBF
.text:000021AA C2 00                         DCW 0xC2
.text:000021AC C5 00                         DCW 0xC5
.text:000021AE C8 00                         DCW 0xC8
.text:000021B0 CB 00                         DCW 0xCB
.text:000021B2 CE 00                         DCW 0xCE
.text:000021B4 D1 00                         DCW 0xD1
.text:000021B6 D4 00                         DCW 0xD4
.text:000021B8 D7 00                         DCW 0xD7
.text:000021BA DA 00                         DCW 0xDA
.text:000021BC DD 00                         DCW 0xDD
.text:000021BE E0 00                         DCW 0xE0
.text:000021C0 E3 00                         DCW 0xE3
.text:000021C2 E6 00                         DCW 0xE6
.text:000021C4 E9 00                         DCW 0xE9
.text:000021C6 EC 00                         DCW 0xEC
.text:000021C8 EF 00                         DCW 0xEF
.text:000021CA F2 00                         DCW 0xF2
.text:000021CC F5 00                         DCW 0xF5
.text:000021CE F8 00                         DCW 0xF8
.text:000021D0 FB 00                         DCW 0xFB
.text:000021D2 FE 00                         DCW 0xFE
.text:000021D4 01 01                         DCW 0x101
.text:000021D6 04 01                         DCW 0x104
.text:000021D8 07 01                         DCW 0x107
.text:000021DA 0A 01                         DCW 0x10A
.text:000021DC 0D 01                         DCW 0x10D
.text:000021DE 10 01                         DCW 0x110
.text:000021E0 13 01                         DCW 0x113
.text:000021E2 16 01                         DCW 0x116
.text:000021E4 19 01                         DCW 0x119
.text:000021E6                               ; ---------------------------------------------------------------------------
.text:000021E6
.text:000021E6                               loc_21E6                      ; CODE XREF: .text:0000211E↑j
.text:000021E6 DF F8 64 03                   LDR.W           R0, =(aSp - 0x21EE) ; jumptable 0000211E cases 0,15
.text:000021EA 78 44                         ADD             R0, PC        ; "sp"
.text:000021EC 70 47                         BX              LR
.text:000021EC
.text:000021EE                               ; ---------------------------------------------------------------------------
.text:000021EE
.text:000021EE                               def_211E                      ; CODE XREF: .text:00002114↑j
.text:000021EE A1 F5 80 70                   SUB.W           R0, R1, #0x100 ; jumptable 0000211E default case
.text:000021F2 1F 28                         CMP             R0, #0x1F
.text:000021F4 24 D8                         BHI             def_21F6      ; jumptable 0000211E cases 18-65
.text:000021F4                                                             ; jumptable 000021F6 default case
.text:000021F4
.text:000021F6 DF E8 10 F0                   TBH.W           [PC,R0,LSL#1] ; switch jump
.text:000021F6
.text:000021F6                               ; ---------------------------------------------------------------------------
.text:000021FA 20 00                         jpt_21F6 DCW 0x20             ; jump table for switch statement
.text:000021FC B0 00                         DCW 0xB0
.text:000021FE B3 00                         DCW 0xB3
.text:00002200 B6 00                         DCW 0xB6
.text:00002202 B9 00                         DCW 0xB9
.text:00002204 BC 00                         DCW 0xBC
.text:00002206 BF 00                         DCW 0xBF
.text:00002208 C2 00                         DCW 0xC2
.text:0000220A C5 00                         DCW 0xC5
.text:0000220C C8 00                         DCW 0xC8
.text:0000220E CB 00                         DCW 0xCB
.text:00002210 CE 00                         DCW 0xCE
.text:00002212 D1 00                         DCW 0xD1
.text:00002214 D4 00                         DCW 0xD4
.text:00002216 D7 00                         DCW 0xD7
.text:00002218 DA 00                         DCW 0xDA
.text:0000221A DD 00                         DCW 0xDD
.text:0000221C E0 00                         DCW 0xE0
.text:0000221E E3 00                         DCW 0xE3
.text:00002220 E6 00                         DCW 0xE6
.text:00002222 E9 00                         DCW 0xE9
.text:00002224 EC 00                         DCW 0xEC
.text:00002226 EF 00                         DCW 0xEF
.text:00002228 F2 00                         DCW 0xF2
.text:0000222A F5 00                         DCW 0xF5
.text:0000222C F8 00                         DCW 0xF8
.text:0000222E FB 00                         DCW 0xFB
.text:00002230 FE 00                         DCW 0xFE
.text:00002232 01 01                         DCW 0x101
.text:00002234 04 01                         DCW 0x104
.text:00002236 07 01                         DCW 0x107
.text:00002238 0A 01                         DCW 0x10A
.text:0000223A                               ; ---------------------------------------------------------------------------
.text:0000223A
.text:0000223A                               loc_223A                      ; CODE XREF: .text:000021F6↑j
.text:0000223A 96 48                         LDR             R0, =(aD0 - 0x2240) ; jumptable 000021F6 case 256
.text:0000223C 78 44                         ADD             R0, PC        ; "d0"
.text:0000223E 70 47                         BX              LR
.text:0000223E
.text:00002240                               ; ---------------------------------------------------------------------------
.text:00002240
.text:00002240                               def_21F6                      ; CODE XREF: .text:0000211E↑j
.text:00002240                                                             ; .text:000021F4↑j
.text:00002240 C4 48                         LDR             R0, =(aUnknownRegiste - 0x2246) ; jumptable 0000211E cases 18-65
.text:00002240                                                             ; jumptable 000021F6 default case
.text:00002242 78 44                         ADD             R0, PC        ; "unknown register"
.text:00002242
.text:00002244
.text:00002244                               locret_2244                   ; CODE XREF: .text:0000211E↑j
.text:00002244 70 47                         BX              LR            ; jumptable 0000211E cases 1,17
.text:00002244
.text:00002246                               ; ---------------------------------------------------------------------------
.text:00002246
.text:00002246                               loc_2246                      ; CODE XREF: .text:0000211E↑j
.text:00002246 C0 48                         LDR             R0, =(aR0 - 0x224C) ; jumptable 0000211E case 2
.text:00002248 78 44                         ADD             R0, PC        ; "r0"
.text:0000224A 70 47                         BX              LR
.text:0000224A
.text:0000224C                               ; ---------------------------------------------------------------------------
.text:0000224C
.text:0000224C                               loc_224C                      ; CODE XREF: .text:0000211E↑j
.text:0000224C BD 48                         LDR             R0, =(aR1 - 0x2252) ; jumptable 0000211E case 3
.text:0000224E 78 44                         ADD             R0, PC        ; "r1"
.text:00002250 70 47                         BX              LR
.text:00002250
.text:00002252                               ; ---------------------------------------------------------------------------
.text:00002252
.text:00002252                               loc_2252                      ; CODE XREF: .text:0000211E↑j
.text:00002252 BB 48                         LDR             R0, =(aR2 - 0x2258) ; jumptable 0000211E case 4
.text:00002254 78 44                         ADD             R0, PC        ; "r2"
.text:00002256 70 47                         BX              LR
.text:00002256
.text:00002258                               ; ---------------------------------------------------------------------------
.text:00002258
.text:00002258                               loc_2258                      ; CODE XREF: .text:0000211E↑j
.text:00002258 B8 48                         LDR             R0, =(aR3 - 0x225E) ; jumptable 0000211E case 5
.text:0000225A 78 44                         ADD             R0, PC        ; "r3"
.text:0000225C 70 47                         BX              LR
.text:0000225C
.text:0000225E                               ; ---------------------------------------------------------------------------
.text:0000225E
.text:0000225E                               loc_225E                      ; CODE XREF: .text:0000211E↑j
.text:0000225E B6 48                         LDR             R0, =(aR4 - 0x2264) ; jumptable 0000211E case 6
.text:00002260 78 44                         ADD             R0, PC        ; "r4"
.text:00002262 70 47                         BX              LR
.text:00002262
.text:00002264                               ; ---------------------------------------------------------------------------
.text:00002264
.text:00002264                               loc_2264                      ; CODE XREF: .text:0000211E↑j
.text:00002264 B3 48                         LDR             R0, =(aR5 - 0x226A) ; jumptable 0000211E case 7
.text:00002266 78 44                         ADD             R0, PC        ; "r5"
.text:00002268 70 47                         BX              LR
.text:00002268
.text:0000226A                               ; ---------------------------------------------------------------------------
.text:0000226A
.text:0000226A                               loc_226A                      ; CODE XREF: .text:0000211E↑j
.text:0000226A B1 48                         LDR             R0, =(aR6 - 0x2270) ; jumptable 0000211E case 8
.text:0000226C 78 44                         ADD             R0, PC        ; "r6"
.text:0000226E 70 47                         BX              LR
.text:0000226E
.text:00002270                               ; ---------------------------------------------------------------------------
.text:00002270
.text:00002270                               loc_2270                      ; CODE XREF: .text:0000211E↑j
.text:00002270 AE 48                         LDR             R0, =(aR7 - 0x2276) ; jumptable 0000211E case 9
.text:00002272 78 44                         ADD             R0, PC        ; "r7"
.text:00002274 70 47                         BX              LR
.text:00002274
.text:00002276                               ; ---------------------------------------------------------------------------
.text:00002276
.text:00002276                               loc_2276                      ; CODE XREF: .text:0000211E↑j
.text:00002276 AC 48                         LDR             R0, =(aR8 - 0x227C) ; jumptable 0000211E case 10
.text:00002278 78 44                         ADD             R0, PC        ; "r8"
.text:0000227A 70 47                         BX              LR
.text:0000227A
.text:0000227C                               ; ---------------------------------------------------------------------------
.text:0000227C
.text:0000227C                               loc_227C                      ; CODE XREF: .text:0000211E↑j
.text:0000227C A9 48                         LDR             R0, =(aR9 - 0x2282) ; jumptable 0000211E case 11
.text:0000227E 78 44                         ADD             R0, PC        ; "r9"
.text:00002280 70 47                         BX              LR
.text:00002280
.text:00002282                               ; ---------------------------------------------------------------------------
.text:00002282
.text:00002282                               loc_2282                      ; CODE XREF: .text:0000211E↑j
.text:00002282 A7 48                         LDR             R0, =(aR10 - 0x2288) ; jumptable 0000211E case 12
.text:00002284 78 44                         ADD             R0, PC        ; "r10"
.text:00002286 70 47                         BX              LR
.text:00002286
.text:00002288                               ; ---------------------------------------------------------------------------
.text:00002288
.text:00002288                               loc_2288                      ; CODE XREF: .text:0000211E↑j
.text:00002288 A4 48                         LDR             R0, =(aR11 - 0x228E) ; jumptable 0000211E case 13
.text:0000228A 78 44                         ADD             R0, PC        ; "r11"
.text:0000228C 70 47                         BX              LR
.text:0000228C
.text:0000228E                               ; ---------------------------------------------------------------------------
.text:0000228E
.text:0000228E                               loc_228E                      ; CODE XREF: .text:0000211E↑j
.text:0000228E A2 48                         LDR             R0, =(aR12 - 0x2294) ; jumptable 0000211E case 14
.text:00002290 78 44                         ADD             R0, PC        ; "r12"
.text:00002292 70 47                         BX              LR
.text:00002292
.text:00002294                               ; ---------------------------------------------------------------------------
.text:00002294
.text:00002294                               loc_2294                      ; CODE XREF: .text:0000211E↑j
.text:00002294 AE 48                         LDR             R0, =(aLr - 0x229A) ; jumptable 0000211E case 16
.text:00002296 78 44                         ADD             R0, PC        ; "lr"
.text:00002298 70 47                         BX              LR
.text:00002298
.text:0000229A                               ; ---------------------------------------------------------------------------
.text:0000229A
.text:0000229A                               loc_229A                      ; CODE XREF: .text:0000211E↑j
.text:0000229A 9E 48                         LDR             R0, =(aS0 - 0x22A0) ; jumptable 0000211E case 66
.text:0000229C 78 44                         ADD             R0, PC        ; "s0"
.text:0000229E 70 47                         BX              LR
.text:0000229E
.text:000022A0                               ; ---------------------------------------------------------------------------
.text:000022A0
.text:000022A0                               loc_22A0                      ; CODE XREF: .text:0000211E↑j
.text:000022A0 9B 48                         LDR             R0, =(aS1 - 0x22A6) ; jumptable 0000211E case 67
.text:000022A2 78 44                         ADD             R0, PC        ; "s1"
.text:000022A4 70 47                         BX              LR
.text:000022A4
.text:000022A6                               ; ---------------------------------------------------------------------------
.text:000022A6
.text:000022A6                               loc_22A6                      ; CODE XREF: .text:0000211E↑j
.text:000022A6 99 48                         LDR             R0, =(aS2 - 0x22AC) ; jumptable 0000211E case 68
.text:000022A8 78 44                         ADD             R0, PC        ; "s2"
.text:000022AA 70 47                         BX              LR
.text:000022AA
.text:000022AC                               ; ---------------------------------------------------------------------------
.text:000022AC
.text:000022AC                               loc_22AC                      ; CODE XREF: .text:0000211E↑j
.text:000022AC 96 48                         LDR             R0, =(aS3 - 0x22B2) ; jumptable 0000211E case 69
.text:000022AE 78 44                         ADD             R0, PC        ; "s3"
.text:000022B0 70 47                         BX              LR
.text:000022B0
.text:000022B2                               ; ---------------------------------------------------------------------------
.text:000022B2
.text:000022B2                               loc_22B2                      ; CODE XREF: .text:0000211E↑j
.text:000022B2 94 48                         LDR             R0, =(aS4 - 0x22B8) ; jumptable 0000211E case 70
.text:000022B4 78 44                         ADD             R0, PC        ; "s4"
.text:000022B6 70 47                         BX              LR
.text:000022B6
.text:000022B8                               ; ---------------------------------------------------------------------------
.text:000022B8
.text:000022B8                               loc_22B8                      ; CODE XREF: .text:0000211E↑j
.text:000022B8 91 48                         LDR             R0, =(aS5 - 0x22BE) ; jumptable 0000211E case 71
.text:000022BA 78 44                         ADD             R0, PC        ; "s5"
.text:000022BC 70 47                         BX              LR
.text:000022BC
.text:000022BE                               ; ---------------------------------------------------------------------------
.text:000022BE
.text:000022BE                               loc_22BE                      ; CODE XREF: .text:0000211E↑j
.text:000022BE 8F 48                         LDR             R0, =(aS6 - 0x22C4) ; jumptable 0000211E case 72
.text:000022C0 78 44                         ADD             R0, PC        ; "s6"
.text:000022C2 70 47                         BX              LR
.text:000022C2
.text:000022C4                               ; ---------------------------------------------------------------------------
.text:000022C4
.text:000022C4                               loc_22C4                      ; CODE XREF: .text:0000211E↑j
.text:000022C4 8C 48                         LDR             R0, =(aS7 - 0x22CA) ; jumptable 0000211E case 73
.text:000022C6 78 44                         ADD             R0, PC        ; "s7"
.text:000022C8 70 47                         BX              LR
.text:000022C8
.text:000022CA                               ; ---------------------------------------------------------------------------
.text:000022CA
.text:000022CA                               loc_22CA                      ; CODE XREF: .text:0000211E↑j
.text:000022CA 8A 48                         LDR             R0, =(aS8 - 0x22D0) ; jumptable 0000211E case 74
.text:000022CC 78 44                         ADD             R0, PC        ; "s8"
.text:000022CE 70 47                         BX              LR
.text:000022CE
.text:000022D0                               ; ---------------------------------------------------------------------------
.text:000022D0
.text:000022D0                               loc_22D0                      ; CODE XREF: .text:0000211E↑j
.text:000022D0 87 48                         LDR             R0, =(aS9 - 0x22D6) ; jumptable 0000211E case 75
.text:000022D2 78 44                         ADD             R0, PC        ; "s9"
.text:000022D4 70 47                         BX              LR
.text:000022D4
.text:000022D6                               ; ---------------------------------------------------------------------------
.text:000022D6
.text:000022D6                               loc_22D6                      ; CODE XREF: .text:0000211E↑j
.text:000022D6 85 48                         LDR             R0, =(aS10 - 0x22DC) ; jumptable 0000211E case 76
.text:000022D8 78 44                         ADD             R0, PC        ; "s10"
.text:000022DA 70 47                         BX              LR
.text:000022DA
.text:000022DC                               ; ---------------------------------------------------------------------------
.text:000022DC
.text:000022DC                               loc_22DC                      ; CODE XREF: .text:0000211E↑j
.text:000022DC 82 48                         LDR             R0, =(aS11 - 0x22E2) ; jumptable 0000211E case 77
.text:000022DE 78 44                         ADD             R0, PC        ; "s11"
.text:000022E0 70 47                         BX              LR
.text:000022E0
.text:000022E2                               ; ---------------------------------------------------------------------------
.text:000022E2
.text:000022E2                               loc_22E2                      ; CODE XREF: .text:0000211E↑j
.text:000022E2 80 48                         LDR             R0, =(aS12 - 0x22E8) ; jumptable 0000211E case 78
.text:000022E4 78 44                         ADD             R0, PC        ; "s12"
.text:000022E6 70 47                         BX              LR
.text:000022E6
.text:000022E8                               ; ---------------------------------------------------------------------------
.text:000022E8
.text:000022E8                               loc_22E8                      ; CODE XREF: .text:0000211E↑j
.text:000022E8 7D 48                         LDR             R0, =(aS13 - 0x22EE) ; jumptable 0000211E case 79
.text:000022EA 78 44                         ADD             R0, PC        ; "s13"
.text:000022EC 70 47                         BX              LR
.text:000022EC
.text:000022EE                               ; ---------------------------------------------------------------------------
.text:000022EE
.text:000022EE                               loc_22EE                      ; CODE XREF: .text:0000211E↑j
.text:000022EE 7B 48                         LDR             R0, =(aS14 - 0x22F4) ; jumptable 0000211E case 80
.text:000022F0 78 44                         ADD             R0, PC        ; "s14"
.text:000022F2 70 47                         BX              LR
.text:000022F2
.text:000022F4                               ; ---------------------------------------------------------------------------
.text:000022F4
.text:000022F4                               loc_22F4                      ; CODE XREF: .text:0000211E↑j
.text:000022F4 78 48                         LDR             R0, =(aS15 - 0x22FA) ; jumptable 0000211E case 81
.text:000022F6 78 44                         ADD             R0, PC        ; "s15"
.text:000022F8 70 47                         BX              LR
.text:000022F8
.text:000022FA                               ; ---------------------------------------------------------------------------
.text:000022FA
.text:000022FA                               loc_22FA                      ; CODE XREF: .text:0000211E↑j
.text:000022FA 76 48                         LDR             R0, =(aS16 - 0x2300) ; jumptable 0000211E case 82
.text:000022FC 78 44                         ADD             R0, PC        ; "s16"
.text:000022FE 70 47                         BX              LR
.text:000022FE
.text:00002300                               ; ---------------------------------------------------------------------------
.text:00002300
.text:00002300                               loc_2300                      ; CODE XREF: .text:0000211E↑j
.text:00002300 73 48                         LDR             R0, =(aS17 - 0x2306) ; jumptable 0000211E case 83
.text:00002302 78 44                         ADD             R0, PC        ; "s17"
.text:00002304 70 47                         BX              LR
.text:00002304
.text:00002306                               ; ---------------------------------------------------------------------------
.text:00002306
.text:00002306                               loc_2306                      ; CODE XREF: .text:0000211E↑j
.text:00002306 71 48                         LDR             R0, =(aS18 - 0x230C) ; jumptable 0000211E case 84
.text:00002308 78 44                         ADD             R0, PC        ; "s18"
.text:0000230A 70 47                         BX              LR
.text:0000230A
.text:0000230C                               ; ---------------------------------------------------------------------------
.text:0000230C
.text:0000230C                               loc_230C                      ; CODE XREF: .text:0000211E↑j
.text:0000230C 6E 48                         LDR             R0, =(aS19 - 0x2312) ; jumptable 0000211E case 85
.text:0000230E 78 44                         ADD             R0, PC        ; "s19"
.text:00002310 70 47                         BX              LR
.text:00002310
.text:00002312                               ; ---------------------------------------------------------------------------
.text:00002312
.text:00002312                               loc_2312                      ; CODE XREF: .text:0000211E↑j
.text:00002312 6C 48                         LDR             R0, =(aS20 - 0x2318) ; jumptable 0000211E case 86
.text:00002314 78 44                         ADD             R0, PC        ; "s20"
.text:00002316 70 47                         BX              LR
.text:00002316
.text:00002318                               ; ---------------------------------------------------------------------------
.text:00002318
.text:00002318                               loc_2318                      ; CODE XREF: .text:0000211E↑j
.text:00002318 69 48                         LDR             R0, =(aS21 - 0x231E) ; jumptable 0000211E case 87
.text:0000231A 78 44                         ADD             R0, PC        ; "s21"
.text:0000231C 70 47                         BX              LR
.text:0000231C
.text:0000231E                               ; ---------------------------------------------------------------------------
.text:0000231E
.text:0000231E                               loc_231E                      ; CODE XREF: .text:0000211E↑j
.text:0000231E 67 48                         LDR             R0, =(aS22 - 0x2324) ; jumptable 0000211E case 88
.text:00002320 78 44                         ADD             R0, PC        ; "s22"
.text:00002322 70 47                         BX              LR
.text:00002322
.text:00002324                               ; ---------------------------------------------------------------------------
.text:00002324
.text:00002324                               loc_2324                      ; CODE XREF: .text:0000211E↑j
.text:00002324 64 48                         LDR             R0, =(aS23 - 0x232A) ; jumptable 0000211E case 89
.text:00002326 78 44                         ADD             R0, PC        ; "s23"
.text:00002328 70 47                         BX              LR
.text:00002328
.text:0000232A                               ; ---------------------------------------------------------------------------
.text:0000232A
.text:0000232A                               loc_232A                      ; CODE XREF: .text:0000211E↑j
.text:0000232A 62 48                         LDR             R0, =(aS24 - 0x2330) ; jumptable 0000211E case 90
.text:0000232C 78 44                         ADD             R0, PC        ; "s24"
.text:0000232E 70 47                         BX              LR
.text:0000232E
.text:00002330                               ; ---------------------------------------------------------------------------
.text:00002330
.text:00002330                               loc_2330                      ; CODE XREF: .text:0000211E↑j
.text:00002330 5F 48                         LDR             R0, =(aS25 - 0x2336) ; jumptable 0000211E case 91
.text:00002332 78 44                         ADD             R0, PC        ; "s25"
.text:00002334 70 47                         BX              LR
.text:00002334
.text:00002336                               ; ---------------------------------------------------------------------------
.text:00002336
.text:00002336                               loc_2336                      ; CODE XREF: .text:0000211E↑j
.text:00002336 5D 48                         LDR             R0, =(aS26 - 0x233C) ; jumptable 0000211E case 92
.text:00002338 78 44                         ADD             R0, PC        ; "s26"
.text:0000233A 70 47                         BX              LR
.text:0000233A
.text:0000233C                               ; ---------------------------------------------------------------------------
.text:0000233C
.text:0000233C                               loc_233C                      ; CODE XREF: .text:0000211E↑j
.text:0000233C 5A 48                         LDR             R0, =(aS27 - 0x2342) ; jumptable 0000211E case 93
.text:0000233E 78 44                         ADD             R0, PC        ; "s27"
.text:00002340 70 47                         BX              LR
.text:00002340
.text:00002342                               ; ---------------------------------------------------------------------------
.text:00002342
.text:00002342                               loc_2342                      ; CODE XREF: .text:0000211E↑j
.text:00002342 58 48                         LDR             R0, =(aS28 - 0x2348) ; jumptable 0000211E case 94
.text:00002344 78 44                         ADD             R0, PC        ; "s28"
.text:00002346 70 47                         BX              LR
.text:00002346
.text:00002348                               ; ---------------------------------------------------------------------------
.text:00002348
.text:00002348                               loc_2348                      ; CODE XREF: .text:0000211E↑j
.text:00002348 55 48                         LDR             R0, =(aS29 - 0x234E) ; jumptable 0000211E case 95
.text:0000234A 78 44                         ADD             R0, PC        ; "s29"
.text:0000234C 70 47                         BX              LR
.text:0000234C
.text:0000234E                               ; ---------------------------------------------------------------------------
.text:0000234E
.text:0000234E                               loc_234E                      ; CODE XREF: .text:0000211E↑j
.text:0000234E 53 48                         LDR             R0, =(aS30 - 0x2354) ; jumptable 0000211E case 96
.text:00002350 78 44                         ADD             R0, PC        ; "s30"
.text:00002352 70 47                         BX              LR
.text:00002352
.text:00002354                               ; ---------------------------------------------------------------------------
.text:00002354
.text:00002354                               loc_2354                      ; CODE XREF: .text:0000211E↑j
.text:00002354 50 48                         LDR             R0, =(aS31 - 0x235A) ; jumptable 0000211E case 97
.text:00002356 78 44                         ADD             R0, PC        ; "s31"
.text:00002358 70 47                         BX              LR
.text:00002358
.text:0000235A                               ; ---------------------------------------------------------------------------
.text:0000235A
.text:0000235A                               loc_235A                      ; CODE XREF: .text:000021F6↑j
.text:0000235A 4D 48                         LDR             R0, =(aD1 - 0x2360) ; jumptable 000021F6 case 257
.text:0000235C 78 44                         ADD             R0, PC        ; "d1"
.text:0000235E 70 47                         BX              LR
.text:0000235E
.text:00002360                               ; ---------------------------------------------------------------------------
.text:00002360
.text:00002360                               loc_2360                      ; CODE XREF: .text:000021F6↑j
.text:00002360 4A 48                         LDR             R0, =(aD2 - 0x2366) ; jumptable 000021F6 case 258
.text:00002362 78 44                         ADD             R0, PC        ; "d2"
.text:00002364 70 47                         BX              LR
.text:00002364
.text:00002366                               ; ---------------------------------------------------------------------------
.text:00002366
.text:00002366                               loc_2366                      ; CODE XREF: .text:000021F6↑j
.text:00002366 48 48                         LDR             R0, =(aD3 - 0x236C) ; jumptable 000021F6 case 259
.text:00002368 78 44                         ADD             R0, PC        ; "d3"
.text:0000236A 70 47                         BX              LR
.text:0000236A
.text:0000236C                               ; ---------------------------------------------------------------------------
.text:0000236C
.text:0000236C                               loc_236C                      ; CODE XREF: .text:000021F6↑j
.text:0000236C 45 48                         LDR             R0, =(aD4 - 0x2372) ; jumptable 000021F6 case 260
.text:0000236E 78 44                         ADD             R0, PC        ; "d4"
.text:00002370 70 47                         BX              LR
.text:00002370
.text:00002372                               ; ---------------------------------------------------------------------------
.text:00002372
.text:00002372                               loc_2372                      ; CODE XREF: .text:000021F6↑j
.text:00002372 43 48                         LDR             R0, =(aD5 - 0x2378) ; jumptable 000021F6 case 261
.text:00002374 78 44                         ADD             R0, PC        ; "d5"
.text:00002376 70 47                         BX              LR
.text:00002376
.text:00002378                               ; ---------------------------------------------------------------------------
.text:00002378
.text:00002378                               loc_2378                      ; CODE XREF: .text:000021F6↑j
.text:00002378 40 48                         LDR             R0, =(aD6 - 0x237E) ; jumptable 000021F6 case 262
.text:0000237A 78 44                         ADD             R0, PC        ; "d6"
.text:0000237C 70 47                         BX              LR
.text:0000237C
.text:0000237E                               ; ---------------------------------------------------------------------------
.text:0000237E
.text:0000237E                               loc_237E                      ; CODE XREF: .text:000021F6↑j
.text:0000237E 3E 48                         LDR             R0, =(aD7 - 0x2384) ; jumptable 000021F6 case 263
.text:00002380 78 44                         ADD             R0, PC        ; "d7"
.text:00002382 70 47                         BX              LR
.text:00002382
.text:00002384                               ; ---------------------------------------------------------------------------
.text:00002384
.text:00002384                               loc_2384                      ; CODE XREF: .text:000021F6↑j
.text:00002384 3B 48                         LDR             R0, =(aD8 - 0x238A) ; jumptable 000021F6 case 264
.text:00002386 78 44                         ADD             R0, PC        ; "d8"
.text:00002388 70 47                         BX              LR
.text:00002388
.text:0000238A                               ; ---------------------------------------------------------------------------
.text:0000238A
.text:0000238A                               loc_238A                      ; CODE XREF: .text:000021F6↑j
.text:0000238A 39 48                         LDR             R0, =(aD9 - 0x2390) ; jumptable 000021F6 case 265
.text:0000238C 78 44                         ADD             R0, PC        ; "d9"
.text:0000238E 70 47                         BX              LR
.text:0000238E
.text:00002390                               ; ---------------------------------------------------------------------------
.text:00002390
.text:00002390                               loc_2390                      ; CODE XREF: .text:000021F6↑j
.text:00002390 36 48                         LDR             R0, =(aD10 - 0x2396) ; jumptable 000021F6 case 266
.text:00002392 78 44                         ADD             R0, PC        ; "d10"
.text:00002394 70 47                         BX              LR
.text:00002394
.text:00002396                               ; ---------------------------------------------------------------------------
.text:00002396
.text:00002396                               loc_2396                      ; CODE XREF: .text:000021F6↑j
.text:00002396 34 48                         LDR             R0, =(aD11 - 0x239C) ; jumptable 000021F6 case 267
.text:00002398 78 44                         ADD             R0, PC        ; "d11"
.text:0000239A 70 47                         BX              LR
.text:0000239A
.text:0000239C                               ; ---------------------------------------------------------------------------
.text:0000239C
.text:0000239C                               loc_239C                      ; CODE XREF: .text:000021F6↑j
.text:0000239C 31 48                         LDR             R0, =(aD12 - 0x23A2) ; jumptable 000021F6 case 268
.text:0000239E 78 44                         ADD             R0, PC        ; "d12"
.text:000023A0 70 47                         BX              LR
.text:000023A0
.text:000023A2                               ; ---------------------------------------------------------------------------
.text:000023A2
.text:000023A2                               loc_23A2                      ; CODE XREF: .text:000021F6↑j
.text:000023A2 2F 48                         LDR             R0, =(aD13 - 0x23A8) ; jumptable 000021F6 case 269
.text:000023A4 78 44                         ADD             R0, PC        ; "d13"
.text:000023A6 70 47                         BX              LR
.text:000023A6
.text:000023A8                               ; ---------------------------------------------------------------------------
.text:000023A8
.text:000023A8                               loc_23A8                      ; CODE XREF: .text:000021F6↑j
.text:000023A8 2C 48                         LDR             R0, =(aD14 - 0x23AE) ; jumptable 000021F6 case 270
.text:000023AA 78 44                         ADD             R0, PC        ; "d14"
.text:000023AC 70 47                         BX              LR
.text:000023AC
.text:000023AE                               ; ---------------------------------------------------------------------------
.text:000023AE
.text:000023AE                               loc_23AE                      ; CODE XREF: .text:000021F6↑j
.text:000023AE 2A 48                         LDR             R0, =(aD15 - 0x23B4) ; jumptable 000021F6 case 271
.text:000023B0 78 44                         ADD             R0, PC        ; "d15"
.text:000023B2 70 47                         BX              LR
.text:000023B2
.text:000023B4                               ; ---------------------------------------------------------------------------
.text:000023B4
.text:000023B4                               loc_23B4                      ; CODE XREF: .text:000021F6↑j
.text:000023B4 27 48                         LDR             R0, =(aD16 - 0x23BA) ; jumptable 000021F6 case 272
.text:000023B6 78 44                         ADD             R0, PC        ; "d16"
.text:000023B8 70 47                         BX              LR
.text:000023B8
.text:000023BA                               ; ---------------------------------------------------------------------------
.text:000023BA
.text:000023BA                               loc_23BA                      ; CODE XREF: .text:000021F6↑j
.text:000023BA 25 48                         LDR             R0, =(aD17 - 0x23C0) ; jumptable 000021F6 case 273
.text:000023BC 78 44                         ADD             R0, PC        ; "d17"
.text:000023BE 70 47                         BX              LR
.text:000023BE
.text:000023C0                               ; ---------------------------------------------------------------------------
.text:000023C0
.text:000023C0                               loc_23C0                      ; CODE XREF: .text:000021F6↑j
.text:000023C0 22 48                         LDR             R0, =(aD18 - 0x23C6) ; jumptable 000021F6 case 274
.text:000023C2 78 44                         ADD             R0, PC        ; "d18"
.text:000023C4 70 47                         BX              LR
.text:000023C4
.text:000023C6                               ; ---------------------------------------------------------------------------
.text:000023C6
.text:000023C6                               loc_23C6                      ; CODE XREF: .text:000021F6↑j
.text:000023C6 20 48                         LDR             R0, =(aD19 - 0x23CC) ; jumptable 000021F6 case 275
.text:000023C8 78 44                         ADD             R0, PC        ; "d19"
.text:000023CA 70 47                         BX              LR
.text:000023CA
.text:000023CC                               ; ---------------------------------------------------------------------------
.text:000023CC
.text:000023CC                               loc_23CC                      ; CODE XREF: .text:000021F6↑j
.text:000023CC 1D 48                         LDR             R0, =(aD20 - 0x23D2) ; jumptable 000021F6 case 276
.text:000023CE 78 44                         ADD             R0, PC        ; "d20"
.text:000023D0 70 47                         BX              LR
.text:000023D0
.text:000023D2                               ; ---------------------------------------------------------------------------
.text:000023D2
.text:000023D2                               loc_23D2                      ; CODE XREF: .text:000021F6↑j
.text:000023D2 1B 48                         LDR             R0, =(aD21 - 0x23D8) ; jumptable 000021F6 case 277
.text:000023D4 78 44                         ADD             R0, PC        ; "d21"
.text:000023D6 70 47                         BX              LR
.text:000023D6
.text:000023D8                               ; ---------------------------------------------------------------------------
.text:000023D8
.text:000023D8                               loc_23D8                      ; CODE XREF: .text:000021F6↑j
.text:000023D8 18 48                         LDR             R0, =(aD22 - 0x23DE) ; jumptable 000021F6 case 278
.text:000023DA 78 44                         ADD             R0, PC        ; "d22"
.text:000023DC 70 47                         BX              LR
.text:000023DC
.text:000023DE                               ; ---------------------------------------------------------------------------
.text:000023DE
.text:000023DE                               loc_23DE                      ; CODE XREF: .text:000021F6↑j
.text:000023DE 16 48                         LDR             R0, =(aD23 - 0x23E4) ; jumptable 000021F6 case 279
.text:000023E0 78 44                         ADD             R0, PC        ; "d23"
.text:000023E2 70 47                         BX              LR
.text:000023E2
.text:000023E4                               ; ---------------------------------------------------------------------------
.text:000023E4
.text:000023E4                               loc_23E4                      ; CODE XREF: .text:000021F6↑j
.text:000023E4 13 48                         LDR             R0, =(aD24 - 0x23EA) ; jumptable 000021F6 case 280
.text:000023E6 78 44                         ADD             R0, PC        ; "d24"
.text:000023E8 70 47                         BX              LR
.text:000023E8
.text:000023EA                               ; ---------------------------------------------------------------------------
.text:000023EA
.text:000023EA                               loc_23EA                      ; CODE XREF: .text:000021F6↑j
.text:000023EA 11 48                         LDR             R0, =(aD25 - 0x23F0) ; jumptable 000021F6 case 281
.text:000023EC 78 44                         ADD             R0, PC        ; "d25"
.text:000023EE 70 47                         BX              LR
.text:000023EE
.text:000023F0                               ; ---------------------------------------------------------------------------
.text:000023F0
.text:000023F0                               loc_23F0                      ; CODE XREF: .text:000021F6↑j
.text:000023F0 0E 48                         LDR             R0, =(aD26 - 0x23F6) ; jumptable 000021F6 case 282
.text:000023F2 78 44                         ADD             R0, PC        ; "d26"
.text:000023F4 70 47                         BX              LR
.text:000023F4
.text:000023F6                               ; ---------------------------------------------------------------------------
.text:000023F6
.text:000023F6                               loc_23F6                      ; CODE XREF: .text:000021F6↑j
.text:000023F6 0C 48                         LDR             R0, =(aD27 - 0x23FC) ; jumptable 000021F6 case 283
.text:000023F8 78 44                         ADD             R0, PC        ; "d27"
.text:000023FA 70 47                         BX              LR
.text:000023FA
.text:000023FC                               ; ---------------------------------------------------------------------------
.text:000023FC
.text:000023FC                               loc_23FC                      ; CODE XREF: .text:000021F6↑j
.text:000023FC 09 48                         LDR             R0, =(aD28 - 0x2402) ; jumptable 000021F6 case 284
.text:000023FE 78 44                         ADD             R0, PC        ; "d28"
.text:00002400 70 47                         BX              LR
.text:00002400
.text:00002402                               ; ---------------------------------------------------------------------------
.text:00002402
.text:00002402                               loc_2402                      ; CODE XREF: .text:000021F6↑j
.text:00002402 07 48                         LDR             R0, =(aD29 - 0x2408) ; jumptable 000021F6 case 285
.text:00002404 78 44                         ADD             R0, PC        ; "d29"
.text:00002406 70 47                         BX              LR
.text:00002406
.text:00002408                               ; ---------------------------------------------------------------------------
.text:00002408
.text:00002408                               loc_2408                      ; CODE XREF: .text:000021F6↑j
.text:00002408 04 48                         LDR             R0, =(aD30 - 0x240E) ; jumptable 000021F6 case 286
.text:0000240A 78 44                         ADD             R0, PC        ; "d30"
.text:0000240C 70 47                         BX              LR
.text:0000240C
.text:0000240E                               ; ---------------------------------------------------------------------------
.text:0000240E
.text:0000240E                               loc_240E                      ; CODE XREF: .text:000021F6↑j
.text:0000240E 02 48                         LDR             R0, =(aD31 - 0x2414) ; jumptable 000021F6 case 287
.text:00002410 78 44                         ADD             R0, PC        ; "d31"
.text:00002412 70 47                         BX              LR
.text:00002412
.text:00002412                               ; ---------------------------------------------------------------------------
.text:00002414 27 0D 00 00                   off_2414 DCD aPc - 0x2120     ; DATA XREF: .text:00002118↑r
.text:00002414                                                             ; "pc"
.text:00002418 4E 0B 00 00                   off_2418 DCD aD31 - 0x2414    ; DATA XREF: .text:loc_240E↑r
.text:00002418                                                             ; "d31"
.text:0000241C 50 0B 00 00                   off_241C DCD aD30 - 0x240E    ; DATA XREF: .text:loc_2408↑r
.text:0000241C                                                             ; "d30"
.text:00002420 52 0B 00 00                   off_2420 DCD aD29 - 0x2408    ; DATA XREF: .text:loc_2402↑r
.text:00002420                                                             ; "d29"
.text:00002424 54 0B 00 00                   off_2424 DCD aD28 - 0x2402    ; DATA XREF: .text:loc_23FC↑r
.text:00002424                                                             ; "d28"
.text:00002428 56 0B 00 00                   off_2428 DCD aD27 - 0x23FC    ; DATA XREF: .text:loc_23F6↑r
.text:00002428                                                             ; "d27"
.text:0000242C 58 0B 00 00                   off_242C DCD aD26 - 0x23F6    ; DATA XREF: .text:loc_23F0↑r
.text:0000242C                                                             ; "d26"
.text:00002430 5A 0B 00 00                   off_2430 DCD aD25 - 0x23F0    ; DATA XREF: .text:loc_23EA↑r
.text:00002430                                                             ; "d25"
.text:00002434 5C 0B 00 00                   off_2434 DCD aD24 - 0x23EA    ; DATA XREF: .text:loc_23E4↑r
.text:00002434                                                             ; "d24"
.text:00002438 5E 0B 00 00                   off_2438 DCD aD23 - 0x23E4    ; DATA XREF: .text:loc_23DE↑r
.text:00002438                                                             ; "d23"
.text:0000243C 60 0B 00 00                   off_243C DCD aD22 - 0x23DE    ; DATA XREF: .text:loc_23D8↑r
.text:0000243C                                                             ; "d22"
.text:00002440 62 0B 00 00                   off_2440 DCD aD21 - 0x23D8    ; DATA XREF: .text:loc_23D2↑r
.text:00002440                                                             ; "d21"
.text:00002444 64 0B 00 00                   off_2444 DCD aD20 - 0x23D2    ; DATA XREF: .text:loc_23CC↑r
.text:00002444                                                             ; "d20"
.text:00002448 66 0B 00 00                   off_2448 DCD aD19 - 0x23CC    ; DATA XREF: .text:loc_23C6↑r
.text:00002448                                                             ; "d19"
.text:0000244C 68 0B 00 00                   off_244C DCD aD18 - 0x23C6    ; DATA XREF: .text:loc_23C0↑r
.text:0000244C                                                             ; "d18"
.text:00002450 6A 0B 00 00                   off_2450 DCD aD17 - 0x23C0    ; DATA XREF: .text:loc_23BA↑r
.text:00002450                                                             ; "d17"
.text:00002454 6C 0B 00 00                   off_2454 DCD aD16 - 0x23BA    ; DATA XREF: .text:loc_23B4↑r
.text:00002454                                                             ; "d16"
.text:00002458 6E 0B 00 00                   off_2458 DCD aD15 - 0x23B4    ; DATA XREF: .text:loc_23AE↑r
.text:00002458                                                             ; "d15"
.text:0000245C 70 0B 00 00                   off_245C DCD aD14 - 0x23AE    ; DATA XREF: .text:loc_23A8↑r
.text:0000245C                                                             ; "d14"
.text:00002460 72 0B 00 00                   off_2460 DCD aD13 - 0x23A8    ; DATA XREF: .text:loc_23A2↑r
.text:00002460                                                             ; "d13"
.text:00002464 74 0B 00 00                   off_2464 DCD aD12 - 0x23A2    ; DATA XREF: .text:loc_239C↑r
.text:00002464                                                             ; "d12"
.text:00002468 76 0B 00 00                   off_2468 DCD aD11 - 0x239C    ; DATA XREF: .text:loc_2396↑r
.text:00002468                                                             ; "d11"
.text:0000246C 78 0B 00 00                   off_246C DCD aD10 - 0x2396    ; DATA XREF: .text:loc_2390↑r
.text:0000246C                                                             ; "d10"
.text:00002470 7B 0B 00 00                   off_2470 DCD aD9 - 0x2390     ; DATA XREF: .text:loc_238A↑r
.text:00002470                                                             ; "d9"
.text:00002474 7E 0B 00 00                   off_2474 DCD aD8 - 0x238A     ; DATA XREF: .text:loc_2384↑r
.text:00002474                                                             ; "d8"
.text:00002478 81 0B 00 00                   off_2478 DCD aD7 - 0x2384     ; DATA XREF: .text:loc_237E↑r
.text:00002478                                                             ; "d7"
.text:0000247C 84 0B 00 00                   off_247C DCD aD6 - 0x237E     ; DATA XREF: .text:loc_2378↑r
.text:0000247C                                                             ; "d6"
.text:00002480 87 0B 00 00                   off_2480 DCD aD5 - 0x2378     ; DATA XREF: .text:loc_2372↑r
.text:00002480                                                             ; "d5"
.text:00002484 8A 0B 00 00                   off_2484 DCD aD4 - 0x2372     ; DATA XREF: .text:loc_236C↑r
.text:00002484                                                             ; "d4"
.text:00002488 8D 0B 00 00                   off_2488 DCD aD3 - 0x236C     ; DATA XREF: .text:loc_2366↑r
.text:00002488                                                             ; "d3"
.text:0000248C 90 0B 00 00                   off_248C DCD aD2 - 0x2366     ; DATA XREF: .text:loc_2360↑r
.text:0000248C                                                             ; "d2"
.text:00002490 93 0B 00 00                   off_2490 DCD aD1 - 0x2360     ; DATA XREF: .text:loc_235A↑r
.text:00002490                                                             ; "d1"
.text:00002494 B0 0C 00 00                   off_2494 DCD aD0 - 0x2240     ; DATA XREF: .text:loc_223A↑r
.text:00002494                                                             ; "d0"
.text:00002498 92 0B 00 00                   off_2498 DCD aS31 - 0x235A    ; DATA XREF: .text:loc_2354↑r
.text:00002498                                                             ; "s31"
.text:0000249C 94 0B 00 00                   off_249C DCD aS30 - 0x2354    ; DATA XREF: .text:loc_234E↑r
.text:0000249C                                                             ; "s30"
.text:000024A0 96 0B 00 00                   off_24A0 DCD aS29 - 0x234E    ; DATA XREF: .text:loc_2348↑r
.text:000024A0                                                             ; "s29"
.text:000024A4 98 0B 00 00                   off_24A4 DCD aS28 - 0x2348    ; DATA XREF: .text:loc_2342↑r
.text:000024A4                                                             ; "s28"
.text:000024A8 9A 0B 00 00                   off_24A8 DCD aS27 - 0x2342    ; DATA XREF: .text:loc_233C↑r
.text:000024A8                                                             ; "s27"
.text:000024AC 9C 0B 00 00                   off_24AC DCD aS26 - 0x233C    ; DATA XREF: .text:loc_2336↑r
.text:000024AC                                                             ; "s26"
.text:000024B0 9E 0B 00 00                   off_24B0 DCD aS25 - 0x2336    ; DATA XREF: .text:loc_2330↑r
.text:000024B0                                                             ; "s25"
.text:000024B4 A0 0B 00 00                   off_24B4 DCD aS24 - 0x2330    ; DATA XREF: .text:loc_232A↑r
.text:000024B4                                                             ; "s24"
.text:000024B8 A2 0B 00 00                   off_24B8 DCD aS23 - 0x232A    ; DATA XREF: .text:loc_2324↑r
.text:000024B8                                                             ; "s23"
.text:000024BC A4 0B 00 00                   off_24BC DCD aS22 - 0x2324    ; DATA XREF: .text:loc_231E↑r
.text:000024BC                                                             ; "s22"
.text:000024C0 A6 0B 00 00                   off_24C0 DCD aS21 - 0x231E    ; DATA XREF: .text:loc_2318↑r
.text:000024C0                                                             ; "s21"
.text:000024C4 A8 0B 00 00                   off_24C4 DCD aS20 - 0x2318    ; DATA XREF: .text:loc_2312↑r
.text:000024C4                                                             ; "s20"
.text:000024C8 AA 0B 00 00                   off_24C8 DCD aS19 - 0x2312    ; DATA XREF: .text:loc_230C↑r
.text:000024C8                                                             ; "s19"
.text:000024CC AC 0B 00 00                   off_24CC DCD aS18 - 0x230C    ; DATA XREF: .text:loc_2306↑r
.text:000024CC                                                             ; "s18"
.text:000024D0 AE 0B 00 00                   off_24D0 DCD aS17 - 0x2306    ; DATA XREF: .text:loc_2300↑r
.text:000024D0                                                             ; "s17"
.text:000024D4 B0 0B 00 00                   off_24D4 DCD aS16 - 0x2300    ; DATA XREF: .text:loc_22FA↑r
.text:000024D4                                                             ; "s16"
.text:000024D8 B2 0B 00 00                   off_24D8 DCD aS15 - 0x22FA    ; DATA XREF: .text:loc_22F4↑r
.text:000024D8                                                             ; "s15"
.text:000024DC B4 0B 00 00                   off_24DC DCD aS14 - 0x22F4    ; DATA XREF: .text:loc_22EE↑r
.text:000024DC                                                             ; "s14"
.text:000024E0 B6 0B 00 00                   off_24E0 DCD aS13 - 0x22EE    ; DATA XREF: .text:loc_22E8↑r
.text:000024E0                                                             ; "s13"
.text:000024E4 B8 0B 00 00                   off_24E4 DCD aS12 - 0x22E8    ; DATA XREF: .text:loc_22E2↑r
.text:000024E4                                                             ; "s12"
.text:000024E8 BA 0B 00 00                   off_24E8 DCD aS11 - 0x22E2    ; DATA XREF: .text:loc_22DC↑r
.text:000024E8                                                             ; "s11"
.text:000024EC BC 0B 00 00                   off_24EC DCD aS10 - 0x22DC    ; DATA XREF: .text:loc_22D6↑r
.text:000024EC                                                             ; "s10"
.text:000024F0 BF 0B 00 00                   off_24F0 DCD aS9 - 0x22D6     ; DATA XREF: .text:loc_22D0↑r
.text:000024F0                                                             ; "s9"
.text:000024F4 C2 0B 00 00                   off_24F4 DCD aS8 - 0x22D0     ; DATA XREF: .text:loc_22CA↑r
.text:000024F4                                                             ; "s8"
.text:000024F8 C5 0B 00 00                   off_24F8 DCD aS7 - 0x22CA     ; DATA XREF: .text:loc_22C4↑r
.text:000024F8                                                             ; "s7"
.text:000024FC C8 0B 00 00                   off_24FC DCD aS6 - 0x22C4     ; DATA XREF: .text:loc_22BE↑r
.text:000024FC                                                             ; "s6"
.text:00002500 CB 0B 00 00                   off_2500 DCD aS5 - 0x22BE     ; DATA XREF: .text:loc_22B8↑r
.text:00002500                                                             ; "s5"
.text:00002504 CE 0B 00 00                   off_2504 DCD aS4 - 0x22B8     ; DATA XREF: .text:loc_22B2↑r
.text:00002504                                                             ; "s4"
.text:00002508 D1 0B 00 00                   off_2508 DCD aS3 - 0x22B2     ; DATA XREF: .text:loc_22AC↑r
.text:00002508                                                             ; "s3"
.text:0000250C D4 0B 00 00                   off_250C DCD aS2 - 0x22AC     ; DATA XREF: .text:loc_22A6↑r
.text:0000250C                                                             ; "s2"
.text:00002510 D7 0B 00 00                   off_2510 DCD aS1 - 0x22A6     ; DATA XREF: .text:loc_22A0↑r
.text:00002510                                                             ; "s1"
.text:00002514 DA 0B 00 00                   off_2514 DCD aS0 - 0x22A0     ; DATA XREF: .text:loc_229A↑r
.text:00002514                                                             ; "s0"
.text:00002518 E2 0B 00 00                   off_2518 DCD aR12 - 0x2294    ; DATA XREF: .text:loc_228E↑r
.text:00002518                                                             ; "r12"
.text:0000251C E4 0B 00 00                   off_251C DCD aR11 - 0x228E    ; DATA XREF: .text:loc_2288↑r
.text:0000251C                                                             ; "r11"
.text:00002520 E6 0B 00 00                   off_2520 DCD aR10 - 0x2288    ; DATA XREF: .text:loc_2282↑r
.text:00002520                                                             ; "r10"
.text:00002524 E9 0B 00 00                   off_2524 DCD aR9 - 0x2282     ; DATA XREF: .text:loc_227C↑r
.text:00002524                                                             ; "r9"
.text:00002528 EC 0B 00 00                   off_2528 DCD aR8 - 0x227C     ; DATA XREF: .text:loc_2276↑r
.text:00002528                                                             ; "r8"
.text:0000252C EF 0B 00 00                   off_252C DCD aR7 - 0x2276     ; DATA XREF: .text:loc_2270↑r
.text:0000252C                                                             ; "r7"
.text:00002530 F2 0B 00 00                   off_2530 DCD aR6 - 0x2270     ; DATA XREF: .text:loc_226A↑r
.text:00002530                                                             ; "r6"
.text:00002534 F5 0B 00 00                   off_2534 DCD aR5 - 0x226A     ; DATA XREF: .text:loc_2264↑r
.text:00002534                                                             ; "r5"
.text:00002538 F8 0B 00 00                   off_2538 DCD aR4 - 0x2264     ; DATA XREF: .text:loc_225E↑r
.text:00002538                                                             ; "r4"
.text:0000253C FB 0B 00 00                   off_253C DCD aR3 - 0x225E     ; DATA XREF: .text:loc_2258↑r
.text:0000253C                                                             ; "r3"
.text:00002540 FE 0B 00 00                   off_2540 DCD aR2 - 0x2258     ; DATA XREF: .text:loc_2252↑r
.text:00002540                                                             ; "r2"
.text:00002544 01 0C 00 00                   off_2544 DCD aR1 - 0x2252     ; DATA XREF: .text:loc_224C↑r
.text:00002544                                                             ; "r1"
.text:00002548 04 0C 00 00                   off_2548 DCD aR0 - 0x224C     ; DATA XREF: .text:loc_2246↑r
.text:00002548                                                             ; "r0"
.text:0000254C 5F 0C 00 00                   off_254C DCD aSp - 0x21EE     ; DATA XREF: .text:loc_21E6↑r
.text:0000254C                                                             ; "sp"
.text:00002550 B0 0B 00 00                   off_2550 DCD aLr - 0x229A     ; DATA XREF: .text:loc_2294↑r
.text:00002550                                                             ; "lr"
.text:00002554 20 0D 00 00                   off_2554 DCD aUnknownRegiste - 0x2246
.text:00002554                                                             ; DATA XREF: .text:def_21F6↑r
.text:00002554                               ; } // starts at 2110         ; "unknown register"
.text:00002558                               CODE32
.text:00002558
.text:00002558                               ; =============== S U B R O U T I N E =======================================
.text:00002558
.text:00002558
.text:00002558                               ; int __fastcall sub_2558(int)
.text:00002558                               sub_2558                      ; DATA XREF: sub_25FC:loc_2600↓o
.text:00002558                                                             ; sub_25FC+8↓o
.text:00002558                                                             ; sub_25FC:off_2608↓o
.text:00002558 00 E0 A0 E1                   MOV             LR, R0
.text:0000255C FF 1F 9E E8                   LDM             LR, {R0-R12}
.text:00002560 34 D0 9E E5                   LDR             SP, [LR,#0x34]
.text:00002564 3C E0 9E E5                   LDR             LR, [LR,#0x3C]
.text:00002568 1E FF 2F E1                   BX              LR
.text:00002568
.text:00002568                               ; End of function sub_2558
.text:00002568
.text:0000256C
.text:0000256C                               ; =============== S U B R O U T I N E =======================================
.text:0000256C
.text:0000256C
.text:0000256C                               ; void sub_256C()
.text:0000256C                               sub_256C                      ; CODE XREF: sub_1ECC:loc_1EE6↑p
.text:0000256C 20 0B 90 EC                   VLDM            R0, {D0-D15}
.text:00002570 1E FF 2F E1                   BX              LR
.text:00002570
.text:00002570                               ; End of function sub_256C
.text:00002570
.text:00002574
.text:00002574                               ; =============== S U B R O U T I N E =======================================
.text:00002574
.text:00002574
.text:00002574                               ; void sub_2574()
.text:00002574                               sub_2574                      ; CODE XREF: sub_1ECC+14↑p
.text:00002574 20 0B 90 EC                   VLDM            R0, {D0-D15}
.text:00002578 1E FF 2F E1                   BX              LR
.text:00002578
.text:00002578                               ; End of function sub_2574
.text:00002578
.text:0000257C
.text:0000257C                               ; =============== S U B R O U T I N E =======================================
.text:0000257C
.text:0000257C
.text:0000257C                               ; void sub_257C()
.text:0000257C                               sub_257C                      ; CODE XREF: sub_1ECC+2C↑p
.text:0000257C 20 0B D0 EC                   VLDM            R0, {D16-D31}
.text:00002580 1E FF 2F E1                   BX              LR
.text:00002580
.text:00002580                               ; End of function sub_257C
.text:00002580
.text:00002584
.text:00002584                               ; =============== S U B R O U T I N E =======================================
.text:00002584
.text:00002584
.text:00002584                               ; _DWORD *__fastcall sub_2584(int *)
.text:00002584                               sub_2584                      ; CODE XREF: sub_1ECC+3E↑p
.text:00002584 02 01 F0 EC                   LDCL            p1, c0, [R0],#8
.text:00002588 02 11 F0 EC                   LDCL            p1, c1, [R0],#8
.text:0000258C 02 21 F0 EC                   LDCL            p1, c2, [R0],#8
.text:00002590 02 31 F0 EC                   LDCL            p1, c3, [R0],#8
.text:00002594 02 41 F0 EC                   LDCL            p1, c4, [R0],#8
.text:00002598 02 51 F0 EC                   LDCL            p1, c5, [R0],#8
.text:0000259C 02 61 F0 EC                   LDCL            p1, c6, [R0],#8
.text:000025A0 02 71 F0 EC                   LDCL            p1, c7, [R0],#8
.text:000025A4 02 81 F0 EC                   LDCL            p1, c8, [R0],#8
.text:000025A8 02 91 F0 EC                   LDCL            p1, c9, [R0],#8
.text:000025AC 02 A1 F0 EC                   LDCL            p1, c10, [R0],#8
.text:000025B0 02 B1 F0 EC                   LDCL            p1, c11, [R0],#8
.text:000025B4 02 C1 F0 EC                   LDCL            p1, c12, [R0],#8
.text:000025B8 02 D1 F0 EC                   LDCL            p1, c13, [R0],#8
.text:000025BC 02 E1 F0 EC                   LDCL            p1, c14, [R0],#8
.text:000025C0 02 F1 F0 EC                   LDCL            p1, c15, [R0],#8
.text:000025C4 1E FF 2F E1                   BX              LR
.text:000025C4
.text:000025C4                               ; End of function sub_2584
.text:000025C4
.text:000025C8
.text:000025C8                               ; =============== S U B R O U T I N E =======================================
.text:000025C8
.text:000025C8
.text:000025C8                               ; _DWORD *__fastcall sub_25C8(int *)
.text:000025C8                               sub_25C8                      ; DATA XREF: sub_260C:loc_2610↓o
.text:000025C8                                                             ; sub_260C+8↓o
.text:000025C8                                                             ; sub_260C:off_2618↓o
.text:000025C8 01 81 B0 FC                   LDC2            p1, c8, [R0],#4
.text:000025CC 01 91 B0 FC                   LDC2            p1, c9, [R0],#4
.text:000025D0 01 A1 B0 FC                   LDC2            p1, c10, [R0],#4
.text:000025D4 01 B1 B0 FC                   LDC2            p1, c11, [R0],#4
.text:000025D8 1E FF 2F E1                   BX              LR
.text:000025D8
.text:000025D8                               ; End of function sub_25C8
.text:000025D8
.text:000025DC                               CODE16
.text:000025DC
.text:000025DC                               ; =============== S U B R O U T I N E =======================================
.text:000025DC
.text:000025DC                               ; Attributes: thunk
.text:000025DC
.text:000025DC                               ; int __fastcall j_j_mali_memtrack_get_memory(int, int, void *, unsigned int *)
.text:000025DC                               j_j_mali_memtrack_get_memory  ; CODE XREF: exynos_memtrack_get_memory+1A↑j
.text:000025DC 78 47                         BX              PC
.text:000025DC
.text:000025DC                               ; ---------------------------------------------------------------------------
.text:000025DE C0 46                         ALIGN 0x10
.text:000025E0                               CODE32
.text:000025E0
.text:000025E0                               loc_25E0                      ; CODE XREF: j_j_mali_memtrack_get_memory↑j
.text:000025E0 00 C0 9F E5                   LDR             R12, =(j_mali_memtrack_get_memory - 0x25EC)
.text:000025E4 0F F0 8C E0                   ADD             PC, R12, PC   ; j_mali_memtrack_get_memory
.text:000025E4
.text:000025E4                               ; ---------------------------------------------------------------------------
.text:000025E8 6C E3 FF FF                   off_25E8 DCD j_mali_memtrack_get_memory - 0x25EC
.text:000025E8                                                             ; DATA XREF: j_j_mali_memtrack_get_memory:loc_25E0↑r
.text:000025E8                               ; End of function j_j_mali_memtrack_get_memory
.text:000025E8
.text:000025EC                               CODE16
.text:000025EC
.text:000025EC                               ; =============== S U B R O U T I N E =======================================
.text:000025EC
.text:000025EC                               ; Attributes: thunk
.text:000025EC
.text:000025EC                               ; int __fastcall j_j_ion_memtrack_get_memory(int, int, _DWORD *, int *)
.text:000025EC                               j_j_ion_memtrack_get_memory   ; CODE XREF: exynos_memtrack_get_memory+26↑j
.text:000025EC 78 47                         BX              PC
.text:000025EC
.text:000025EC                               ; ---------------------------------------------------------------------------
.text:000025EE C0 46                         ALIGN 0x10
.text:000025F0                               CODE32
.text:000025F0
.text:000025F0                               loc_25F0                      ; CODE XREF: j_j_ion_memtrack_get_memory↑j
.text:000025F0 00 C0 9F E5                   LDR             R12, =(j_ion_memtrack_get_memory - 0x25FC)
.text:000025F4 0F F0 8C E0                   ADD             PC, R12, PC   ; j_ion_memtrack_get_memory
.text:000025F4
.text:000025F4                               ; ---------------------------------------------------------------------------
.text:000025F8 68 E3 FF FF                   off_25F8 DCD j_ion_memtrack_get_memory - 0x25FC
.text:000025F8                                                             ; DATA XREF: j_j_ion_memtrack_get_memory:loc_25F0↑r
.text:000025F8                               ; End of function j_j_ion_memtrack_get_memory
.text:000025F8
.text:000025FC                               CODE16
.text:000025FC
.text:000025FC                               ; =============== S U B R O U T I N E =======================================
.text:000025FC
.text:000025FC                               ; Attributes: thunk
.text:000025FC
.text:000025FC                               ; int __fastcall sub_25FC(int)
.text:000025FC                               sub_25FC                      ; CODE XREF: sub_1D40+12↑j
.text:000025FC 78 47                         BX              PC
.text:000025FC
.text:000025FC                               ; ---------------------------------------------------------------------------
.text:000025FE C0 46                         ALIGN 0x10
.text:00002600                               CODE32
.text:00002600
.text:00002600                               loc_2600                      ; CODE XREF: sub_25FC↑j
.text:00002600 00 C0 9F E5                   LDR             R12, =(sub_2558 - 0x260C)
.text:00002604 0F F0 8C E0                   ADD             PC, R12, PC   ; sub_2558
.text:00002604
.text:00002604                               ; ---------------------------------------------------------------------------
.text:00002608 4C FF FF FF                   off_2608 DCD sub_2558 - 0x260C
.text:00002608                                                             ; DATA XREF: sub_25FC:loc_2600↑r
.text:00002608                               ; End of function sub_25FC
.text:00002608
.text:0000260C                               CODE16
.text:0000260C
.text:0000260C                               ; =============== S U B R O U T I N E =======================================
.text:0000260C
.text:0000260C                               ; Attributes: thunk
.text:0000260C
.text:0000260C                               ; _DWORD *__fastcall sub_260C(int *)
.text:0000260C                               sub_260C                      ; CODE XREF: sub_1ECC+50↑j
.text:0000260C 78 47                         BX              PC
.text:0000260C
.text:0000260C                               ; ---------------------------------------------------------------------------
.text:0000260E C0 46                         ALIGN 0x10
.text:00002610                               CODE32
.text:00002610
.text:00002610                               loc_2610                      ; CODE XREF: sub_260C↑j
.text:00002610 00 C0 9F E5                   LDR             R12, =(sub_25C8 - 0x261C)
.text:00002614 0F F0 8C E0                   ADD             PC, R12, PC   ; sub_25C8
.text:00002614
.text:00002614                               ; ---------------------------------------------------------------------------
.text:00002618 AC FF FF FF                   off_2618 DCD sub_25C8 - 0x261C
.text:00002618                                                             ; DATA XREF: sub_260C:loc_2610↑r
.text:00002618                               ; End of function sub_260C
.text:00002618
.text:00002618                               ; .text ends
.text:00002618
.ARM.exidx:0000261C                               ; ===========================================================================
.ARM.exidx:0000261C
.ARM.exidx:0000261C                               ; Segment type: Pure data
.ARM.exidx:0000261C                               AREA .ARM.exidx, DATA, READONLY
.ARM.exidx:0000261C 6C                            unk_261C DCB 0x6C ; l         ; DATA XREF: LOAD:0000011C↑o
.ARM.exidx:0000261D E5                            DCB 0xE5
.ARM.exidx:0000261E FF                            DCB 0xFF
.ARM.exidx:0000261F 7F                            DCB 0x7F ; 
.ARM.exidx:00002620 B0                            DCB 0xB0
.ARM.exidx:00002621 B0                            DCB 0xB0
.ARM.exidx:00002622 B0                            DCB 0xB0
.ARM.exidx:00002623 80                            DCB 0x80
.ARM.exidx:00002624 94                            DCB 0x94
.ARM.exidx:00002625 E5                            DCB 0xE5
.ARM.exidx:00002626 FF                            DCB 0xFF
.ARM.exidx:00002627 7F                            DCB 0x7F ; 
.ARM.exidx:00002628 58                            DCB 0x58 ; X
.ARM.exidx:00002629 09                            DCB    9
.ARM.exidx:0000262A 00                            DCB    0
.ARM.exidx:0000262B 00                            DCB    0
.ARM.exidx:0000262C 58                            DCB 0x58 ; X
.ARM.exidx:0000262D E8                            DCB 0xE8
.ARM.exidx:0000262E FF                            DCB 0xFF
.ARM.exidx:0000262F 7F                            DCB 0x7F ; 
.ARM.exidx:00002630 60                            DCB 0x60 ; `
.ARM.exidx:00002631 09                            DCB    9
.ARM.exidx:00002632 00                            DCB    0
.ARM.exidx:00002633 00                            DCB    0
.ARM.exidx:00002634 78                            DCB 0x78 ; x
.ARM.exidx:00002635 E9                            DCB 0xE9
.ARM.exidx:00002636 FF                            DCB 0xFF
.ARM.exidx:00002637 7F                            DCB 0x7F ; 
.ARM.exidx:00002638 B0                            DCB 0xB0
.ARM.exidx:00002639 B0                            DCB 0xB0
.ARM.exidx:0000263A B0                            DCB 0xB0
.ARM.exidx:0000263B 80                            DCB 0x80
.ARM.exidx:0000263C C4                            DCB 0xC4
.ARM.exidx:0000263D E9                            DCB 0xE9
.ARM.exidx:0000263E FF                            DCB 0xFF
.ARM.exidx:0000263F 7F                            DCB 0x7F ; 
.ARM.exidx:00002640 B0                            DCB 0xB0
.ARM.exidx:00002641 AF                            DCB 0xAF
.ARM.exidx:00002642 02                            DCB    2
.ARM.exidx:00002643 80                            DCB 0x80
.ARM.exidx:00002644 6C                            DCB 0x6C ; l
.ARM.exidx:00002645 EC                            DCB 0xEC
.ARM.exidx:00002646 FF                            DCB 0xFF
.ARM.exidx:00002647 7F                            DCB 0x7F ; 
.ARM.exidx:00002648 B0                            DCB 0xB0
.ARM.exidx:00002649 B0                            DCB 0xB0
.ARM.exidx:0000264A AA                            DCB 0xAA
.ARM.exidx:0000264B 80                            DCB 0x80
.ARM.exidx:0000264C 94                            DCB 0x94
.ARM.exidx:0000264D ED                            DCB 0xED
.ARM.exidx:0000264E FF                            DCB 0xFF
.ARM.exidx:0000264F 7F                            DCB 0x7F ; 
.ARM.exidx:00002650 B0                            DCB 0xB0
.ARM.exidx:00002651 AE                            DCB 0xAE
.ARM.exidx:00002652 05                            DCB    5
.ARM.exidx:00002653 80                            DCB 0x80
.ARM.exidx:00002654 C8                            DCB 0xC8
.ARM.exidx:00002655 EE                            DCB 0xEE
.ARM.exidx:00002656 FF                            DCB 0xFF
.ARM.exidx:00002657 7F                            DCB 0x7F ; 
.ARM.exidx:00002658 B0                            DCB 0xB0
.ARM.exidx:00002659 B0                            DCB 0xB0
.ARM.exidx:0000265A B0                            DCB 0xB0
.ARM.exidx:0000265B 80                            DCB 0x80
.ARM.exidx:0000265C C8                            DCB 0xC8
.ARM.exidx:0000265D EE                            DCB 0xEE
.ARM.exidx:0000265E FF                            DCB 0xFF
.ARM.exidx:0000265F 7F                            DCB 0x7F ; 
.ARM.exidx:00002660 0B                            DCB  0xB
.ARM.exidx:00002661 84                            DCB 0x84
.ARM.exidx:00002662 0B                            DCB  0xB
.ARM.exidx:00002663 80                            DCB 0x80
.ARM.exidx:00002664 1C                            DCB 0x1C
.ARM.exidx:00002665 EF                            DCB 0xEF
.ARM.exidx:00002666 FF                            DCB 0xFF
.ARM.exidx:00002667 7F                            DCB 0x7F ; 
.ARM.exidx:00002668 B0                            DCB 0xB0
.ARM.exidx:00002669 B0                            DCB 0xB0
.ARM.exidx:0000266A B0                            DCB 0xB0
.ARM.exidx:0000266B 80                            DCB 0x80
.ARM.exidx:0000266C 24                            DCB 0x24 ; $
.ARM.exidx:0000266D EF                            DCB 0xEF
.ARM.exidx:0000266E FF                            DCB 0xFF
.ARM.exidx:0000266F 7F                            DCB 0x7F ; 
.ARM.exidx:00002670 2C                            DCB 0x2C ; ,
.ARM.exidx:00002671 09                            DCB    9
.ARM.exidx:00002672 00                            DCB    0
.ARM.exidx:00002673 00                            DCB    0
.ARM.exidx:00002674 C8                            DCB 0xC8
.ARM.exidx:00002675 EF                            DCB 0xEF
.ARM.exidx:00002676 FF                            DCB 0xFF
.ARM.exidx:00002677 7F                            DCB 0x7F ; 
.ARM.exidx:00002678 30                            DCB 0x30 ; 0
.ARM.exidx:00002679 09                            DCB    9
.ARM.exidx:0000267A 00                            DCB    0
.ARM.exidx:0000267B 00                            DCB    0
.ARM.exidx:0000267C AC                            DCB 0xAC
.ARM.exidx:0000267D F0                            DCB 0xF0
.ARM.exidx:0000267E FF                            DCB 0xFF
.ARM.exidx:0000267F 7F                            DCB 0x7F ; 
.ARM.exidx:00002680 B0                            DCB 0xB0
.ARM.exidx:00002681 B0                            DCB 0xB0
.ARM.exidx:00002682 B0                            DCB 0xB0
.ARM.exidx:00002683 80                            DCB 0x80
.ARM.exidx:00002684 A8                            DCB 0xA8
.ARM.exidx:00002685 F0                            DCB 0xF0
.ARM.exidx:00002686 FF                            DCB 0xFF
.ARM.exidx:00002687 7F                            DCB 0x7F ; 
.ARM.exidx:00002688 2C                            DCB 0x2C ; ,
.ARM.exidx:00002689 09                            DCB    9
.ARM.exidx:0000268A 00                            DCB    0
.ARM.exidx:0000268B 00                            DCB    0
.ARM.exidx:0000268C D4                            DCB 0xD4
.ARM.exidx:0000268D F0                            DCB 0xF0
.ARM.exidx:0000268E FF                            DCB 0xFF
.ARM.exidx:0000268F 7F                            DCB 0x7F ; 
.ARM.exidx:00002690 08                            DCB    8
.ARM.exidx:00002691 84                            DCB 0x84
.ARM.exidx:00002692 01                            DCB    1
.ARM.exidx:00002693 80                            DCB 0x80
.ARM.exidx:00002694 FC                            DCB 0xFC
.ARM.exidx:00002695 F0                            DCB 0xF0
.ARM.exidx:00002696 FF                            DCB 0xFF
.ARM.exidx:00002697 7F                            DCB 0x7F ; 
.ARM.exidx:00002698 08                            DCB    8
.ARM.exidx:00002699 84                            DCB 0x84
.ARM.exidx:0000269A 0B                            DCB  0xB
.ARM.exidx:0000269B 80                            DCB 0x80
.ARM.exidx:0000269C 6C                            DCB 0x6C ; l
.ARM.exidx:0000269D F1                            DCB 0xF1
.ARM.exidx:0000269E FF                            DCB 0xFF
.ARM.exidx:0000269F 7F                            DCB 0x7F ; 
.ARM.exidx:000026A0 B0                            DCB 0xB0
.ARM.exidx:000026A1 B0                            DCB 0xB0
.ARM.exidx:000026A2 B0                            DCB 0xB0
.ARM.exidx:000026A3 80                            DCB 0x80
.ARM.exidx:000026A4 70                            DCB 0x70 ; p
.ARM.exidx:000026A5 F1                            DCB 0xF1
.ARM.exidx:000026A6 FF                            DCB 0xFF
.ARM.exidx:000026A7 7F                            DCB 0x7F ; 
.ARM.exidx:000026A8 B0                            DCB 0xB0
.ARM.exidx:000026A9 08                            DCB    8
.ARM.exidx:000026AA 84                            DCB 0x84
.ARM.exidx:000026AB 80                            DCB 0x80
.ARM.exidx:000026AC 7C                            DCB 0x7C ; |
.ARM.exidx:000026AD F1                            DCB 0xF1
.ARM.exidx:000026AE FF                            DCB 0xFF
.ARM.exidx:000026AF 7F                            DCB 0x7F ; 
.ARM.exidx:000026B0 01                            DCB    1
.ARM.exidx:000026B1 00                            DCB    0
.ARM.exidx:000026B2 00                            DCB    0
.ARM.exidx:000026B3 00                            DCB    0
.ARM.exidx:000026B4 FC                            DCB 0xFC
.ARM.exidx:000026B5 F1                            DCB 0xF1
.ARM.exidx:000026B6 FF                            DCB 0xFF
.ARM.exidx:000026B7 7F                            DCB 0x7F ; 
.ARM.exidx:000026B8 B0                            DCB 0xB0
.ARM.exidx:000026B9 B0                            DCB 0xB0
.ARM.exidx:000026BA A8                            DCB 0xA8
.ARM.exidx:000026BB 80                            DCB 0x80
.ARM.exidx:000026BC 38                            DCB 0x38 ; 8
.ARM.exidx:000026BD F2                            DCB 0xF2
.ARM.exidx:000026BE FF                            DCB 0xFF
.ARM.exidx:000026BF 7F                            DCB 0x7F ; 
.ARM.exidx:000026C0 B0                            DCB 0xB0
.ARM.exidx:000026C1 B0                            DCB 0xB0
.ARM.exidx:000026C2 AA                            DCB 0xAA
.ARM.exidx:000026C3 80                            DCB 0x80
.ARM.exidx:000026C4 D2                            DCB 0xD2
.ARM.exidx:000026C5 F2                            DCB 0xF2
.ARM.exidx:000026C6 FF                            DCB 0xFF
.ARM.exidx:000026C7 7F                            DCB 0x7F ; 
.ARM.exidx:000026C8 B0                            DCB 0xB0
.ARM.exidx:000026C9 B0                            DCB 0xB0
.ARM.exidx:000026CA AC                            DCB 0xAC
.ARM.exidx:000026CB 80                            DCB 0x80
.ARM.exidx:000026CC 02                            DCB    2
.ARM.exidx:000026CD F3                            DCB 0xF3
.ARM.exidx:000026CE FF                            DCB 0xFF
.ARM.exidx:000026CF 7F                            DCB 0x7F ; 
.ARM.exidx:000026D0 B0                            DCB 0xB0
.ARM.exidx:000026D1 B0                            DCB 0xB0
.ARM.exidx:000026D2 B0                            DCB 0xB0
.ARM.exidx:000026D3 80                            DCB 0x80
.ARM.exidx:000026D4 00                            DCB    0
.ARM.exidx:000026D5 F3                            DCB 0xF3
.ARM.exidx:000026D6 FF                            DCB 0xFF
.ARM.exidx:000026D7 7F                            DCB 0x7F ; 
.ARM.exidx:000026D8 B0                            DCB 0xB0
.ARM.exidx:000026D9 B0                            DCB 0xB0
.ARM.exidx:000026DA A8                            DCB 0xA8
.ARM.exidx:000026DB 80                            DCB 0x80
.ARM.exidx:000026DC 16                            DCB 0x16
.ARM.exidx:000026DD F3                            DCB 0xF3
.ARM.exidx:000026DE FF                            DCB 0xFF
.ARM.exidx:000026DF 7F                            DCB 0x7F ; 
.ARM.exidx:000026E0 B0                            DCB 0xB0
.ARM.exidx:000026E1 08                            DCB    8
.ARM.exidx:000026E2 84                            DCB 0x84
.ARM.exidx:000026E3 80                            DCB 0x80
.ARM.exidx:000026E4 20                            DCB 0x20
.ARM.exidx:000026E5 F3                            DCB 0xF3
.ARM.exidx:000026E6 FF                            DCB 0xFF
.ARM.exidx:000026E7 7F                            DCB 0x7F ; 
.ARM.exidx:000026E8 B0                            DCB 0xB0
.ARM.exidx:000026E9 B0                            DCB 0xB0
.ARM.exidx:000026EA B0                            DCB 0xB0
.ARM.exidx:000026EB 80                            DCB 0x80
.ARM.exidx:000026EC 40                            DCB 0x40 ; @
.ARM.exidx:000026ED F3                            DCB 0xF3
.ARM.exidx:000026EE FF                            DCB 0xFF
.ARM.exidx:000026EF 7F                            DCB 0x7F ; 
.ARM.exidx:000026F0 B0                            DCB 0xB0
.ARM.exidx:000026F1 0B                            DCB  0xB
.ARM.exidx:000026F2 84                            DCB 0x84
.ARM.exidx:000026F3 80                            DCB 0x80
.ARM.exidx:000026F4 C4                            DCB 0xC4
.ARM.exidx:000026F5 F3                            DCB 0xF3
.ARM.exidx:000026F6 FF                            DCB 0xFF
.ARM.exidx:000026F7 7F                            DCB 0x7F ; 
.ARM.exidx:000026F8 B0                            DCB 0xB0
.ARM.exidx:000026F9 B0                            DCB 0xB0
.ARM.exidx:000026FA AA                            DCB 0xAA
.ARM.exidx:000026FB 80                            DCB 0x80
.ARM.exidx:000026FC 48                            DCB 0x48 ; H
.ARM.exidx:000026FD F4                            DCB 0xF4
.ARM.exidx:000026FE FF                            DCB 0xFF
.ARM.exidx:000026FF 7F                            DCB 0x7F ; 
.ARM.exidx:00002700 B0                            DCB 0xB0
.ARM.exidx:00002701 B0                            DCB 0xB0
.ARM.exidx:00002702 B0                            DCB 0xB0
.ARM.exidx:00002703 80                            DCB 0x80
.ARM.exidx:00002704 64                            DCB 0x64 ; d
.ARM.exidx:00002705 F4                            DCB 0xF4
.ARM.exidx:00002706 FF                            DCB 0xFF
.ARM.exidx:00002707 7F                            DCB 0x7F ; 
.ARM.exidx:00002708 B0                            DCB 0xB0
.ARM.exidx:00002709 0B                            DCB  0xB
.ARM.exidx:0000270A 84                            DCB 0x84
.ARM.exidx:0000270B 80                            DCB 0x80
.ARM.exidx:0000270C 00                            DCB    0
.ARM.exidx:0000270D F5                            DCB 0xF5
.ARM.exidx:0000270E FF                            DCB 0xFF
.ARM.exidx:0000270F 7F                            DCB 0x7F ; 
.ARM.exidx:00002710 B0                            DCB 0xB0
.ARM.exidx:00002711 AB                            DCB 0xAB
.ARM.exidx:00002712 00                            DCB    0
.ARM.exidx:00002713 80                            DCB 0x80
.ARM.exidx:00002714 C4                            DCB 0xC4
.ARM.exidx:00002715 F5                            DCB 0xF5
.ARM.exidx:00002716 FF                            DCB 0xFF
.ARM.exidx:00002717 7F                            DCB 0x7F ; 
.ARM.exidx:00002718 B0                            DCB 0xB0
.ARM.exidx:00002719 0B                            DCB  0xB
.ARM.exidx:0000271A 84                            DCB 0x84
.ARM.exidx:0000271B 80                            DCB 0x80
.ARM.exidx:0000271C 0C                            DCB  0xC
.ARM.exidx:0000271D F6                            DCB 0xF6
.ARM.exidx:0000271E FF                            DCB 0xFF
.ARM.exidx:0000271F 7F                            DCB 0x7F ; 
.ARM.exidx:00002720 B0                            DCB 0xB0
.ARM.exidx:00002721 B0                            DCB 0xB0
.ARM.exidx:00002722 A8                            DCB 0xA8
.ARM.exidx:00002723 80                            DCB 0x80
.ARM.exidx:00002724 32                            DCB 0x32 ; 2
.ARM.exidx:00002725 F6                            DCB 0xF6
.ARM.exidx:00002726 FF                            DCB 0xFF
.ARM.exidx:00002727 7F                            DCB 0x7F ; 
.ARM.exidx:00002728 B0                            DCB 0xB0
.ARM.exidx:00002729 B0                            DCB 0xB0
.ARM.exidx:0000272A B0                            DCB 0xB0
.ARM.exidx:0000272B 80                            DCB 0x80
.ARM.exidx:0000272C 30                            DCB 0x30 ; 0
.ARM.exidx:0000272D F6                            DCB 0xF6
.ARM.exidx:0000272E FF                            DCB 0xFF
.ARM.exidx:0000272F 7F                            DCB 0x7F ; 
.ARM.exidx:00002730 B0                            DCB 0xB0
.ARM.exidx:00002731 AB                            DCB 0xAB
.ARM.exidx:00002732 06                            DCB    6
.ARM.exidx:00002733 80                            DCB 0x80
.ARM.exidx:00002734 98                            DCB 0x98
.ARM.exidx:00002735 F6                            DCB 0xF6
.ARM.exidx:00002736 FF                            DCB 0xFF
.ARM.exidx:00002737 7F                            DCB 0x7F ; 
.ARM.exidx:00002738 B0                            DCB 0xB0
.ARM.exidx:00002739 AA                            DCB 0xAA
.ARM.exidx:0000273A 03                            DCB    3
.ARM.exidx:0000273B 80                            DCB 0x80
.ARM.exidx:0000273C 00                            DCB    0
.ARM.exidx:0000273D F7                            DCB 0xF7
.ARM.exidx:0000273E FF                            DCB 0xFF
.ARM.exidx:0000273F 7F                            DCB 0x7F ; 
.ARM.exidx:00002740 B0                            DCB 0xB0
.ARM.exidx:00002741 B0                            DCB 0xB0
.ARM.exidx:00002742 B0                            DCB 0xB0
.ARM.exidx:00002743 80                            DCB 0x80
.ARM.exidx:00002744 08                            DCB    8
.ARM.exidx:00002745 F7                            DCB 0xF7
.ARM.exidx:00002746 FF                            DCB 0xFF
.ARM.exidx:00002747 7F                            DCB 0x7F ; 
.ARM.exidx:00002748 08                            DCB    8
.ARM.exidx:00002749 84                            DCB 0x84
.ARM.exidx:0000274A 01                            DCB    1
.ARM.exidx:0000274B 80                            DCB 0x80
.ARM.exidx:0000274C 2C                            DCB 0x2C ; ,
.ARM.exidx:0000274D F7                            DCB 0xF7
.ARM.exidx:0000274E FF                            DCB 0xFF
.ARM.exidx:0000274F 7F                            DCB 0x7F ; 
.ARM.exidx:00002750 0B                            DCB  0xB
.ARM.exidx:00002751 84                            DCB 0x84
.ARM.exidx:00002752 03                            DCB    3
.ARM.exidx:00002753 80                            DCB 0x80
.ARM.exidx:00002754 78                            DCB 0x78 ; x
.ARM.exidx:00002755 F7                            DCB 0xF7
.ARM.exidx:00002756 FF                            DCB 0xFF
.ARM.exidx:00002757 7F                            DCB 0x7F ; 
.ARM.exidx:00002758 B0                            DCB 0xB0
.ARM.exidx:00002759 B0                            DCB 0xB0
.ARM.exidx:0000275A A8                            DCB 0xA8
.ARM.exidx:0000275B 80                            DCB 0x80
.ARM.exidx:0000275C C8                            DCB 0xC8
.ARM.exidx:0000275D F7                            DCB 0xF7
.ARM.exidx:0000275E FF                            DCB 0xFF
.ARM.exidx:0000275F 7F                            DCB 0x7F ; 
.ARM.exidx:00002760 B0                            DCB 0xB0
.ARM.exidx:00002761 AD                            DCB 0xAD
.ARM.exidx:00002762 0A                            DCB  0xA
.ARM.exidx:00002763 80                            DCB 0x80
.ARM.exidx:00002764 64                            DCB 0x64 ; d
.ARM.exidx:00002765 F9                            DCB 0xF9
.ARM.exidx:00002766 FF                            DCB 0xFF
.ARM.exidx:00002767 7F                            DCB 0x7F ; 
.ARM.exidx:00002768 B0                            DCB 0xB0
.ARM.exidx:00002769 B0                            DCB 0xB0
.ARM.exidx:0000276A AC                            DCB 0xAC
.ARM.exidx:0000276B 80                            DCB 0x80
.ARM.exidx:0000276C A4                            DCB 0xA4
.ARM.exidx:0000276D F9                            DCB 0xF9
.ARM.exidx:0000276E FF                            DCB 0xFF
.ARM.exidx:0000276F 7F                            DCB 0x7F ; 
.ARM.exidx:00002770 B0                            DCB 0xB0
.ARM.exidx:00002771 B0                            DCB 0xB0
.ARM.exidx:00002772 B0                            DCB 0xB0
.ARM.exidx:00002773 80                            DCB 0x80
.ARM.exidx:00002774 E4                            DCB 0xE4
.ARM.exidx:00002775 FD                            DCB 0xFD
.ARM.exidx:00002776 FF                            DCB 0xFF
.ARM.exidx:00002777 7F                            DCB 0x7F ; 
.ARM.exidx:00002778 01                            DCB    1
.ARM.exidx:00002779 00                            DCB    0
.ARM.exidx:0000277A 00                            DCB    0
.ARM.exidx:0000277B 00                            DCB    0
.ARM.exidx:0000277B                               ; .ARM.exidx ends
.ARM.exidx:0000277B
LOAD:0000277C                               ; ===========================================================================
LOAD:0000277C
LOAD:0000277C                               ; Segment type: Pure code
LOAD:0000277C                               AREA LOAD, CODE, ALIGN=12
LOAD:0000277C                               CODE32
LOAD:0000277C 00 00 00 00                   ALIGN 0x10
LOAD:0000277C                               ; LOAD ends
LOAD:0000277C
.rodata:00002780                               ; ===========================================================================
.rodata:00002780
.rodata:00002780                               ; Segment type: Pure data
.rodata:00002780                               AREA .rodata, DATA, READONLY, ALIGN=3
.rodata:00002780 6D 65 6D 74 72 61 63 6B 00    aMemtrack DCB "memtrack",0    ; DATA XREF: .data:0000500C↓o
.rodata:00002789 45 78 79 6E 6F 73 20 4D 65 6D+aExynosMemoryTr DCB "Exynos Memory Tracker HAL",0
.rodata:00002789 6F 72 79 20 54 72 61 63 6B 65+                              ; DATA XREF: .data:00005010↓o
.rodata:000027A3 54 68 65 20 41 6E 64 72 6F 69+aTheAndroidOpen DCB "The Android Open Source Project",0
.rodata:000027A3 64 20 4F 70 65 6E 20 53 6F 75+                              ; DATA XREF: .data:00005014↓o
.rodata:000027C3 72 00                         aR DCB "r",0                  ; DATA XREF: mali_memtrack_get_memory:loc_D0C↑o
.rodata:000027C3                                                             ; mali_memtrack_get_memory+158↑o
.rodata:000027C3                                                             ; .text:off_E60↑o
.rodata:000027C3                                                             ; ion_memtrack_get_memory+60↑o
.rodata:000027C3                                                             ; ion_memtrack_get_memory+64↑o
.rodata:000027C3                                                             ; .text:off_F98↑o
.rodata:000027C5 25 2A 73 20 25 31 35 73 20 25+aS15s15sSSD DCB "%*s %15s %15s %*s %*s %d ",0xA,0
.rodata:000027C5 31 35 73 20 25 2A 73 20 25 2A+                              ; DATA XREF: mali_memtrack_get_memory+1CC↑o
.rodata:000027C5 73 20 25 64 20 0A 00                                        ; mali_memtrack_get_memory+1D4↑o
.rodata:000027C5                                                             ; .text:off_E74↑o
.rodata:000027E0 4E 61 74 69 76 65 00          aNative DCB "Native",0        ; DATA XREF: mali_memtrack_get_memory+1E2↑o
.rodata:000027E0                                                             ; mali_memtrack_get_memory+1E6↑o
.rodata:000027E0                                                             ; .text:off_E78↑o
.rodata:000027E7 42 75 66 66 65 72 00          aBuffer DCB "Buffer",0        ; DATA XREF: mali_memtrack_get_memory+1EE↑o
.rodata:000027E7                                                             ; mali_memtrack_get_memory+1F2↑o
.rodata:000027E7                                                             ; .text:off_E7C↑o
.rodata:000027EE 25 31 35 73 20 25 2A 73 20 25+a15sSSD DCB "%15s %*s %*s %d ",0xA,0
.rodata:000027EE 2A 73 20 25 64 20 0A 00                                     ; DATA XREF: mali_memtrack_get_memory+1A0↑o
.rodata:000027EE                                                             ; mali_memtrack_get_memory+1A8↑o
.rodata:000027EE                                                             ; .text:off_E6C↑o
.rodata:00002800 54 6F 74 61 6C 00             aTotal DCB "Total",0          ; DATA XREF: mali_memtrack_get_memory+1B2↑o
.rodata:00002800                                                             ; mali_memtrack_get_memory+1B6↑o
.rodata:00002800                                                             ; .text:off_E70↑o
.rodata:00002806 2F 64 2F 6D 61 6C 69 2F 6D 65+aDMaliMem DCB "/d/mali/mem/",0
.rodata:00002806 6D 2F 00                                                    ; DATA XREF: mali_memtrack_get_memory+50↑o
.rodata:00002806                                                             ; mali_memtrack_get_memory+56↑o
.rodata:00002806                                                             ; mali_memtrack_get_memory+A0↑o
.rodata:00002806                                                             ; mali_memtrack_get_memory+AE↑o
.rodata:00002806                                                             ; mali_memtrack_get_memory+10C↑o
.rodata:00002806                                                             ; mali_memtrack_get_memory+112↑o
.rodata:00002806                                                             ; .text:off_E2C↑o
.rodata:00002806                                                             ; .text:off_E3C↑o
.rodata:00002806                                                             ; .text:off_E4C↑o
.rodata:00002813 25 64 00                      aD DCB "%d",0                 ; DATA XREF: mali_memtrack_get_memory+5C↑o
.rodata:00002813                                                             ; mali_memtrack_get_memory+64↑o
.rodata:00002813                                                             ; .text:off_E30↑o
.rodata:00002816 25 73 25 73 25 73 00          aSSS DCB "%s%s%s",0           ; DATA XREF: mali_memtrack_get_memory+A4↑o
.rodata:00002816                                                             ; mali_memtrack_get_memory+B0↑o
.rodata:00002816                                                             ; .text:off_E40↑o
.rodata:0000281D 2F 6D 65 6D 5F 70 72 6F 66 69+aMemProfile DCB "/mem_profile",0
.rodata:0000281D 6C 65 00                                                    ; DATA XREF: mali_memtrack_get_memory+D0↑o
.rodata:0000281D                                                             ; mali_memtrack_get_memory+DA↑o
.rodata:0000281D                                                             ; .text:off_E80↑o
.rodata:0000282A 6C 69 62 6D 65 6D 74 72 61 63+aLibmemtrackHwC DCB "libmemtrack-hw -- Couldn't open the directory - %s ",0xD,0xA,0
.rodata:0000282A 6B 2D 68 77 20 2D 2D 20 43 6F+                              ; DATA XREF: mali_memtrack_get_memory:loc_CC0↑o
.rodata:0000282A 75 6C 64 6E 27 74 20 6F 70 65+                              ; mali_memtrack_get_memory+110↑o
.rodata:0000282A 6E 20 74 68 65 20 64 69 72 65+                              ; .text:off_E48↑o
.rodata:00002860 2F 73 79 73 2F 6B 65 72 6E 65+aSysKernelDebug DCB "/sys/kernel/debug/ion/clients",0
.rodata:00002860 6C 2F 64 65 62 75 67 2F 69 6F+                              ; DATA XREF: ion_memtrack_get_memory+2C↑o
.rodata:00002860 6E 2F 63 6C 69 65 6E 74 73 00                               ; ion_memtrack_get_memory+30↑o
.rodata:00002860                                                             ; ion_memtrack_get_memory:loc_ECA↑o
.rodata:00002860                                                             ; ion_memtrack_get_memory+4A↑o
.rodata:00002860                                                             ; .text:off_F84↑o
.rodata:00002860                                                             ; .text:off_F90↑o
.rodata:0000287E 25 73 2F 25 64 2D 30 00       aSD0 DCB "%s/%d-0",0          ; DATA XREF: ion_memtrack_get_memory+4E↑o
.rodata:0000287E                                                             ; ion_memtrack_get_memory+50↑o
.rodata:0000287E                                                             ; .text:off_F94↑o
.rodata:00002886 25 73 2F 25 64 00             aSD DCB "%s/%d",0             ; DATA XREF: ion_memtrack_get_memory+40↑o
.rodata:00002886                                                             ; ion_memtrack_get_memory+42↑o
.rodata:00002886                                                             ; .text:off_F8C↑o
.rodata:0000288C 2F 73 79 73 2F 6B 65 72 6E 65+aSysKernelDebug_0 DCB "/sys/kernel/debug/ion/",0
.rodata:0000288C 6C 2F 64 65 62 75 67 2F 69 6F+                              ; DATA XREF: ion_memtrack_get_memory+38↑o
.rodata:0000288C 6E 2F 00                                                    ; ion_memtrack_get_memory+3C↑o
.rodata:0000288C                                                             ; .text:off_F88↑o
.rodata:000028A3 69 6F 6E 5F 6E 6F 6E 63 6F 6E+aIonNoncontigHe DCB "ion_noncontig_he",0
.rodata:000028A3 74 69 67 5F 68 65 00                                        ; DATA XREF: ion_memtrack_get_memory+8C↑o
.rodata:000028A3                                                             ; ion_memtrack_get_memory+96↑o
.rodata:000028A3                                                             ; .text:off_FA0↑o
.rodata:000028B4 25 2A 73 20 25 75 0A 00       aSU DCB "%*s %u",0xA,0        ; DATA XREF: ion_memtrack_get_memory+90↑o
.rodata:000028B4                                                             ; ion_memtrack_get_memory+98↑o
.rodata:000028B4                                                             ; .text:off_FA4↑o
.rodata:000028BC 76 6F 69 64 20 5F 55 6E 77 69+aVoidUnwindResu DCB "void _Unwind_Resume(_Unwind_Exception *)",0
.rodata:000028BC 6E 64 5F 52 65 73 75 6D 65 28+                              ; DATA XREF: sub_172C+1A↑o
.rodata:000028BC 5F 55 6E 77 69 6E 64 5F 45 78+                              ; sub_172C+22↑o
.rodata:000028BC 63 65 70 74 69 6F 6E 20 2A 29+                              ; .text:off_1758↑o
.rodata:000028E5 65 78 74 65 72 6E 61 6C 2F 6C+aExternalLibunw DCB "external/libunwind_llvm/src/Unwind-EHABI.cpp",0
.rodata:000028E5 69 62 75 6E 77 69 6E 64 5F 6C+                              ; DATA XREF: sub_1760+8↑o
.rodata:000028E5 6C 76 6D 2F 73 72 63 2F 55 6E+                              ; sub_1760+E↑o
.rodata:000028E5 77 69 6E 64 2D 45 48 41 42 49+                              ; .text:off_178C↑o
.rodata:00002912 5F 55 6E 77 69 6E 64 5F 52 65+aUnwindResumeCa DCB "_Unwind_Resume() can't return",0
.rodata:00002912 73 75 6D 65 28 29 20 63 61 6E+                              ; DATA XREF: sub_172C+20↑o
.rodata:00002912 27 74 20 72 65 74 75 72 6E 00                               ; sub_172C+24↑o
.rodata:00002912                                                             ; .text:off_175C↑o
.rodata:00002930 5F 55 6E 77 69 6E 64 5F 56 52+aUnwindVrsResul DCB "_Unwind_VRS_Result _Unwind_VRS_Set(_Unwind_Context *, _Unwind_VRS_RegClass, uint32_t, _Unwind_"
.rodata:00002930 53 5F 52 65 73 75 6C 74 20 5F+                              ; DATA XREF: sub_1344:def_1350↑o
.rodata:00002930 55 6E 77 69 6E 64 5F 56 52 53+                              ; sub_1344+8A↑o
.rodata:00002930 5F 53 65 74 28 5F 55 6E 77 69+                              ; .text:off_13D8↑o
.rodata:00002930 6E 64 5F 43 6F 6E 74 65 78 74+DCB "VRS_DataRepresentation, void *)",0
.rodata:000029AE 75 6E 73 75 70 70 6F 72 74 65+aUnsupportedReg DCB "unsupported register class",0
.rodata:000029AE 64 20 72 65 67 69 73 74 65 72+                              ; DATA XREF: .text:00001330↑o
.rodata:000029AE 20 63 6C 61 73 73 00                                        ; .text:00001334↑o
.rodata:000029AE                                                             ; .text:off_1340↑o
.rodata:000029AE                                                             ; sub_1344+88↑o
.rodata:000029AE                                                             ; sub_1344+8C↑o
.rodata:000029AE                                                             ; .text:off_13DC↑o
.rodata:000029AE                                                             ; sub_13E0+120↑o
.rodata:000029AE                                                             ; sub_13E0+124↑o
.rodata:000029AE                                                             ; .text:off_1518↑o
.rodata:000029C9 5F 55 6E 77 69 6E 64 5F 56 52+aUnwindVrsResul_0 DCB "_Unwind_VRS_Result _Unwind_VRS_Pop(_Unwind_Context *, _Unwind_VRS_RegClass, uint32_t, _Unwind_"
.rodata:000029C9 53 5F 52 65 73 75 6C 74 20 5F+                              ; DATA XREF: sub_13E0:def_13FE↑o
.rodata:000029C9 55 6E 77 69 6E 64 5F 56 52 53+                              ; sub_13E0+122↑o
.rodata:000029C9 5F 50 6F 70 28 5F 55 6E 77 69+                              ; .text:off_1514↑o
.rodata:000029C9 6E 64 5F 43 6F 6E 74 65 78 74+DCB "VRS_DataRepresentation)",0
.rodata:00002A3F 5F 55 6E 77 69 6E 64 5F 52 65+aUnwindReasonCo DCB "_Unwind_Reason_Code unwind_phase2(unw_context_t *, _Unwind_Exception *, bool)",0
.rodata:00002A3F 61 73 6F 6E 5F 43 6F 64 65 20+                              ; DATA XREF: sub_163C+8E↑o
.rodata:00002A3F 75 6E 77 69 6E 64 5F 70 68 61+                              ; sub_163C+96↑o
.rodata:00002A3F 73 65 32 28 75 6E 77 5F 63 6F+                              ; .text:off_171C↑o
.rodata:00002A8D 64 75 72 69 6E 67 20 70 68 61+aDuringPhase1Pe DCB "during phase1 personality function said it would stop here, but now in phase2 it did not stop "
.rodata:00002A8D 73 65 31 20 70 65 72 73 6F 6E+                              ; DATA XREF: sub_163C+94↑o
.rodata:00002A8D 61 6C 69 74 79 20 66 75 6E 63+                              ; sub_163C+98↑o
.rodata:00002A8D 74 69 6F 6E 20 73 61 69 64 20+                              ; .text:off_1720↑o
.rodata:00002A8D 69 74 20 77 6F 75 6C 64 20 73+DCB "here",0
.rodata:00002AF0 6C 69 62 75 6E 77 69 6E 64 3A+aLibunwindSSDS DCB "libunwind: %s %s:%d - %s",0xA,0
.rodata:00002AF0 20 25 73 20 25 73 3A 25 64 20+                              ; DATA XREF: sub_1760+18↑o
.rodata:00002AF0 2D 20 25 73 0A 00                                           ; sub_1760+1A↑o
.rodata:00002AF0                                                             ; .text:off_1788↑o
.rodata:00002AF0                                                             ; sub_1E4C+A↑o
.rodata:00002AF0                                                             ; sub_1E4C+10↑o
.rodata:00002AF0                                                             ; .text:off_1E74↑o
.rodata:00002B0A 5F 55 6E 77 69 6E 64 5F 56 52+aUnwindVrsResul_1 DCB "_Unwind_VRS_Result _Unwind_VRS_Get_Internal(_Unwind_Context *, _Unwind_VRS_RegClass, uint32_t,"
.rodata:00002B0A 53 5F 52 65 73 75 6C 74 20 5F+                              ; DATA XREF: .text:def_12BC↑o
.rodata:00002B0A 55 6E 77 69 6E 64 5F 56 52 53+                              ; .text:00001332↑o
.rodata:00002B0A 5F 47 65 74 5F 49 6E 74 65 72+                              ; .text:off_133C↑o
.rodata:00002B0A 6E 61 6C 28 5F 55 6E 77 69 6E+DCB " _Unwind_VRS_DataRepresentation, void *)",0
.rodata:00002B91 65 78 74 65 72 6E 61 6C 2F 6C+aExternalLibunw_0 DCB "external/libunwind_llvm/src/UnwindCursor.hpp",0
.rodata:00002B91 69 62 75 6E 77 69 6E 64 5F 6C+                              ; DATA XREF: sub_1F24+156↑o
.rodata:00002B91 6C 76 6D 2F 73 72 63 2F 55 6E+                              ; sub_1F24+15C↑o
.rodata:00002B91 77 69 6E 64 43 75 72 73 6F 72+                              ; sub_1F24+16A↑o
.rodata:00002B91 2E 68 70 70 00                                              ; sub_1F24+170↑o
.rodata:00002B91                                                             ; .text:off_20AC↑o
.rodata:00002B91                                                             ; .text:off_20BC↑o
.rodata:00002BBE 75 69 6E 74 33 32 5F 74 20 6C+aUint32TLibunwi DCB "uint32_t libunwind::Registers_arm::getRegister(int)",0
.rodata:00002BBE 69 62 75 6E 77 69 6E 64 3A 3A+                              ; DATA XREF: sub_1A2C:loc_1A96↑o
.rodata:00002BBE 52 65 67 69 73 74 65 72 73 5F+                              ; sub_1A2C+74↑o
.rodata:00002BBE 61 72 6D 3A 3A 67 65 74 52 65+                              ; .text:off_1AAC↑o
.rodata:00002BF2 65 78 74 65 72 6E 61 6C 2F 6C+aExternalLibunw_1 DCB "external/libunwind_llvm/src/Registers.hpp",0
.rodata:00002BF2 69 62 75 6E 77 69 6E 64 5F 6C+                              ; DATA XREF: sub_1A2C+70↑o
.rodata:00002BF2 6C 76 6D 2F 73 72 63 2F 52 65+                              ; sub_1A2C+76↑o
.rodata:00002BF2 67 69 73 74 65 72 73 2E 68 70+                              ; .text:off_1AB0↑o
.rodata:00002BF2 70 00                                                       ; sub_1AB8+70↑o
.rodata:00002BF2                                                             ; sub_1AB8+76↑o
.rodata:00002BF2                                                             ; .text:off_1B3C↑o
.rodata:00002BF2                                                             ; sub_1B68+8A↑o
.rodata:00002BF2                                                             ; sub_1B68+90↑o
.rodata:00002BF2                                                             ; .text:off_1C04↑o
.rodata:00002BF2                                                             ; sub_1C0C+B2↑o
.rodata:00002BF2                                                             ; sub_1C0C+B8↑o
.rodata:00002BF2                                                             ; .text:off_1CD0↑o
.rodata:00002C1C 75 6E 73 75 70 70 6F 72 74 65+aUnsupportedArm DCB "unsupported arm register",0
.rodata:00002C1C 64 20 61 72 6D 20 72 65 67 69+                              ; DATA XREF: sub_1A2C+72↑o
.rodata:00002C1C 73 74 65 72 00                                              ; sub_1A2C+78↑o
.rodata:00002C1C                                                             ; .text:off_1AB4↑o
.rodata:00002C1C                                                             ; sub_1AB8+72↑o
.rodata:00002C1C                                                             ; sub_1AB8+78↑o
.rodata:00002C1C                                                             ; .text:off_1B40↑o
.rodata:00002C35 76 6F 69 64 20 6C 69 62 75 6E+aVoidLibunwindR DCB "void libunwind::Registers_arm::setRegister(int, uint32_t)",0
.rodata:00002C35 77 69 6E 64 3A 3A 52 65 67 69+                              ; DATA XREF: sub_1AB8:loc_1B22↑o
.rodata:00002C35 73 74 65 72 73 5F 61 72 6D 3A+                              ; sub_1AB8+74↑o
.rodata:00002C35 3A 73 65 74 52 65 67 69 73 74+                              ; .text:off_1B38↑o
.rodata:00002C6F 75 6E 77 5F 66 70 72 65 67 5F+aUnwFpregTLibun DCB "unw_fpreg_t libunwind::Registers_arm::getFloatRegister(int)",0
.rodata:00002C6F 74 20 6C 69 62 75 6E 77 69 6E+                              ; DATA XREF: sub_1B68:loc_1BEC↑o
.rodata:00002C6F 64 3A 3A 52 65 67 69 73 74 65+                              ; sub_1B68+8E↑o
.rodata:00002C6F 72 73 5F 61 72 6D 3A 3A 67 65+                              ; .text:off_1C00↑o
.rodata:00002CAB 55 6E 6B 6E 6F 77 6E 20 41 52+aUnknownArmFloa DCB "Unknown ARM float register",0
.rodata:00002CAB 4D 20 66 6C 6F 61 74 20 72 65+                              ; DATA XREF: sub_1B68+8C↑o
.rodata:00002CAB 67 69 73 74 65 72 00                                        ; sub_1B68+92↑o
.rodata:00002CAB                                                             ; .text:off_1C08↑o
.rodata:00002CAB                                                             ; sub_1C0C+B4↑o
.rodata:00002CAB                                                             ; sub_1C0C+BA↑o
.rodata:00002CAB                                                             ; .text:off_1CD4↑o
.rodata:00002CC6 76 6F 69 64 20 6C 69 62 75 6E+aVoidLibunwindR_0 DCB "void libunwind::Registers_arm::setFloatRegister(int, unw_fpreg_t)",0
.rodata:00002CC6 77 69 6E 64 3A 3A 52 65 67 69+                              ; DATA XREF: sub_1C0C:loc_1CB8↑o
.rodata:00002CC6 73 74 65 72 73 5F 61 72 6D 3A+                              ; sub_1C0C+B6↑o
.rodata:00002CC6 3A 73 65 74 46 6C 6F 61 74 52+                              ; .text:off_1CCC↑o
.rodata:00002D08 25 73 00                      aS DCB "%s",0                 ; DATA XREF: sub_1D5C+30↑o
.rodata:00002D08                                                             ; sub_1D5C+38↑o
.rodata:00002D08                                                             ; .text:off_1DC4↑o
.rodata:00002D0B 62 6F 6F 6C 20 6C 69 62 75 6E+aBoolLibunwindU DCB "bool libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm>::getInfoF"
.rodata:00002D0B 77 69 6E 64 3A 3A 55 6E 77 69+                              ; DATA XREF: sub_1F24:loc_2074↑o
.rodata:00002D0B 6E 64 43 75 72 73 6F 72 3C 6C+                              ; sub_1F24+15A↑o
.rodata:00002D0B 69 62 75 6E 77 69 6E 64 3A 3A+                              ; sub_1F24:loc_2088↑o
.rodata:00002D0B 4C 6F 63 61 6C 41 64 64 72 65+                              ; sub_1F24+16E↑o
.rodata:00002D0B 73 73 53 70 61 63 65 2C 20 6C+                              ; .text:off_20A8↑o
.rodata:00002D0B 69 62 75 6E 77 69 6E 64 3A 3A+                              ; .text:off_20B8↑o
.rodata:00002D0B 52 65 67 69 73 74 65 72 73 5F+DCB "romEHABISection(pint_t, const libunwind::UnwindInfoSections &) [A = libunwind::LocalAddressSpa"
.rodata:00002D0B 61 72 6D 3E 3A 3A 67 65 74 49+DCB "ce, R = libunwind::Registers_arm]",0
.rodata:00002DE9 75 6E 6B 6E 6F 77 6E 20 70 65+aUnknownPersona DCB "unknown personality routine",0
.rodata:00002DE9 72 73 6F 6E 61 6C 69 74 79 20+                              ; DATA XREF: sub_1F24+158↑o
.rodata:00002DE9 72 6F 75 74 69 6E 65 00                                     ; sub_1F24+15E↑o
.rodata:00002DE9                                                             ; .text:off_20C0↑o
.rodata:00002E05 69 6E 64 65 78 20 69 6E 6C 69+aIndexInlinedTa DCB "index inlined table detected but pr function requires extra words",0
.rodata:00002E05 6E 65 64 20 74 61 62 6C 65 20+                              ; DATA XREF: sub_1F24+16C↑o
.rodata:00002E05 64 65 74 65 63 74 65 64 20 62+                              ; sub_1F24+172↑o
.rodata:00002E05 75 74 20 70 72 20 66 75 6E 63+                              ; .text:off_20B0↑o
.rodata:00002E47 70 63 00                      aPc DCB "pc",0                ; DATA XREF: .text:00002118↑o
.rodata:00002E47                                                             ; .text:0000211C↑o
.rodata:00002E47                                                             ; .text:off_2414↑o
.rodata:00002E4A 6C 72 00                      aLr DCB "lr",0                ; DATA XREF: .text:loc_2294↑o
.rodata:00002E4A                                                             ; .text:00002296↑o
.rodata:00002E4A                                                             ; .text:off_2550↑o
.rodata:00002E4D 73 70 00                      aSp DCB "sp",0                ; DATA XREF: .text:loc_21E6↑o
.rodata:00002E4D                                                             ; .text:000021EA↑o
.rodata:00002E4D                                                             ; .text:off_254C↑o
.rodata:00002E50 72 30 00                      aR0 DCB "r0",0                ; DATA XREF: .text:loc_2246↑o
.rodata:00002E50                                                             ; .text:00002248↑o
.rodata:00002E50                                                             ; .text:off_2548↑o
.rodata:00002E53 72 31 00                      aR1 DCB "r1",0                ; DATA XREF: .text:loc_224C↑o
.rodata:00002E53                                                             ; .text:0000224E↑o
.rodata:00002E53                                                             ; .text:off_2544↑o
.rodata:00002E56 72 32 00                      aR2 DCB "r2",0                ; DATA XREF: .text:loc_2252↑o
.rodata:00002E56                                                             ; .text:00002254↑o
.rodata:00002E56                                                             ; .text:off_2540↑o
.rodata:00002E59 72 33 00                      aR3 DCB "r3",0                ; DATA XREF: .text:loc_2258↑o
.rodata:00002E59                                                             ; .text:0000225A↑o
.rodata:00002E59                                                             ; .text:off_253C↑o
.rodata:00002E5C 72 34 00                      aR4 DCB "r4",0                ; DATA XREF: .text:loc_225E↑o
.rodata:00002E5C                                                             ; .text:00002260↑o
.rodata:00002E5C                                                             ; .text:off_2538↑o
.rodata:00002E5F 72 35 00                      aR5 DCB "r5",0                ; DATA XREF: .text:loc_2264↑o
.rodata:00002E5F                                                             ; .text:00002266↑o
.rodata:00002E5F                                                             ; .text:off_2534↑o
.rodata:00002E62 72 36 00                      aR6 DCB "r6",0                ; DATA XREF: .text:loc_226A↑o
.rodata:00002E62                                                             ; .text:0000226C↑o
.rodata:00002E62                                                             ; .text:off_2530↑o
.rodata:00002E65 72 37 00                      aR7 DCB "r7",0                ; DATA XREF: .text:loc_2270↑o
.rodata:00002E65                                                             ; .text:00002272↑o
.rodata:00002E65                                                             ; .text:off_252C↑o
.rodata:00002E68 72 38 00                      aR8 DCB "r8",0                ; DATA XREF: .text:loc_2276↑o
.rodata:00002E68                                                             ; .text:00002278↑o
.rodata:00002E68                                                             ; .text:off_2528↑o
.rodata:00002E6B 72 39 00                      aR9 DCB "r9",0                ; DATA XREF: .text:loc_227C↑o
.rodata:00002E6B                                                             ; .text:0000227E↑o
.rodata:00002E6B                                                             ; .text:off_2524↑o
.rodata:00002E6E 72 31 30 00                   aR10 DCB "r10",0              ; DATA XREF: .text:loc_2282↑o
.rodata:00002E6E                                                             ; .text:00002284↑o
.rodata:00002E6E                                                             ; .text:off_2520↑o
.rodata:00002E72 72 31 31 00                   aR11 DCB "r11",0              ; DATA XREF: .text:loc_2288↑o
.rodata:00002E72                                                             ; .text:0000228A↑o
.rodata:00002E72                                                             ; .text:off_251C↑o
.rodata:00002E76 72 31 32 00                   aR12 DCB "r12",0              ; DATA XREF: .text:loc_228E↑o
.rodata:00002E76                                                             ; .text:00002290↑o
.rodata:00002E76                                                             ; .text:off_2518↑o
.rodata:00002E7A 73 30 00                      aS0 DCB "s0",0                ; DATA XREF: .text:loc_229A↑o
.rodata:00002E7A                                                             ; .text:0000229C↑o
.rodata:00002E7A                                                             ; .text:off_2514↑o
.rodata:00002E7D 73 31 00                      aS1 DCB "s1",0                ; DATA XREF: .text:loc_22A0↑o
.rodata:00002E7D                                                             ; .text:000022A2↑o
.rodata:00002E7D                                                             ; .text:off_2510↑o
.rodata:00002E80 73 32 00                      aS2 DCB "s2",0                ; DATA XREF: .text:loc_22A6↑o
.rodata:00002E80                                                             ; .text:000022A8↑o
.rodata:00002E80                                                             ; .text:off_250C↑o
.rodata:00002E83 73 33 00                      aS3 DCB "s3",0                ; DATA XREF: .text:loc_22AC↑o
.rodata:00002E83                                                             ; .text:000022AE↑o
.rodata:00002E83                                                             ; .text:off_2508↑o
.rodata:00002E86 73 34 00                      aS4 DCB "s4",0                ; DATA XREF: .text:loc_22B2↑o
.rodata:00002E86                                                             ; .text:000022B4↑o
.rodata:00002E86                                                             ; .text:off_2504↑o
.rodata:00002E89 73 35 00                      aS5 DCB "s5",0                ; DATA XREF: .text:loc_22B8↑o
.rodata:00002E89                                                             ; .text:000022BA↑o
.rodata:00002E89                                                             ; .text:off_2500↑o
.rodata:00002E8C 73 36 00                      aS6 DCB "s6",0                ; DATA XREF: .text:loc_22BE↑o
.rodata:00002E8C                                                             ; .text:000022C0↑o
.rodata:00002E8C                                                             ; .text:off_24FC↑o
.rodata:00002E8F 73 37 00                      aS7 DCB "s7",0                ; DATA XREF: .text:loc_22C4↑o
.rodata:00002E8F                                                             ; .text:000022C6↑o
.rodata:00002E8F                                                             ; .text:off_24F8↑o
.rodata:00002E92 73 38 00                      aS8 DCB "s8",0                ; DATA XREF: .text:loc_22CA↑o
.rodata:00002E92                                                             ; .text:000022CC↑o
.rodata:00002E92                                                             ; .text:off_24F4↑o
.rodata:00002E95 73 39 00                      aS9 DCB "s9",0                ; DATA XREF: .text:loc_22D0↑o
.rodata:00002E95                                                             ; .text:000022D2↑o
.rodata:00002E95                                                             ; .text:off_24F0↑o
.rodata:00002E98 73 31 30 00                   aS10 DCB "s10",0              ; DATA XREF: .text:loc_22D6↑o
.rodata:00002E98                                                             ; .text:000022D8↑o
.rodata:00002E98                                                             ; .text:off_24EC↑o
.rodata:00002E9C 73 31 31 00                   aS11 DCB "s11",0              ; DATA XREF: .text:loc_22DC↑o
.rodata:00002E9C                                                             ; .text:000022DE↑o
.rodata:00002E9C                                                             ; .text:off_24E8↑o
.rodata:00002EA0 73 31 32 00                   aS12 DCB "s12",0              ; DATA XREF: .text:loc_22E2↑o
.rodata:00002EA0                                                             ; .text:000022E4↑o
.rodata:00002EA0                                                             ; .text:off_24E4↑o
.rodata:00002EA4 73 31 33 00                   aS13 DCB "s13",0              ; DATA XREF: .text:loc_22E8↑o
.rodata:00002EA4                                                             ; .text:000022EA↑o
.rodata:00002EA4                                                             ; .text:off_24E0↑o
.rodata:00002EA8 73 31 34 00                   aS14 DCB "s14",0              ; DATA XREF: .text:loc_22EE↑o
.rodata:00002EA8                                                             ; .text:000022F0↑o
.rodata:00002EA8                                                             ; .text:off_24DC↑o
.rodata:00002EAC 73 31 35 00                   aS15 DCB "s15",0              ; DATA XREF: .text:loc_22F4↑o
.rodata:00002EAC                                                             ; .text:000022F6↑o
.rodata:00002EAC                                                             ; .text:off_24D8↑o
.rodata:00002EB0 73 31 36 00                   aS16 DCB "s16",0              ; DATA XREF: .text:loc_22FA↑o
.rodata:00002EB0                                                             ; .text:000022FC↑o
.rodata:00002EB0                                                             ; .text:off_24D4↑o
.rodata:00002EB4 73 31 37 00                   aS17 DCB "s17",0              ; DATA XREF: .text:loc_2300↑o
.rodata:00002EB4                                                             ; .text:00002302↑o
.rodata:00002EB4                                                             ; .text:off_24D0↑o
.rodata:00002EB8 73 31 38 00                   aS18 DCB "s18",0              ; DATA XREF: .text:loc_2306↑o
.rodata:00002EB8                                                             ; .text:00002308↑o
.rodata:00002EB8                                                             ; .text:off_24CC↑o
.rodata:00002EBC 73 31 39 00                   aS19 DCB "s19",0              ; DATA XREF: .text:loc_230C↑o
.rodata:00002EBC                                                             ; .text:0000230E↑o
.rodata:00002EBC                                                             ; .text:off_24C8↑o
.rodata:00002EC0 73 32 30 00                   aS20 DCB "s20",0              ; DATA XREF: .text:loc_2312↑o
.rodata:00002EC0                                                             ; .text:00002314↑o
.rodata:00002EC0                                                             ; .text:off_24C4↑o
.rodata:00002EC4 73 32 31 00                   aS21 DCB "s21",0              ; DATA XREF: .text:loc_2318↑o
.rodata:00002EC4                                                             ; .text:0000231A↑o
.rodata:00002EC4                                                             ; .text:off_24C0↑o
.rodata:00002EC8 73 32 32 00                   aS22 DCB "s22",0              ; DATA XREF: .text:loc_231E↑o
.rodata:00002EC8                                                             ; .text:00002320↑o
.rodata:00002EC8                                                             ; .text:off_24BC↑o
.rodata:00002ECC 73 32 33 00                   aS23 DCB "s23",0              ; DATA XREF: .text:loc_2324↑o
.rodata:00002ECC                                                             ; .text:00002326↑o
.rodata:00002ECC                                                             ; .text:off_24B8↑o
.rodata:00002ED0 73 32 34 00                   aS24 DCB "s24",0              ; DATA XREF: .text:loc_232A↑o
.rodata:00002ED0                                                             ; .text:0000232C↑o
.rodata:00002ED0                                                             ; .text:off_24B4↑o
.rodata:00002ED4 73 32 35 00                   aS25 DCB "s25",0              ; DATA XREF: .text:loc_2330↑o
.rodata:00002ED4                                                             ; .text:00002332↑o
.rodata:00002ED4                                                             ; .text:off_24B0↑o
.rodata:00002ED8 73 32 36 00                   aS26 DCB "s26",0              ; DATA XREF: .text:loc_2336↑o
.rodata:00002ED8                                                             ; .text:00002338↑o
.rodata:00002ED8                                                             ; .text:off_24AC↑o
.rodata:00002EDC 73 32 37 00                   aS27 DCB "s27",0              ; DATA XREF: .text:loc_233C↑o
.rodata:00002EDC                                                             ; .text:0000233E↑o
.rodata:00002EDC                                                             ; .text:off_24A8↑o
.rodata:00002EE0 73 32 38 00                   aS28 DCB "s28",0              ; DATA XREF: .text:loc_2342↑o
.rodata:00002EE0                                                             ; .text:00002344↑o
.rodata:00002EE0                                                             ; .text:off_24A4↑o
.rodata:00002EE4 73 32 39 00                   aS29 DCB "s29",0              ; DATA XREF: .text:loc_2348↑o
.rodata:00002EE4                                                             ; .text:0000234A↑o
.rodata:00002EE4                                                             ; .text:off_24A0↑o
.rodata:00002EE8 73 33 30 00                   aS30 DCB "s30",0              ; DATA XREF: .text:loc_234E↑o
.rodata:00002EE8                                                             ; .text:00002350↑o
.rodata:00002EE8                                                             ; .text:off_249C↑o
.rodata:00002EEC 73 33 31 00                   aS31 DCB "s31",0              ; DATA XREF: .text:loc_2354↑o
.rodata:00002EEC                                                             ; .text:00002356↑o
.rodata:00002EEC                                                             ; .text:off_2498↑o
.rodata:00002EF0 64 30 00                      aD0 DCB "d0",0                ; DATA XREF: .text:loc_223A↑o
.rodata:00002EF0                                                             ; .text:0000223C↑o
.rodata:00002EF0                                                             ; .text:off_2494↑o
.rodata:00002EF3 64 31 00                      aD1 DCB "d1",0                ; DATA XREF: .text:loc_235A↑o
.rodata:00002EF3                                                             ; .text:0000235C↑o
.rodata:00002EF3                                                             ; .text:off_2490↑o
.rodata:00002EF6 64 32 00                      aD2 DCB "d2",0                ; DATA XREF: .text:loc_2360↑o
.rodata:00002EF6                                                             ; .text:00002362↑o
.rodata:00002EF6                                                             ; .text:off_248C↑o
.rodata:00002EF9 64 33 00                      aD3 DCB "d3",0                ; DATA XREF: .text:loc_2366↑o
.rodata:00002EF9                                                             ; .text:00002368↑o
.rodata:00002EF9                                                             ; .text:off_2488↑o
.rodata:00002EFC 64 34 00                      aD4 DCB "d4",0                ; DATA XREF: .text:loc_236C↑o
.rodata:00002EFC                                                             ; .text:0000236E↑o
.rodata:00002EFC                                                             ; .text:off_2484↑o
.rodata:00002EFF 64 35 00                      aD5 DCB "d5",0                ; DATA XREF: .text:loc_2372↑o
.rodata:00002EFF                                                             ; .text:00002374↑o
.rodata:00002EFF                                                             ; .text:off_2480↑o
.rodata:00002F02 64 36 00                      aD6 DCB "d6",0                ; DATA XREF: .text:loc_2378↑o
.rodata:00002F02                                                             ; .text:0000237A↑o
.rodata:00002F02                                                             ; .text:off_247C↑o
.rodata:00002F05 64 37 00                      aD7 DCB "d7",0                ; DATA XREF: .text:loc_237E↑o
.rodata:00002F05                                                             ; .text:00002380↑o
.rodata:00002F05                                                             ; .text:off_2478↑o
.rodata:00002F08 64 38 00                      aD8 DCB "d8",0                ; DATA XREF: .text:loc_2384↑o
.rodata:00002F08                                                             ; .text:00002386↑o
.rodata:00002F08                                                             ; .text:off_2474↑o
.rodata:00002F0B 64 39 00                      aD9 DCB "d9",0                ; DATA XREF: .text:loc_238A↑o
.rodata:00002F0B                                                             ; .text:0000238C↑o
.rodata:00002F0B                                                             ; .text:off_2470↑o
.rodata:00002F0E 64 31 30 00                   aD10 DCB "d10",0              ; DATA XREF: .text:loc_2390↑o
.rodata:00002F0E                                                             ; .text:00002392↑o
.rodata:00002F0E                                                             ; .text:off_246C↑o
.rodata:00002F12 64 31 31 00                   aD11 DCB "d11",0              ; DATA XREF: .text:loc_2396↑o
.rodata:00002F12                                                             ; .text:00002398↑o
.rodata:00002F12                                                             ; .text:off_2468↑o
.rodata:00002F16 64 31 32 00                   aD12 DCB "d12",0              ; DATA XREF: .text:loc_239C↑o
.rodata:00002F16                                                             ; .text:0000239E↑o
.rodata:00002F16                                                             ; .text:off_2464↑o
.rodata:00002F1A 64 31 33 00                   aD13 DCB "d13",0              ; DATA XREF: .text:loc_23A2↑o
.rodata:00002F1A                                                             ; .text:000023A4↑o
.rodata:00002F1A                                                             ; .text:off_2460↑o
.rodata:00002F1E 64 31 34 00                   aD14 DCB "d14",0              ; DATA XREF: .text:loc_23A8↑o
.rodata:00002F1E                                                             ; .text:000023AA↑o
.rodata:00002F1E                                                             ; .text:off_245C↑o
.rodata:00002F22 64 31 35 00                   aD15 DCB "d15",0              ; DATA XREF: .text:loc_23AE↑o
.rodata:00002F22                                                             ; .text:000023B0↑o
.rodata:00002F22                                                             ; .text:off_2458↑o
.rodata:00002F26 64 31 36 00                   aD16 DCB "d16",0              ; DATA XREF: .text:loc_23B4↑o
.rodata:00002F26                                                             ; .text:000023B6↑o
.rodata:00002F26                                                             ; .text:off_2454↑o
.rodata:00002F2A 64 31 37 00                   aD17 DCB "d17",0              ; DATA XREF: .text:loc_23BA↑o
.rodata:00002F2A                                                             ; .text:000023BC↑o
.rodata:00002F2A                                                             ; .text:off_2450↑o
.rodata:00002F2E 64 31 38 00                   aD18 DCB "d18",0              ; DATA XREF: .text:loc_23C0↑o
.rodata:00002F2E                                                             ; .text:000023C2↑o
.rodata:00002F2E                                                             ; .text:off_244C↑o
.rodata:00002F32 64 31 39 00                   aD19 DCB "d19",0              ; DATA XREF: .text:loc_23C6↑o
.rodata:00002F32                                                             ; .text:000023C8↑o
.rodata:00002F32                                                             ; .text:off_2448↑o
.rodata:00002F36 64 32 30 00                   aD20 DCB "d20",0              ; DATA XREF: .text:loc_23CC↑o
.rodata:00002F36                                                             ; .text:000023CE↑o
.rodata:00002F36                                                             ; .text:off_2444↑o
.rodata:00002F3A 64 32 31 00                   aD21 DCB "d21",0              ; DATA XREF: .text:loc_23D2↑o
.rodata:00002F3A                                                             ; .text:000023D4↑o
.rodata:00002F3A                                                             ; .text:off_2440↑o
.rodata:00002F3E 64 32 32 00                   aD22 DCB "d22",0              ; DATA XREF: .text:loc_23D8↑o
.rodata:00002F3E                                                             ; .text:000023DA↑o
.rodata:00002F3E                                                             ; .text:off_243C↑o
.rodata:00002F42 64 32 33 00                   aD23 DCB "d23",0              ; DATA XREF: .text:loc_23DE↑o
.rodata:00002F42                                                             ; .text:000023E0↑o
.rodata:00002F42                                                             ; .text:off_2438↑o
.rodata:00002F46 64 32 34 00                   aD24 DCB "d24",0              ; DATA XREF: .text:loc_23E4↑o
.rodata:00002F46                                                             ; .text:000023E6↑o
.rodata:00002F46                                                             ; .text:off_2434↑o
.rodata:00002F4A 64 32 35 00                   aD25 DCB "d25",0              ; DATA XREF: .text:loc_23EA↑o
.rodata:00002F4A                                                             ; .text:000023EC↑o
.rodata:00002F4A                                                             ; .text:off_2430↑o
.rodata:00002F4E 64 32 36 00                   aD26 DCB "d26",0              ; DATA XREF: .text:loc_23F0↑o
.rodata:00002F4E                                                             ; .text:000023F2↑o
.rodata:00002F4E                                                             ; .text:off_242C↑o
.rodata:00002F52 64 32 37 00                   aD27 DCB "d27",0              ; DATA XREF: .text:loc_23F6↑o
.rodata:00002F52                                                             ; .text:000023F8↑o
.rodata:00002F52                                                             ; .text:off_2428↑o
.rodata:00002F56 64 32 38 00                   aD28 DCB "d28",0              ; DATA XREF: .text:loc_23FC↑o
.rodata:00002F56                                                             ; .text:000023FE↑o
.rodata:00002F56                                                             ; .text:off_2424↑o
.rodata:00002F5A 64 32 39 00                   aD29 DCB "d29",0              ; DATA XREF: .text:loc_2402↑o
.rodata:00002F5A                                                             ; .text:00002404↑o
.rodata:00002F5A                                                             ; .text:off_2420↑o
.rodata:00002F5E 64 33 30 00                   aD30 DCB "d30",0              ; DATA XREF: .text:loc_2408↑o
.rodata:00002F5E                                                             ; .text:0000240A↑o
.rodata:00002F5E                                                             ; .text:off_241C↑o
.rodata:00002F62 64 33 31 00                   aD31 DCB "d31",0              ; DATA XREF: .text:loc_240E↑o
.rodata:00002F62                                                             ; .text:00002410↑o
.rodata:00002F62                                                             ; .text:off_2418↑o
.rodata:00002F66 75 6E 6B 6E 6F 77 6E 20 72 65+aUnknownRegiste DCB "unknown register",0
.rodata:00002F66 67 69 73 74 65 72 00                                        ; DATA XREF: .text:def_21F6↑o
.rodata:00002F66                                                             ; .text:00002242↑o
.rodata:00002F66                                                             ; .text:off_2554↑o
.rodata:00002F77 00                            ALIGN 4
.rodata:00002F78 00                            unk_2F78 DCB    0             ; DATA XREF: ion_memtrack_get_memory+6E↑o
.rodata:00002F78                                                             ; ion_memtrack_get_memory+78↑o
.rodata:00002F78                                                             ; .text:off_F9C↑o
.rodata:00002F79 00                            DCB    0
.rodata:00002F7A 00                            DCB    0
.rodata:00002F7B 00                            DCB    0
.rodata:00002F7C 64                            DCB 0x64 ; d
.rodata:00002F7D 01                            DCB    1
.rodata:00002F7E 00                            DCB    0
.rodata:00002F7F 00                            DCB    0
.rodata:00002F7F                               ; .rodata ends
.rodata:00002F7F
.ARM.extab:00002F80                               ; ===========================================================================
.ARM.extab:00002F80
.ARM.extab:00002F80                               ; Segment type: Pure data
.ARM.extab:00002F80                               AREA .ARM.extab, DATA, READONLY
.ARM.extab:00002F80 93                            DCB 0x93
.ARM.extab:00002F81 B2                            DCB 0xB2
.ARM.extab:00002F82 02                            DCB    2
.ARM.extab:00002F83 81                            DCB 0x81
.ARM.extab:00002F84 00                            DCB    0
.ARM.extab:00002F85 81                            DCB 0x81
.ARM.extab:00002F86 C9                            DCB 0xC9
.ARM.extab:00002F87 01                            DCB    1
.ARM.extab:00002F88 B0                            DCB 0xB0
.ARM.extab:00002F89 B0                            DCB 0xB0
.ARM.extab:00002F8A B0                            DCB 0xB0
.ARM.extab:00002F8B AF                            DCB 0xAF
.ARM.extab:00002F8C 00                            DCB    0
.ARM.extab:00002F8D 00                            DCB    0
.ARM.extab:00002F8E 00                            DCB    0
.ARM.extab:00002F8F 00                            DCB    0
.ARM.extab:00002F90 AE                            DCB 0xAE
.ARM.extab:00002F91 B2                            DCB 0xB2
.ARM.extab:00002F92 01                            DCB    1
.ARM.extab:00002F93 81                            DCB 0x81
.ARM.extab:00002F94 B0                            DCB 0xB0
.ARM.extab:00002F95 B0                            DCB 0xB0
.ARM.extab:00002F96 AD                            DCB 0xAD
.ARM.extab:00002F97 01                            DCB    1
.ARM.extab:00002F98 00                            DCB    0
.ARM.extab:00002F99 00                            DCB    0
.ARM.extab:00002F9A 00                            DCB    0
.ARM.extab:00002F9B 00                            DCB    0
.ARM.extab:00002F9C A2                            DCB 0xA2
.ARM.extab:00002F9D B2                            DCB 0xB2
.ARM.extab:00002F9E 01                            DCB    1
.ARM.extab:00002F9F 81                            DCB 0x81
.ARM.extab:00002FA0 B0                            DCB 0xB0
.ARM.extab:00002FA1 B0                            DCB 0xB0
.ARM.extab:00002FA2 AB                            DCB 0xAB
.ARM.extab:00002FA3 03                            DCB    3
.ARM.extab:00002FA4 00                            DCB    0
.ARM.extab:00002FA5 00                            DCB    0
.ARM.extab:00002FA6 00                            DCB    0
.ARM.extab:00002FA7 00                            DCB    0
.ARM.extab:00002FA8 A5                            DCB 0xA5
.ARM.extab:00002FA9 B2                            DCB 0xB2
.ARM.extab:00002FAA 01                            DCB    1
.ARM.extab:00002FAB 81                            DCB 0x81
.ARM.extab:00002FAC B0                            DCB 0xB0
.ARM.extab:00002FAD B0                            DCB 0xB0
.ARM.extab:00002FAE AE                            DCB 0xAE
.ARM.extab:00002FAF 01                            DCB    1
.ARM.extab:00002FB0 00                            DCB    0
.ARM.extab:00002FB1 00                            DCB    0
.ARM.extab:00002FB2 00                            DCB    0
.ARM.extab:00002FB3 00                            DCB    0
.ARM.extab:00002FB4 7F                            DCB 0x7F ; 
.ARM.extab:00002FB5 B2                            DCB 0xB2
.ARM.extab:00002FB6 01                            DCB    1
.ARM.extab:00002FB7 81                            DCB 0x81
.ARM.extab:00002FB8 B0                            DCB 0xB0
.ARM.extab:00002FB9 B0                            DCB 0xB0
.ARM.extab:00002FBA 0B                            DCB  0xB
.ARM.extab:00002FBB 84                            DCB 0x84
.ARM.extab:00002FBC 00                            DCB    0
.ARM.extab:00002FBD 00                            DCB    0
.ARM.extab:00002FBE 00                            DCB    0
.ARM.extab:00002FBF 00                            DCB    0
.ARM.extab:00002FBF                               ; .ARM.extab ends
.ARM.extab:00002FBF
.fini_array:00004E04                               ; ELF Termination Function Table
.fini_array:00004E04                               ; ===========================================================================
.fini_array:00004E04
.fini_array:00004E04                               ; Segment type: Pure data
.fini_array:00004E04                               AREA .fini_array, DATA
.fini_array:00004E04 A8 0A 00 00                   off_4E04 DCD sub_AA8          ; DATA XREF: LOAD:0000009C↑o
.fini_array:00004E04                                                             ; LOAD:0000013C↑o
.fini_array:00004E04                               ; .fini_array ends
.fini_array:00004E04
.data.rel.ro:00004E08                               ; ===========================================================================
.data.rel.ro:00004E08
.data.rel.ro:00004E08                               ; Segment type: Pure data
.data.rel.ro:00004E08                               AREA .data.rel.ro, DATA
.data.rel.ro:00004E08 00                            unk_4E08 DCB    0             ; DATA XREF: sub_18B0+4↑o
.data.rel.ro:00004E08                                                             ; sub_18B0+8↑o
.data.rel.ro:00004E08                                                             ; .text:off_18EC↑o
.data.rel.ro:00004E09 00                            DCB    0
.data.rel.ro:00004E0A 00                            DCB    0
.data.rel.ro:00004E0B 00                            DCB    0
.data.rel.ro:00004E0C 00                            DCB    0
.data.rel.ro:00004E0D 00                            DCB    0
.data.rel.ro:00004E0E 00                            DCB    0
.data.rel.ro:00004E0F 00                            DCB    0
.data.rel.ro:00004E10 29 17 00 00                   off_4E10 DCD nullsub_1+1
.data.rel.ro:00004E14 29 17 00 00                   DCD nullsub_1+1
.data.rel.ro:00004E18 0B 1A 00 00                   DCD sub_1A0A+1
.data.rel.ro:00004E1C 2D 1A 00 00                   DCD sub_1A2C+1
.data.rel.ro:00004E20 B9 1A 00 00                   DCD sub_1AB8+1
.data.rel.ro:00004E24 45 1B 00 00                   DCD sub_1B44+1
.data.rel.ro:00004E28 69 1B 00 00                   DCD sub_1B68+1
.data.rel.ro:00004E2C 0D 1C 00 00                   DCD sub_1C0C+1
.data.rel.ro:00004E30 D9 1C 00 00                   DCD sub_1CD8+1
.data.rel.ro:00004E34 29 1D 00 00                   DCD sub_1D28+1
.data.rel.ro:00004E38 41 1D 00 00                   DCD sub_1D40+1
.data.rel.ro:00004E3C 57 1D 00 00                   DCD sub_1D56+1
.data.rel.ro:00004E40 5D 1D 00 00                   DCD sub_1D5C+1
.data.rel.ro:00004E44 CD 1D 00 00                   DCD sub_1DCC+1
.data.rel.ro:00004E48 3D 1E 00 00                   DCD loc_1E3C+1
.data.rel.ro:00004E4C 43 1E 00 00                   DCD sub_1E42+1
.data.rel.ro:00004E4C                               ; .data.rel.ro ends
.data.rel.ro:00004E4C
LOAD:00004E50                               ; ELF Dynamic Information
LOAD:00004E50                               ; ===========================================================================
LOAD:00004E50
LOAD:00004E50                               ; Segment type: Pure data
LOAD:00004E50                               AREA LOAD, DATA, ALIGN=12
LOAD:00004E50 03 00 00 00 78 4F 00 00       stru_4E50 Elf32_Dyn <3, <0x4F78>>
LOAD:00004E50                                                             ; DATA XREF: LOAD:000000BC↑o
LOAD:00004E50                                                             ; DT_PLTGOT
LOAD:00004E58 02 00 00 00 F8 00 00 00       Elf32_Dyn <2, <0xF8>>         ; DT_PLTRELSZ
LOAD:00004E60 17 00 00 00 28 08 00 00       Elf32_Dyn <0x17, <0x828>>     ; DT_JMPREL
LOAD:00004E68 14 00 00 00 11 00 00 00       Elf32_Dyn <0x14, <0x11>>      ; DT_PLTREL
LOAD:00004E70 11 00 00 00 38 07 00 00       Elf32_Dyn <0x11, <0x738>>     ; DT_REL
LOAD:00004E78 12 00 00 00 F0 00 00 00       Elf32_Dyn <0x12, <0xF0>>      ; DT_RELSZ
LOAD:00004E80 13 00 00 00 08 00 00 00       Elf32_Dyn <0x13, <8>>         ; DT_RELENT
LOAD:00004E88 FA FF FF 6F 19 00 00 00       Elf32_Dyn <0x6FFFFFFA, <0x19>> ; DT_RELCOUNT
LOAD:00004E90 06 00 00 00 A0 01 00 00       Elf32_Dyn <6, <0x1A0>>        ; DT_SYMTAB
LOAD:00004E98 0B 00 00 00 10 00 00 00       Elf32_Dyn <0xB, <0x10>>       ; DT_SYMENT
LOAD:00004EA0 05 00 00 00 10 04 00 00       Elf32_Dyn <5, <0x410>>        ; DT_STRTAB
LOAD:00004EA8 0A 00 00 00 24 02 00 00       Elf32_Dyn <0xA, <0x224>>      ; DT_STRSZ
LOAD:00004EB0 F5 FE FF 6F 34 06 00 00       Elf32_Dyn <0x6FFFFEF5, <0x634>> ; DT_GNU_HASH
LOAD:00004EB8 01 00 00 00 08 02 00 00       Elf32_Dyn <1, <0x208>>        ; DT_NEEDED liblog.so
LOAD:00004EC0 01 00 00 00 12 02 00 00       Elf32_Dyn <1, <0x212>>        ; DT_NEEDED libc++.so
LOAD:00004EC8 01 00 00 00 5B 00 00 00       Elf32_Dyn <1, <0x5B>>         ; DT_NEEDED libdl.so
LOAD:00004ED0 01 00 00 00 15 00 00 00       Elf32_Dyn <1, <0x15>>         ; DT_NEEDED libc.so
LOAD:00004ED8 01 00 00 00 1C 02 00 00       Elf32_Dyn <1, <0x21C>>        ; DT_NEEDED libm.so
LOAD:00004EE0 0E 00 00 00 1D 00 00 00       Elf32_Dyn <0xE, <0x1D>>       ; DT_SONAME memtrack.exynos5.so
LOAD:00004EE8 1A 00 00 00 04 4E 00 00       Elf32_Dyn <0x1A, <0x4E04>>    ; DT_FINI_ARRAY
LOAD:00004EF0 1C 00 00 00 04 00 00 00       Elf32_Dyn <0x1C, <4>>         ; DT_FINI_ARRAYSZ
LOAD:00004EF8 1E 00 00 00 08 00 00 00       Elf32_Dyn <0x1E, <8>>         ; DT_FLAGS
LOAD:00004F00 FB FF FF 6F 01 00 00 00       Elf32_Dyn <0x6FFFFFFB, <1>>   ; DT_FLAGS_1
LOAD:00004F08 F0 FF FF 6F 7C 06 00 00       Elf32_Dyn <0x6FFFFFF0, <0x67C>> ; DT_VERSYM
LOAD:00004F10 FC FF FF 6F CC 06 00 00       Elf32_Dyn <0x6FFFFFFC, <0x6CC>> ; DT_VERDEF
LOAD:00004F18 FD FF FF 6F 01 00 00 00       Elf32_Dyn <0x6FFFFFFD, <1>>   ; DT_VERDEFNUM
LOAD:00004F20 FE FF FF 6F E8 06 00 00       Elf32_Dyn <0x6FFFFFFE, <0x6E8>> ; DT_VERNEED
LOAD:00004F28 FF FF FF 6F 02 00 00 00       Elf32_Dyn <0x6FFFFFFF, <2>>   ; DT_VERNEEDNUM
LOAD:00004F30 00 00 00 00 00 00 00 00       Elf32_Dyn <0>                 ; DT_NULL
LOAD:00004F38 00                            DCB    0
LOAD:00004F39 00                            DCB    0
LOAD:00004F3A 00                            DCB    0
LOAD:00004F3B 00                            DCB    0
LOAD:00004F3C 00                            DCB    0
LOAD:00004F3D 00                            DCB    0
LOAD:00004F3E 00                            DCB    0
LOAD:00004F3F 00                            DCB    0
LOAD:00004F40 00                            DCB    0
LOAD:00004F41 00                            DCB    0
LOAD:00004F42 00                            DCB    0
LOAD:00004F43 00                            DCB    0
LOAD:00004F44 00                            DCB    0
LOAD:00004F45 00                            DCB    0
LOAD:00004F46 00                            DCB    0
LOAD:00004F47 00                            DCB    0
LOAD:00004F48 00                            DCB    0
LOAD:00004F49 00                            DCB    0
LOAD:00004F4A 00                            DCB    0
LOAD:00004F4B 00                            DCB    0
LOAD:00004F4C 00                            DCB    0
LOAD:00004F4D 00                            DCB    0
LOAD:00004F4E 00                            DCB    0
LOAD:00004F4F 00                            DCB    0
LOAD:00004F50 00                            DCB    0
LOAD:00004F51 00                            DCB    0
LOAD:00004F52 00                            DCB    0
LOAD:00004F53 00                            DCB    0
LOAD:00004F54 00                            DCB    0
LOAD:00004F55 00                            DCB    0
LOAD:00004F56 00                            DCB    0
LOAD:00004F57 00                            DCB    0
LOAD:00004F58 00                            DCB    0
LOAD:00004F59 00                            DCB    0
LOAD:00004F5A 00                            DCB    0
LOAD:00004F5B 00                            DCB    0
LOAD:00004F5C 00                            DCB    0
LOAD:00004F5D 00                            DCB    0
LOAD:00004F5E 00                            DCB    0
LOAD:00004F5F 00                            DCB    0
LOAD:00004F5F                               ; LOAD ends
LOAD:00004F5F
.got:00004F60                               ; ===========================================================================
.got:00004F60
.got:00004F60                               ; Segment type: Pure data
.got:00004F60                               AREA .got, DATA
.got:00004F60 DC 51 00 00                   __stack_chk_guard_ptr DCD __stack_chk_guard
.got:00004F60                                                             ; DATA XREF: mali_memtrack_get_memory+10↑o
.got:00004F60                                                             ; mali_memtrack_get_memory+16↑o
.got:00004F60                                                             ; mali_memtrack_get_memory+1C↑r
.got:00004F60                                                             ; mali_memtrack_get_memory:loc_DFC↑o
.got:00004F60                                                             ; mali_memtrack_get_memory+24A↑o
.got:00004F60                                                             ; mali_memtrack_get_memory+24C↑r
.got:00004F60                                                             ; .text:off_E24↑o
.got:00004F60                                                             ; .text:off_E58↑o
.got:00004F60                                                             ; ion_memtrack_get_memory+C↑o
.got:00004F60                                                             ; ion_memtrack_get_memory+12↑o
.got:00004F60                                                             ; ion_memtrack_get_memory+14↑r
.got:00004F60                                                             ; ion_memtrack_get_memory:loc_F62↑o
.got:00004F60                                                             ; ion_memtrack_get_memory+E4↑o
.got:00004F60                                                             ; ion_memtrack_get_memory+E6↑r
.got:00004F60                                                             ; .text:off_F80↑o ...
.got:00004F64 90 50 00 00                   record_templates_ptr DCD record_templates
.got:00004F64                                                             ; DATA XREF: mali_memtrack_get_memory+40↑o
.got:00004F64                                                             ; mali_memtrack_get_memory+46↑o
.got:00004F64                                                             ; mali_memtrack_get_memory+48↑r
.got:00004F64                                                             ; .text:off_E28↑o
.got:00004F68 1C 52 00 00                   stderr_ptr DCD stderr         ; DATA XREF: sub_1760+6↑o
.got:00004F68                                                             ; sub_1760+A↑o
.got:00004F68                                                             ; sub_1760+C↑r
.got:00004F68                                                             ; .text:off_1784↑o
.got:00004F68                                                             ; sub_1E4C+6↑o
.got:00004F68                                                             ; sub_1E4C+C↑o
.got:00004F68                                                             ; sub_1E4C+E↑r
.got:00004F68                                                             ; .text:off_1E70↑o
.got:00004F6C 89 15 00 00                   off_4F6C DCD sub_1588+1       ; DATA XREF: sub_1F24:loc_1FEE↑o
.got:00004F6C                                                             ; sub_1F24+CC↑o
.got:00004F6C                                                             ; sub_1F24+CE↑r
.got:00004F6C                                                             ; .text:off_20A0↑o
.got:00004F70 81 15 00 00                   off_4F70 DCD sub_1580+1       ; DATA XREF: sub_1F24:loc_1FFA↑o
.got:00004F70                                                             ; sub_1F24+D8↑o
.got:00004F70                                                             ; sub_1F24+DA↑r
.got:00004F70                                                             ; .text:off_20A4↑o
.got:00004F74 1D 15 00 00                   off_4F74 DCD sub_151C+1       ; DATA XREF: sub_1F24+B0↑o
.got:00004F74                                                             ; sub_1F24+C0↑o
.got:00004F74                                                             ; sub_1F24+C2↑r
.got:00004F74                                                             ; .text:off_20B4↑o
.got:00004F78 00 00 00 00                   _GLOBAL_OFFSET_TABLE_ DCD 0   ; DATA XREF: sub_920+4↑o
.got:00004F78                                                             ; sub_920+8↑o
.got:00004F78                                                             ; .plt:off_930↑o
.got:00004F7C 00 00 00 00                   DCD 0
.got:00004F80 00 00 00 00                   off_4F80 DCD dword_0          ; DATA XREF: sub_920+C↑r
.got:00004F84 AC 51 00 00                   __cxa_finalize_ptr DCD __imp___cxa_finalize
.got:00004F84                                                             ; DATA XREF: __cxa_finalize+8↑r
.got:00004F88 B0 51 00 00                   __cxa_atexit_ptr DCD __imp___cxa_atexit
.got:00004F88                                                             ; DATA XREF: __cxa_atexit+8↑r
.got:00004F8C B4 51 00 00                   __register_atfork_ptr DCD __imp___register_atfork
.got:00004F8C                                                             ; DATA XREF: __register_atfork+8↑r
.got:00004F90 B9 0B 00 00                   mali_memtrack_get_memory_ptr DCD mali_memtrack_get_memory+1
.got:00004F90                                                             ; DATA XREF: j_mali_memtrack_get_memory+8↑r
.got:00004F94 85 0E 00 00                   ion_memtrack_get_memory_ptr DCD ion_memtrack_get_memory+1
.got:00004F94                                                             ; DATA XREF: j_ion_memtrack_get_memory+8↑r
.got:00004F98 89 0B 00 00                   exynos_memtrack_init_ptr DCD exynos_memtrack_init+1
.got:00004F98                                                             ; DATA XREF: j_exynos_memtrack_init+8↑r
.got:00004F9C 8D 0B 00 00                   exynos_memtrack_get_memory_ptr DCD exynos_memtrack_get_memory+1
.got:00004F9C                                                             ; DATA XREF: j_exynos_memtrack_get_memory+8↑r
.got:00004FA0 C4 51 00 00                   __aeabi_memclr8_ptr DCD __imp___aeabi_memclr8
.got:00004FA0                                                             ; DATA XREF: __aeabi_memclr8+8↑r
.got:00004FA4 C8 51 00 00                   __aeabi_memcpy4_ptr DCD __imp___aeabi_memcpy4
.got:00004FA4                                                             ; DATA XREF: __aeabi_memcpy4+8↑r
.got:00004FA8 F8 51 00 00                   opendir_ptr DCD __imp_opendir ; DATA XREF: opendir+8↑r
.got:00004FAC D4 51 00 00                   __sprintf_chk_ptr DCD __imp___sprintf_chk
.got:00004FAC                                                             ; DATA XREF: __sprintf_chk+8↑r
.got:00004FB0 FC 51 00 00                   readdir_ptr DCD __imp_readdir ; DATA XREF: readdir+8↑r
.got:00004FB4 E0 51 00 00                   __strlen_chk_ptr DCD __imp___strlen_chk
.got:00004FB4                                                             ; DATA XREF: __strlen_chk+8↑r
.got:00004FB8 08 52 00 00                   strncmp_ptr DCD __imp_strncmp ; DATA XREF: strncmp+8↑r
.got:00004FBC D0 51 00 00                   __snprintf_chk_ptr DCD __imp___snprintf_chk
.got:00004FBC                                                             ; DATA XREF: __snprintf_chk+8↑r
.got:00004FC0 E4 51 00 00                   closedir_ptr DCD __imp_closedir
.got:00004FC0                                                             ; DATA XREF: closedir+8↑r
.got:00004FC4 CC 51 00 00                   __android_log_print_ptr DCD __imp___android_log_print
.got:00004FC4                                                             ; DATA XREF: __android_log_print+8↑r
.got:00004FC8 F0 51 00 00                   fopen_ptr DCD __imp_fopen     ; DATA XREF: fopen+8↑r
.got:00004FCC EC 51 00 00                   fgets_ptr DCD __imp_fgets     ; DATA XREF: fgets+8↑r
.got:00004FD0 00 52 00 00                   sscanf_ptr DCD __imp_sscanf   ; DATA XREF: sscanf+8↑r
.got:00004FD4 04 52 00 00                   strcmp_ptr DCD __imp_strcmp   ; DATA XREF: strcmp+8↑r
.got:00004FD8 F4 51 00 00                   fseek_ptr DCD __imp_fseek     ; DATA XREF: fseek+8↑r
.got:00004FDC E8 51 00 00                   fclose_ptr DCD __imp_fclose   ; DATA XREF: fclose+8↑r
.got:00004FE0 D8 51 00 00                   __stack_chk_fail_ptr DCD __imp___stack_chk_fail
.got:00004FE0                                                             ; DATA XREF: __stack_chk_fail+8↑r
.got:00004FE4 10 52 00 00                   lstat_ptr DCD __imp_lstat     ; DATA XREF: lstat+8↑r
.got:00004FE8 0C 52 00 00                   __errno_ptr DCD __imp___errno ; DATA XREF: __errno+8↑r
.got:00004FEC 14 52 00 00                   abort_ptr DCD __imp_abort     ; DATA XREF: abort+8↑r
.got:00004FF0 18 52 00 00                   fprintf_ptr DCD __imp_fprintf ; DATA XREF: fprintf+8↑r
.got:00004FF4 C0 51 00 00                   __aeabi_memcpy_ptr DCD __imp___aeabi_memcpy
.got:00004FF4                                                             ; DATA XREF: __aeabi_memcpy+8↑r
.got:00004FF8 B8 51 00 00                   dladdr_ptr DCD __imp_dladdr   ; DATA XREF: dladdr+8↑r
.got:00004FFC BC 51 00 00                   __gnu_Unwind_Find_exidx_ptr DCD __imp___gnu_Unwind_Find_exidx
.got:00004FFC                                                             ; DATA XREF: __gnu_Unwind_Find_exidx+8↑r
.got:00004FFC                               ; .got ends
.got:00004FFC
.data:00005000                               ; ===========================================================================
.data:00005000
.data:00005000                               ; Segment type: Pure data
.data:00005000                               AREA .data, DATA, ALIGN=3
.data:00005000 00 50 00 00                   off_5000 DCD off_5000         ; DATA XREF: sub_AA8+8↑o
.data:00005000                                                             ; sub_AA8+C↑o
.data:00005000                                                             ; .text:off_AC4↑o
.data:00005000                                                             ; sub_AF4+20↑o
.data:00005000                                                             ; sub_AF4+24↑o
.data:00005000                                                             ; .text:off_B3C↑o
.data:00005000                                                             ; sub_B40+24↑o
.data:00005000                                                             ; sub_B40+28↑o
.data:00005000                                                             ; .text:off_B84↑o
.data:00005000                                                             ; .data:off_5000↓o
.data:00005004                               EXPORT HMI
.data:00005004 54                            HMI DCB 0x54 ; T              ; DATA XREF: LOAD:000003A0↑o
.data:00005005 4D                            DCB 0x4D ; M
.data:00005006 57                            DCB 0x57 ; W
.data:00005007 48                            DCB 0x48 ; H
.data:00005008 01                            DCB    1
.data:00005009 00                            DCB    0
.data:0000500A 00                            DCB    0
.data:0000500B 01                            DCB    1
.data:0000500C 80 27 00 00                   DCD aMemtrack                 ; "memtrack"
.data:00005010 89 27 00 00                   DCD aExynosMemoryTr           ; "Exynos Memory Tracker HAL"
.data:00005014 A3 27 00 00                   DCD aTheAndroidOpen           ; "The Android Open Source Project"
.data:00005018 A0 50 00 00                   DCD unk_50A0
.data:0000501C 00 00 00 00                   ALIGN 0x10
.data:00005020 00                            DCB    0
.data:00005021 00                            DCB    0
.data:00005022 00                            DCB    0
.data:00005023 00                            DCB    0
.data:00005024 00                            DCB    0
.data:00005025 00                            DCB    0
.data:00005026 00                            DCB    0
.data:00005027 00                            DCB    0
.data:00005028 00                            DCB    0
.data:00005029 00                            DCB    0
.data:0000502A 00                            DCB    0
.data:0000502B 00                            DCB    0
.data:0000502C 00                            DCB    0
.data:0000502D 00                            DCB    0
.data:0000502E 00                            DCB    0
.data:0000502F 00                            DCB    0
.data:00005030 00                            DCB    0
.data:00005031 00                            DCB    0
.data:00005032 00                            DCB    0
.data:00005033 00                            DCB    0
.data:00005034 00                            DCB    0
.data:00005035 00                            DCB    0
.data:00005036 00                            DCB    0
.data:00005037 00                            DCB    0
.data:00005038 00                            DCB    0
.data:00005039 00                            DCB    0
.data:0000503A 00                            DCB    0
.data:0000503B 00                            DCB    0
.data:0000503C 00                            DCB    0
.data:0000503D 00                            DCB    0
.data:0000503E 00                            DCB    0
.data:0000503F 00                            DCB    0
.data:00005040 00                            DCB    0
.data:00005041 00                            DCB    0
.data:00005042 00                            DCB    0
.data:00005043 00                            DCB    0
.data:00005044 00                            DCB    0
.data:00005045 00                            DCB    0
.data:00005046 00                            DCB    0
.data:00005047 00                            DCB    0
.data:00005048 00                            DCB    0
.data:00005049 00                            DCB    0
.data:0000504A 00                            DCB    0
.data:0000504B 00                            DCB    0
.data:0000504C 00                            DCB    0
.data:0000504D 00                            DCB    0
.data:0000504E 00                            DCB    0
.data:0000504F 00                            DCB    0
.data:00005050 00                            DCB    0
.data:00005051 00                            DCB    0
.data:00005052 00                            DCB    0
.data:00005053 00                            DCB    0
.data:00005054 00                            DCB    0
.data:00005055 00                            DCB    0
.data:00005056 00                            DCB    0
.data:00005057 00                            DCB    0
.data:00005058 00                            DCB    0
.data:00005059 00                            DCB    0
.data:0000505A 00                            DCB    0
.data:0000505B 00                            DCB    0
.data:0000505C 00                            DCB    0
.data:0000505D 00                            DCB    0
.data:0000505E 00                            DCB    0
.data:0000505F 00                            DCB    0
.data:00005060 00                            DCB    0
.data:00005061 00                            DCB    0
.data:00005062 00                            DCB    0
.data:00005063 00                            DCB    0
.data:00005064 00                            DCB    0
.data:00005065 00                            DCB    0
.data:00005066 00                            DCB    0
.data:00005067 00                            DCB    0
.data:00005068 00                            DCB    0
.data:00005069 00                            DCB    0
.data:0000506A 00                            DCB    0
.data:0000506B 00                            DCB    0
.data:0000506C 00                            DCB    0
.data:0000506D 00                            DCB    0
.data:0000506E 00                            DCB    0
.data:0000506F 00                            DCB    0
.data:00005070 00                            DCB    0
.data:00005071 00                            DCB    0
.data:00005072 00                            DCB    0
.data:00005073 00                            DCB    0
.data:00005074 00                            DCB    0
.data:00005075 00                            DCB    0
.data:00005076 00                            DCB    0
.data:00005077 00                            DCB    0
.data:00005078 00                            DCB    0
.data:00005079 00                            DCB    0
.data:0000507A 00                            DCB    0
.data:0000507B 00                            DCB    0
.data:0000507C 00                            DCB    0
.data:0000507D 00                            DCB    0
.data:0000507E 00                            DCB    0
.data:0000507F 00                            DCB    0
.data:00005080 00                            DCB    0
.data:00005081 00                            DCB    0
.data:00005082 00                            DCB    0
.data:00005083 00                            DCB    0
.data:00005084 89 0B 00 00                   DCD exynos_memtrack_init+1
.data:00005088 8D 0B 00 00                   DCD exynos_memtrack_get_memory+1
.data:0000508C 00 00 00 00                   ALIGN 0x10
.data:00005090                               EXPORT record_templates
.data:00005090 00                            record_templates DCB    0     ; DATA XREF: LOAD:00000400↑o
.data:00005090                                                             ; mali_memtrack_get_memory+48↑o
.data:00005090                                                             ; .got:record_templates_ptr↑o
.data:00005091 00                            DCB    0
.data:00005092 00                            DCB    0
.data:00005093 00                            DCB    0
.data:00005094 22                            DCB 0x22 ; "
.data:00005095 01                            DCB    1
.data:00005096 00                            DCB    0
.data:00005097 00                            DCB    0
.data:00005098 00                            DCB    0
.data:00005099 00                            DCB    0
.data:0000509A 00                            DCB    0
.data:0000509B 00                            DCB    0
.data:0000509C 24                            DCB 0x24 ; $
.data:0000509D 01                            DCB    1
.data:0000509E 00                            DCB    0
.data:0000509F 00                            DCB    0
.data:0000509F                               ; .data ends
.data:0000509F
.bss:000050A0                               ; ===========================================================================
.bss:000050A0
.bss:000050A0                               ; Segment type: Uninitialized
.bss:000050A0                               AREA .bss, DATA
.bss:000050A0 ??                            unk_50A0 % 1                  ; DATA XREF: LOAD:00000390↑o
.bss:000050A0                                                             ; LOAD:000003C0↑o
.bss:000050A0                                                             ; .data:00005018↑o
.bss:000050A1 ??                            % 1
.bss:000050A2 ??                            % 1
.bss:000050A3 ??                            % 1
.bss:000050A4 ?? ?? ?? ??                   dword_50A4 % 4                ; DATA XREF: mali_memtrack_get_memory:loc_C38↑o
.bss:000050A4                                                             ; mali_memtrack_get_memory+8A↑o
.bss:000050A4                                                             ; mali_memtrack_get_memory+8C↑w
.bss:000050A4                                                             ; mali_memtrack_get_memory+9A↑o
.bss:000050A4                                                             ; mali_memtrack_get_memory+A8↑o
.bss:000050A4                                                             ; mali_memtrack_get_memory+CA↑r
.bss:000050A4                                                             ; mali_memtrack_get_memory+EA↑r
.bss:000050A4                                                             ; mali_memtrack_get_memory+F0↑w
.bss:000050A4                                                             ; mali_memtrack_get_memory:loc_CD0↑o
.bss:000050A4                                                             ; mali_memtrack_get_memory+120↑o
.bss:000050A4                                                             ; mali_memtrack_get_memory+122↑r
.bss:000050A4                                                             ; mali_memtrack_get_memory+166↑o
.bss:000050A4                                                             ; mali_memtrack_get_memory+170↑o
.bss:000050A4                                                             ; mali_memtrack_get_memory+172↑r
.bss:000050A4                                                             ; mali_memtrack_get_memory+216↑o ...
.bss:000050A8 ??                            unk_50A8 % 1                  ; DATA XREF: mali_memtrack_get_memory+AA↑o
.bss:000050A8                                                             ; mali_memtrack_get_memory+B2↑o
.bss:000050A8                                                             ; mali_memtrack_get_memory+130↑o
.bss:000050A8                                                             ; mali_memtrack_get_memory+13C↑o
.bss:000050A8                                                             ; mali_memtrack_get_memory+21C↑o
.bss:000050A8                                                             ; mali_memtrack_get_memory+224↑o
.bss:000050A8                                                             ; .text:off_E44↑o
.bss:000050A8                                                             ; .text:off_E54↑o
.bss:000050A8                                                             ; .text:off_E5C↑o
.bss:000050A9 ??                            % 1
.bss:000050AA ??                            % 1
.bss:000050AB ??                            % 1
.bss:000050AC ??                            % 1
.bss:000050AD ??                            % 1
.bss:000050AE ??                            % 1
.bss:000050AF ??                            % 1
.bss:000050B0 ??                            % 1
.bss:000050B1 ??                            % 1
.bss:000050B2 ??                            % 1
.bss:000050B3 ??                            % 1
.bss:000050B4 ??                            % 1
.bss:000050B5 ??                            % 1
.bss:000050B6 ??                            % 1
.bss:000050B7 ??                            % 1
.bss:000050B8 ??                            % 1
.bss:000050B9 ??                            % 1
.bss:000050BA ??                            % 1
.bss:000050BB ??                            % 1
.bss:000050BC ??                            % 1
.bss:000050BD ??                            % 1
.bss:000050BE ??                            % 1
.bss:000050BF ??                            % 1
.bss:000050C0 ??                            % 1
.bss:000050C1 ??                            % 1
.bss:000050C2 ??                            % 1
.bss:000050C3 ??                            % 1
.bss:000050C4 ??                            % 1
.bss:000050C5 ??                            % 1
.bss:000050C6 ??                            % 1
.bss:000050C7 ??                            % 1
.bss:000050C8 ??                            % 1
.bss:000050C9 ??                            % 1
.bss:000050CA ??                            % 1
.bss:000050CB ??                            % 1
.bss:000050CC ??                            % 1
.bss:000050CD ??                            % 1
.bss:000050CE ??                            % 1
.bss:000050CF ??                            % 1
.bss:000050D0 ??                            % 1
.bss:000050D1 ??                            % 1
.bss:000050D2 ??                            % 1
.bss:000050D3 ??                            % 1
.bss:000050D4 ??                            % 1
.bss:000050D5 ??                            % 1
.bss:000050D6 ??                            % 1
.bss:000050D7 ??                            % 1
.bss:000050D8 ??                            % 1
.bss:000050D9 ??                            % 1
.bss:000050DA ??                            % 1
.bss:000050DB ??                            % 1
.bss:000050DC ??                            % 1
.bss:000050DD ??                            % 1
.bss:000050DE ??                            % 1
.bss:000050DF ??                            % 1
.bss:000050E0 ??                            % 1
.bss:000050E1 ??                            % 1
.bss:000050E2 ??                            % 1
.bss:000050E3 ??                            % 1
.bss:000050E4 ??                            % 1
.bss:000050E5 ??                            % 1
.bss:000050E6 ??                            % 1
.bss:000050E7 ??                            % 1
.bss:000050E8 ??                            % 1
.bss:000050E9 ??                            % 1
.bss:000050EA ??                            % 1
.bss:000050EB ??                            % 1
.bss:000050EC ??                            % 1
.bss:000050ED ??                            % 1
.bss:000050EE ??                            % 1
.bss:000050EF ??                            % 1
.bss:000050F0 ??                            % 1
.bss:000050F1 ??                            % 1
.bss:000050F2 ??                            % 1
.bss:000050F3 ??                            % 1
.bss:000050F4 ??                            % 1
.bss:000050F5 ??                            % 1
.bss:000050F6 ??                            % 1
.bss:000050F7 ??                            % 1
.bss:000050F8 ??                            % 1
.bss:000050F9 ??                            % 1
.bss:000050FA ??                            % 1
.bss:000050FB ??                            % 1
.bss:000050FC ??                            % 1
.bss:000050FD ??                            % 1
.bss:000050FE ??                            % 1
.bss:000050FF ??                            % 1
.bss:00005100 ??                            % 1
.bss:00005101 ??                            % 1
.bss:00005102 ??                            % 1
.bss:00005103 ??                            % 1
.bss:00005104 ??                            % 1
.bss:00005105 ??                            % 1
.bss:00005106 ??                            % 1
.bss:00005107 ??                            % 1
.bss:00005108 ??                            % 1
.bss:00005109 ??                            % 1
.bss:0000510A ??                            % 1
.bss:0000510B ??                            % 1
.bss:0000510C ??                            % 1
.bss:0000510D ??                            % 1
.bss:0000510E ??                            % 1
.bss:0000510F ??                            % 1
.bss:00005110 ??                            % 1
.bss:00005111 ??                            % 1
.bss:00005112 ??                            % 1
.bss:00005113 ??                            % 1
.bss:00005114 ??                            % 1
.bss:00005115 ??                            % 1
.bss:00005116 ??                            % 1
.bss:00005117 ??                            % 1
.bss:00005118 ??                            % 1
.bss:00005119 ??                            % 1
.bss:0000511A ??                            % 1
.bss:0000511B ??                            % 1
.bss:0000511C ??                            % 1
.bss:0000511D ??                            % 1
.bss:0000511E ??                            % 1
.bss:0000511F ??                            % 1
.bss:00005120 ??                            % 1
.bss:00005121 ??                            % 1
.bss:00005122 ??                            % 1
.bss:00005123 ??                            % 1
.bss:00005124 ??                            % 1
.bss:00005125 ??                            % 1
.bss:00005126 ??                            % 1
.bss:00005127 ??                            % 1
.bss:00005128 ??                            % 1
.bss:00005129 ??                            % 1
.bss:0000512A ??                            % 1
.bss:0000512B ??                            % 1
.bss:0000512C ??                            % 1
.bss:0000512D ??                            % 1
.bss:0000512E ??                            % 1
.bss:0000512F ??                            % 1
.bss:00005130 ??                            % 1
.bss:00005131 ??                            % 1
.bss:00005132 ??                            % 1
.bss:00005133 ??                            % 1
.bss:00005134 ??                            % 1
.bss:00005135 ??                            % 1
.bss:00005136 ??                            % 1
.bss:00005137 ??                            % 1
.bss:00005138 ??                            % 1
.bss:00005139 ??                            % 1
.bss:0000513A ??                            % 1
.bss:0000513B ??                            % 1
.bss:0000513C ??                            % 1
.bss:0000513D ??                            % 1
.bss:0000513E ??                            % 1
.bss:0000513F ??                            % 1
.bss:00005140 ??                            % 1
.bss:00005141 ??                            % 1
.bss:00005142 ??                            % 1
.bss:00005143 ??                            % 1
.bss:00005144 ??                            % 1
.bss:00005145 ??                            % 1
.bss:00005146 ??                            % 1
.bss:00005147 ??                            % 1
.bss:00005148 ??                            % 1
.bss:00005149 ??                            % 1
.bss:0000514A ??                            % 1
.bss:0000514B ??                            % 1
.bss:0000514C ??                            % 1
.bss:0000514D ??                            % 1
.bss:0000514E ??                            % 1
.bss:0000514F ??                            % 1
.bss:00005150 ??                            % 1
.bss:00005151 ??                            % 1
.bss:00005152 ??                            % 1
.bss:00005153 ??                            % 1
.bss:00005154 ??                            % 1
.bss:00005155 ??                            % 1
.bss:00005156 ??                            % 1
.bss:00005157 ??                            % 1
.bss:00005158 ??                            % 1
.bss:00005159 ??                            % 1
.bss:0000515A ??                            % 1
.bss:0000515B ??                            % 1
.bss:0000515C ??                            % 1
.bss:0000515D ??                            % 1
.bss:0000515E ??                            % 1
.bss:0000515F ??                            % 1
.bss:00005160 ??                            % 1
.bss:00005161 ??                            % 1
.bss:00005162 ??                            % 1
.bss:00005163 ??                            % 1
.bss:00005164 ??                            % 1
.bss:00005165 ??                            % 1
.bss:00005166 ??                            % 1
.bss:00005167 ??                            % 1
.bss:00005168 ??                            % 1
.bss:00005169 ??                            % 1
.bss:0000516A ??                            % 1
.bss:0000516B ??                            % 1
.bss:0000516C ??                            % 1
.bss:0000516D ??                            % 1
.bss:0000516E ??                            % 1
.bss:0000516F ??                            % 1
.bss:00005170 ??                            % 1
.bss:00005171 ??                            % 1
.bss:00005172 ??                            % 1
.bss:00005173 ??                            % 1
.bss:00005174 ??                            % 1
.bss:00005175 ??                            % 1
.bss:00005176 ??                            % 1
.bss:00005177 ??                            % 1
.bss:00005178 ??                            % 1
.bss:00005179 ??                            % 1
.bss:0000517A ??                            % 1
.bss:0000517B ??                            % 1
.bss:0000517C ??                            % 1
.bss:0000517D ??                            % 1
.bss:0000517E ??                            % 1
.bss:0000517F ??                            % 1
.bss:00005180 ??                            % 1
.bss:00005181 ??                            % 1
.bss:00005182 ??                            % 1
.bss:00005183 ??                            % 1
.bss:00005184 ??                            % 1
.bss:00005185 ??                            % 1
.bss:00005186 ??                            % 1
.bss:00005187 ??                            % 1
.bss:00005188 ??                            % 1
.bss:00005189 ??                            % 1
.bss:0000518A ??                            % 1
.bss:0000518B ??                            % 1
.bss:0000518C ??                            % 1
.bss:0000518D ??                            % 1
.bss:0000518E ??                            % 1
.bss:0000518F ??                            % 1
.bss:00005190 ??                            % 1
.bss:00005191 ??                            % 1
.bss:00005192 ??                            % 1
.bss:00005193 ??                            % 1
.bss:00005194 ??                            % 1
.bss:00005195 ??                            % 1
.bss:00005196 ??                            % 1
.bss:00005197 ??                            % 1
.bss:00005198 ??                            % 1
.bss:00005199 ??                            % 1
.bss:0000519A ??                            % 1
.bss:0000519B ??                            % 1
.bss:0000519C ??                            % 1
.bss:0000519D ??                            % 1
.bss:0000519E ??                            % 1
.bss:0000519F ??                            % 1
.bss:000051A0 ??                            % 1
.bss:000051A1 ??                            % 1
.bss:000051A2 ??                            % 1
.bss:000051A3 ??                            % 1
.bss:000051A4 ??                            % 1
.bss:000051A5 ??                            % 1
.bss:000051A6 ??                            % 1
.bss:000051A7 ??                            % 1
.bss:000051A8 ??                            unk_51A8 % 1                  ; DATA XREF: sub_18B0+E↑o
.bss:000051A8                                                             ; sub_18B0+10↑o
.bss:000051A8                                                             ; .text:off_18F0↑o
.bss:000051A8                               ; .bss ends
.bss:000051A8
extern:000051AC                               ; ===========================================================================
extern:000051AC
extern:000051AC                               ; Segment type: Externs
extern:000051AC                               ; int __fastcall __cxa_finalize(void *)
extern:000051AC 00 00 00 00                   IMPORT __imp___cxa_finalize   ; CODE XREF: __cxa_finalize+8↑j
extern:000051AC                                                             ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000051B0                               ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000051B0 00 00 00 00                   IMPORT __imp___cxa_atexit     ; CODE XREF: __cxa_atexit+8↑j
extern:000051B0                                                             ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000051B4 00 00 00 00                   IMPORT __imp___register_atfork
extern:000051B4                                                             ; CODE XREF: __register_atfork+8↑j
extern:000051B4                                                             ; DATA XREF: .got:__register_atfork_ptr↑o
extern:000051B8 00 00 00 00                   IMPORT __imp_dladdr           ; CODE XREF: dladdr+8↑j
extern:000051B8                                                             ; DATA XREF: .got:dladdr_ptr↑o
extern:000051BC 00 00 00 00                   IMPORT __imp___gnu_Unwind_Find_exidx
extern:000051BC                                                             ; CODE XREF: __gnu_Unwind_Find_exidx+8↑j
extern:000051BC                                                             ; DATA XREF: .got:__gnu_Unwind_Find_exidx_ptr↑o
extern:000051C0 00 00 00 00                   IMPORT __imp___aeabi_memcpy   ; CODE XREF: __aeabi_memcpy+8↑j
extern:000051C0                                                             ; DATA XREF: .got:__aeabi_memcpy_ptr↑o
extern:000051C4 00 00 00 00                   IMPORT __imp___aeabi_memclr8  ; CODE XREF: __aeabi_memclr8+8↑j
extern:000051C4                                                             ; DATA XREF: .got:__aeabi_memclr8_ptr↑o
extern:000051C8 00 00 00 00                   IMPORT __imp___aeabi_memcpy4  ; CODE XREF: __aeabi_memcpy4+8↑j
extern:000051C8                                                             ; DATA XREF: .got:__aeabi_memcpy4_ptr↑o
extern:000051CC 00 00 00 00                   IMPORT __imp___android_log_print
extern:000051CC                                                             ; CODE XREF: __android_log_print+8↑j
extern:000051CC                                                             ; DATA XREF: .got:__android_log_print_ptr↑o
extern:000051D0 00 00 00 00                   IMPORT __imp___snprintf_chk   ; CODE XREF: __snprintf_chk+8↑j
extern:000051D0                                                             ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000051D4 00 00 00 00                   IMPORT __imp___sprintf_chk    ; CODE XREF: __sprintf_chk+8↑j
extern:000051D4                                                             ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:000051D8 00 00 00 00                   IMPORT __imp___stack_chk_fail ; CODE XREF: __stack_chk_fail+8↑j
extern:000051D8                                                             ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000051DC 00 00 00 00                   IMPORT __stack_chk_guard      ; DATA XREF: mali_memtrack_get_memory+1C↑o
extern:000051DC                                                             ; mali_memtrack_get_memory+20↑r
extern:000051DC                                                             ; mali_memtrack_get_memory+24C↑o
extern:000051DC                                                             ; mali_memtrack_get_memory+24E↑r
extern:000051DC                                                             ; ion_memtrack_get_memory+14↑o
extern:000051DC                                                             ; ion_memtrack_get_memory+16↑r
extern:000051DC                                                             ; ion_memtrack_get_memory+E6↑o
extern:000051DC                                                             ; ion_memtrack_get_memory+E8↑r
extern:000051DC                                                             ; sub_1000+12↑o
extern:000051DC                                                             ; sub_1000+16↑r
extern:000051DC                                                             ; sub_1000+294↑o
extern:000051DC                                                             ; sub_1000+296↑r
extern:000051DC                                                             ; sub_13E0+12↑o
extern:000051DC                                                             ; sub_13E0+16↑r
extern:000051DC                                                             ; sub_13E0+F2↑o ...
extern:000051E0 00 00 00 00                   IMPORT __imp___strlen_chk     ; CODE XREF: __strlen_chk+8↑j
extern:000051E0                                                             ; DATA XREF: .got:__strlen_chk_ptr↑o
extern:000051E4                               ; int closedir(DIR *dirp)
extern:000051E4 00 00 00 00                   IMPORT __imp_closedir         ; CODE XREF: closedir+8↑j
extern:000051E4                                                             ; DATA XREF: .got:closedir_ptr↑o
extern:000051E8                               ; int fclose(FILE *stream)
extern:000051E8 00 00 00 00                   IMPORT __imp_fclose           ; CODE XREF: fclose+8↑j
extern:000051E8                                                             ; DATA XREF: .got:fclose_ptr↑o
extern:000051EC                               ; char *fgets(char *s, int n, FILE *stream)
extern:000051EC 00 00 00 00                   IMPORT __imp_fgets            ; CODE XREF: fgets+8↑j
extern:000051EC                                                             ; DATA XREF: .got:fgets_ptr↑o
extern:000051F0                               ; FILE *fopen(const char *filename, const char *modes)
extern:000051F0 00 00 00 00                   IMPORT __imp_fopen            ; CODE XREF: fopen+8↑j
extern:000051F0                                                             ; DATA XREF: .got:fopen_ptr↑o
extern:000051F4                               ; int fseek(FILE *stream, int off, int whence)
extern:000051F4 00 00 00 00                   IMPORT __imp_fseek            ; CODE XREF: fseek+8↑j
extern:000051F4                                                             ; DATA XREF: .got:fseek_ptr↑o
extern:000051F8                               ; DIR *opendir(const char *name)
extern:000051F8 00 00 00 00                   IMPORT __imp_opendir          ; CODE XREF: opendir+8↑j
extern:000051F8                                                             ; DATA XREF: .got:opendir_ptr↑o
extern:000051FC                               ; struct dirent *readdir(DIR *dirp)
extern:000051FC 00 00 00 00                   IMPORT __imp_readdir          ; CODE XREF: readdir+8↑j
extern:000051FC                                                             ; DATA XREF: .got:readdir_ptr↑o
extern:00005200                               ; int sscanf(const char *s, const char *format, ...)
extern:00005200 00 00 00 00                   IMPORT __imp_sscanf           ; CODE XREF: sscanf+8↑j
extern:00005200                                                             ; DATA XREF: .got:sscanf_ptr↑o
extern:00005204                               ; int strcmp(const char *s1, const char *s2)
extern:00005204 00 00 00 00                   IMPORT __imp_strcmp           ; CODE XREF: strcmp+8↑j
extern:00005204                                                             ; DATA XREF: .got:strcmp_ptr↑o
extern:00005208                               ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00005208 00 00 00 00                   IMPORT __imp_strncmp          ; CODE XREF: strncmp+8↑j
extern:00005208                                                             ; DATA XREF: .got:strncmp_ptr↑o
extern:0000520C 00 00 00 00                   IMPORT __imp___errno          ; CODE XREF: __errno+8↑j
extern:0000520C                                                             ; DATA XREF: .got:__errno_ptr↑o
extern:00005210                               ; int lstat(const char *file, struct stat *buf)
extern:00005210 00 00 00 00                   IMPORT __imp_lstat            ; CODE XREF: lstat+8↑j
extern:00005210                                                             ; DATA XREF: .got:lstat_ptr↑o
extern:00005214                               ; void abort(void)
extern:00005214 00 00 00 00                   IMPORT __imp_abort            ; CODE XREF: abort+8↑j
extern:00005214                                                             ; DATA XREF: .got:abort_ptr↑o
extern:00005218                               ; int fprintf(FILE *stream, const char *format, ...)
extern:00005218 00 00 00 00                   IMPORT __imp_fprintf          ; CODE XREF: fprintf+8↑j
extern:00005218                                                             ; DATA XREF: .got:fprintf_ptr↑o
extern:0000521C                               ; struct _IO_FILE *stderr
extern:0000521C 00 00 00 00                   IMPORT stderr                 ; DATA XREF: sub_1760+C↑o
extern:0000521C                                                             ; sub_1760+10↑r
extern:0000521C                                                             ; sub_1E4C+E↑o
extern:0000521C                                                             ; sub_1E4C+12↑r
extern:0000521C                                                             ; .got:stderr_ptr↑o
extern:0000521C
abs:00005220                               ; ===========================================================================
abs:00005220
abs:00005220                               ; Segment type: Absolute symbols
abs:00005220                               _end = 0x51A9
abs:00005224                               _edata = 0x50A0
abs:00005228                               __bss_start = 0x50A0
abs:00005228
abs:00005228                               END
